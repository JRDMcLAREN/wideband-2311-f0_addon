
build/wideband.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08001800 <_vectors>:
 8001800:	20000600 	.word	0x20000600
 8001804:	080019a1 	.word	0x080019a1
 8001808:	080045a1 	.word	0x080045a1
 800180c:	080019ed 	.word	0x080019ed
 8001810:	08001a11 	.word	0x08001a11
 8001814:	080019ec 	.word	0x080019ec
 8001818:	080019ff 	.word	0x080019ff
 800181c:	080019a3 	.word	0x080019a3
 8001820:	080019a3 	.word	0x080019a3
 8001824:	080019a3 	.word	0x080019a3
 8001828:	080019a3 	.word	0x080019a3
 800182c:	080019a3 	.word	0x080019a3
 8001830:	080019a3 	.word	0x080019a3
 8001834:	080019a3 	.word	0x080019a3
 8001838:	080019a3 	.word	0x080019a3
 800183c:	080019a3 	.word	0x080019a3
 8001840:	080019a3 	.word	0x080019a3
 8001844:	080019a3 	.word	0x080019a3
 8001848:	080019a3 	.word	0x080019a3
 800184c:	080019a3 	.word	0x080019a3
 8001850:	080019a3 	.word	0x080019a3
 8001854:	080019a3 	.word	0x080019a3
 8001858:	080019a3 	.word	0x080019a3
 800185c:	080019a3 	.word	0x080019a3
 8001860:	080019a3 	.word	0x080019a3
 8001864:	08004331 	.word	0x08004331
 8001868:	08003fc1 	.word	0x08003fc1
 800186c:	08004041 	.word	0x08004041
 8001870:	080040b1 	.word	0x080040b1
 8001874:	080044b1 	.word	0x080044b1
 8001878:	08004501 	.word	0x08004501
 800187c:	080043a1 	.word	0x080043a1
 8001880:	08004551 	.word	0x08004551
 8001884:	080019a3 	.word	0x080019a3
 8001888:	080019a3 	.word	0x080019a3
 800188c:	080019a3 	.word	0x080019a3
 8001890:	080019a3 	.word	0x080019a3
 8001894:	080019a3 	.word	0x080019a3
 8001898:	080019a3 	.word	0x080019a3
 800189c:	080019a3 	.word	0x080019a3
 80018a0:	080019a3 	.word	0x080019a3
 80018a4:	080019a3 	.word	0x080019a3
 80018a8:	080019a3 	.word	0x080019a3
 80018ac:	08003e41 	.word	0x08003e41
 80018b0:	08003f21 	.word	0x08003f21
 80018b4:	08003f71 	.word	0x08003f71
 80018b8:	08004191 	.word	0x08004191
 80018bc:	080019a3 	.word	0x080019a3

Disassembly of section .text:

080018d0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80018d0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80018d2:	4824      	ldr	r0, [pc, #144]	; (8001964 <endfiniloop+0x6>)
                msr     MSP, r0
 80018d4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80018d8:	4823      	ldr	r0, [pc, #140]	; (8001968 <endfiniloop+0xa>)
                msr     PSP, r0
 80018da:	f380 8809 	msr	PSP, r0

                /* CPU mode initialization as configured.*/
                movs    r0, #CRT0_CONTROL_INIT
 80018de:	2002      	movs	r0, #2
                msr     CONTROL, r0
 80018e0:	f380 8814 	msr	CONTROL, r0
                isb
 80018e4:	f3bf 8f6f 	isb	sy
                str     r0, [r1]
#endif

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 80018e8:	f002 fa5a 	bl	8003da0 <__cpu_init>
#endif

                /* Early initialization..*/
                bl      __early_init
 80018ec:	f002 fe60 	bl	80045b0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80018f0:	481e      	ldr	r0, [pc, #120]	; (800196c <endfiniloop+0xe>)
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80018f2:	491f      	ldr	r1, [pc, #124]	; (8001970 <endfiniloop+0x12>)
                ldr     r2, =__main_stack_end__
 80018f4:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <endfiniloop+0x6>)

080018f6 <msloop>:
msloop:
                cmp     r1, r2
 80018f6:	4291      	cmp	r1, r2
                bge     endmsloop
 80018f8:	da02      	bge.n	8001900 <endmsloop>
                str     r0, [r1]
 80018fa:	6008      	str	r0, [r1, #0]
                adds    r1, #4
 80018fc:	3104      	adds	r1, #4
                b       msloop
 80018fe:	e7fa      	b.n	80018f6 <msloop>

08001900 <endmsloop>:
endmsloop:
                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8001900:	491c      	ldr	r1, [pc, #112]	; (8001974 <endfiniloop+0x16>)
                ldr     r2, =__process_stack_end__
 8001902:	4a19      	ldr	r2, [pc, #100]	; (8001968 <endfiniloop+0xa>)

08001904 <psloop>:
psloop:
                cmp     r1, r2
 8001904:	4291      	cmp	r1, r2
                bge     endpsloop
 8001906:	da02      	bge.n	800190e <endpsloop>
                str     r0, [r1]
 8001908:	6008      	str	r0, [r1, #0]
                adds    r1, #4
 800190a:	3104      	adds	r1, #4
                b       psloop
 800190c:	e7fa      	b.n	8001904 <psloop>

0800190e <endpsloop>:
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800190e:	491a      	ldr	r1, [pc, #104]	; (8001978 <endfiniloop+0x1a>)
                ldr     r2, =__data_base__
 8001910:	4a1a      	ldr	r2, [pc, #104]	; (800197c <endfiniloop+0x1e>)
                ldr     r3, =__data_end__
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <endfiniloop+0x22>)

08001914 <dloop>:
dloop:
                cmp     r2, r3
 8001914:	429a      	cmp	r2, r3
                bge     enddloop
 8001916:	da04      	bge.n	8001922 <enddloop>
                ldr     r0, [r1]
 8001918:	6808      	ldr	r0, [r1, #0]
                str     r0, [r2]
 800191a:	6010      	str	r0, [r2, #0]
                adds    r1, #4
 800191c:	3104      	adds	r1, #4
                adds    r2, #4
 800191e:	3204      	adds	r2, #4
                b       dloop
 8001920:	e7f8      	b.n	8001914 <dloop>

08001922 <enddloop>:
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8001922:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8001924:	4917      	ldr	r1, [pc, #92]	; (8001984 <endfiniloop+0x26>)
                ldr     r2, =__bss_end__
 8001926:	4a18      	ldr	r2, [pc, #96]	; (8001988 <endfiniloop+0x2a>)

08001928 <bloop>:
bloop:
                cmp     r1, r2
 8001928:	4291      	cmp	r1, r2
                bge     endbloop
 800192a:	da02      	bge.n	8001932 <endbloop>
                str     r0, [r1]
 800192c:	6008      	str	r0, [r1, #0]
                adds    r1, #4
 800192e:	3104      	adds	r1, #4
                b       bloop
 8001930:	e7fa      	b.n	8001928 <bloop>

08001932 <endbloop>:
endbloop:
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8001932:	f002 fa4d 	bl	8003dd0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8001936:	f002 fa3b 	bl	8003db0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 800193a:	4c14      	ldr	r4, [pc, #80]	; (800198c <endfiniloop+0x2e>)
                ldr     r5, =__init_array_end__
 800193c:	4d14      	ldr	r5, [pc, #80]	; (8001990 <endfiniloop+0x32>)

0800193e <initloop>:
initloop:
                cmp     r4, r5
 800193e:	42ac      	cmp	r4, r5
                bge     endinitloop
 8001940:	da03      	bge.n	800194a <endinitloop>
                ldr     r1, [r4]
 8001942:	6821      	ldr	r1, [r4, #0]
                blx     r1
 8001944:	4788      	blx	r1
                adds    r4, #4
 8001946:	3404      	adds	r4, #4
                b       initloop
 8001948:	e7f9      	b.n	800193e <initloop>

0800194a <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 800194a:	f002 fed9 	bl	8004700 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800194e:	4c11      	ldr	r4, [pc, #68]	; (8001994 <endfiniloop+0x36>)
                ldr     r5, =__fini_array_end__
 8001950:	4d11      	ldr	r5, [pc, #68]	; (8001998 <endfiniloop+0x3a>)

08001952 <finiloop>:
finiloop:
                cmp     r4, r5
 8001952:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8001954:	da03      	bge.n	800195e <endfiniloop>
                ldr     r1, [r4]
 8001956:	6821      	ldr	r1, [r4, #0]
                blx     r1
 8001958:	4788      	blx	r1
                adds    r4, #4
 800195a:	3404      	adds	r4, #4
                b       finiloop
 800195c:	e7f9      	b.n	8001952 <finiloop>

0800195e <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                ldr     r1, =__default_exit
 800195e:	490f      	ldr	r1, [pc, #60]	; (800199c <endfiniloop+0x3e>)
                bx      r1
 8001960:	4708      	bx	r1
 8001962:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 8001964:	20000600 	.word	0x20000600
                ldr     r0, =__process_stack_end__
 8001968:	20000a00 	.word	0x20000a00
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800196c:	55555555 	.word	0x55555555
                ldr     r1, =__main_stack_base__
 8001970:	20000200 	.word	0x20000200
                ldr     r1, =__process_stack_base__
 8001974:	20000600 	.word	0x20000600
                ldr     r1, =__textdata_base__
 8001978:	080064ec 	.word	0x080064ec
                ldr     r2, =__data_base__
 800197c:	20000a00 	.word	0x20000a00
                ldr     r3, =__data_end__
 8001980:	20000a08 	.word	0x20000a08
                ldr     r1, =__bss_base__
 8001984:	20000a08 	.word	0x20000a08
                ldr     r2, =__bss_end__
 8001988:	20001990 	.word	0x20001990
                ldr     r4, =__init_array_base__
 800198c:	080018c0 	.word	0x080018c0
                ldr     r5, =__init_array_end__
 8001990:	080018c4 	.word	0x080018c4
                ldr     r4, =__fini_array_base__
 8001994:	080018c4 	.word	0x080018c4
                ldr     r5, =__fini_array_end__
 8001998:	080018c4 	.word	0x080018c4
                ldr     r1, =__default_exit
 800199c:	08003dc1 	.word	0x08003dc1

080019a0 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80019a0:	e796      	b.n	80018d0 <_crt0_entry>

080019a2 <DebugMon_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80019a2:	f000 f800 	bl	80019a6 <_unhandled_exception>

080019a6 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80019a6:	e7fe      	b.n	80019a6 <_unhandled_exception>

080019a8 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, lr}
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
                mov     r4, r8
 80019aa:	4644      	mov	r4, r8
                mov     r5, r9
 80019ac:	464d      	mov	r5, r9
                mov     r6, r10
 80019ae:	4656      	mov	r6, sl
                mov     r7, r11
 80019b0:	465f      	mov	r7, fp
                push    {r4, r5, r6, r7}
 80019b2:	b4f0      	push	{r4, r5, r6, r7}
                
                mov     r3, sp
 80019b4:	466b      	mov	r3, sp
                str     r3, [r1, #CONTEXT_OFFSET]
 80019b6:	60cb      	str	r3, [r1, #12]
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80019b8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80019ba:	469d      	mov	sp, r3
                
                pop     {r4, r5, r6, r7}
 80019bc:	bcf0      	pop	{r4, r5, r6, r7}
                mov     r8, r4
 80019be:	46a0      	mov	r8, r4
                mov     r9, r5
 80019c0:	46a9      	mov	r9, r5
                mov     r10, r6
 80019c2:	46b2      	mov	sl, r6
                mov     r11, r7
 80019c4:	46bb      	mov	fp, r7
                pop     {r4, r5, r6, r7, pc}
 80019c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019c8 <__port_thread_start>:
                bl      __dbg_check_unlock
#endif
#if CH_DBG_STATISTICS
                bl      __stats_stop_measure_crit_thd
#endif
                cpsie   i
 80019c8:	b662      	cpsie	i
                mov     r0, r5
 80019ca:	1c28      	adds	r0, r5, #0
                blx     r4
 80019cc:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80019ce:	2000      	movs	r0, #0
                bl      chThdExit
 80019d0:	f002 f9d6 	bl	8003d80 <chThdExit>

080019d4 <.zombies>:
.zombies:       b       .zombies
 80019d4:	e7fe      	b.n	80019d4 <.zombies>

080019d6 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 80019d6:	f002 f99b 	bl	8003d10 <chSchDoPreemption>

080019da <__port_exit_from_isr>:
#if CH_DBG_STATISTICS
                bl      __stats_stop_measure_crit_thd
#endif
                .globl  __port_exit_from_isr
__port_exit_from_isr:
                ldr     r2, .L2
 80019da:	4a02      	ldr	r2, [pc, #8]	; (80019e4 <__port_exit_from_isr+0xa>)
                ldr     r3, .L3
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <__port_exit_from_isr+0xe>)
                str     r3, [r2, #0]
 80019de:	6013      	str	r3, [r2, #0]
#if CORTEX_ALTERNATE_SWITCH
                cpsie   i
#endif
.L1:            b       .L1
 80019e0:	e7fe      	b.n	80019e0 <__port_exit_from_isr+0x6>
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	e000ed04 	.word	0xe000ed04
 80019e8:	80000000 	.word	0x80000000

080019ec <BusFault_Handler>:

.global HardFault_Handler
.global BusFault_Handler
HardFault_Handler:
BusFault_Handler:
	tst LR, #4
 80019ec:	f01e 0f04 	tst.w	lr, #4
	ite EQ
 80019f0:	bf0c      	ite	eq
	mrseq R0, MSP
 80019f2:	f3ef 8008 	mrseq	r0, MSP
	mrsne R0, PSP
 80019f6:	f3ef 8009 	mrsne	r0, PSP
	b HardFault_Handler_C
 80019fa:	f003 ba79 	b.w	8004ef0 <HardFault_Handler_C>

080019fe <UsageFault_Handler>:

.global UsageFault_Handler
UsageFault_Handler:
	tst LR, #4
 80019fe:	f01e 0f04 	tst.w	lr, #4
	ite EQ
 8001a02:	bf0c      	ite	eq
	mrseq R0, MSP
 8001a04:	f3ef 8008 	mrseq	r0, MSP
	mrsne R0, PSP
 8001a08:	f3ef 8009 	mrsne	r0, PSP
	b UsageFault_Handler_C
 8001a0c:	f003 ba88 	b.w	8004f20 <UsageFault_Handler_C>

08001a10 <MemManage_Handler>:

.global MemManage_Handler
MemManage_Handler:
	tst LR, #4
 8001a10:	f01e 0f04 	tst.w	lr, #4
	ite EQ
 8001a14:	bf0c      	ite	eq
	mrseq R0, MSP
 8001a16:	f3ef 8008 	mrseq	r0, MSP
	mrsne R0, PSP
 8001a1a:	f3ef 8009 	mrsne	r0, PSP
	b MemManage_Handler_C
 8001a1e:	f003 ba87 	b.w	8004f30 <MemManage_Handler_C>
 8001a22:	bf00      	nop

08001a24 <__udivsi3>:
 8001a24:	2200      	movs	r2, #0
 8001a26:	0843      	lsrs	r3, r0, #1
 8001a28:	428b      	cmp	r3, r1
 8001a2a:	d374      	bcc.n	8001b16 <__udivsi3+0xf2>
 8001a2c:	0903      	lsrs	r3, r0, #4
 8001a2e:	428b      	cmp	r3, r1
 8001a30:	d35f      	bcc.n	8001af2 <__udivsi3+0xce>
 8001a32:	0a03      	lsrs	r3, r0, #8
 8001a34:	428b      	cmp	r3, r1
 8001a36:	d344      	bcc.n	8001ac2 <__udivsi3+0x9e>
 8001a38:	0b03      	lsrs	r3, r0, #12
 8001a3a:	428b      	cmp	r3, r1
 8001a3c:	d328      	bcc.n	8001a90 <__udivsi3+0x6c>
 8001a3e:	0c03      	lsrs	r3, r0, #16
 8001a40:	428b      	cmp	r3, r1
 8001a42:	d30d      	bcc.n	8001a60 <__udivsi3+0x3c>
 8001a44:	22ff      	movs	r2, #255	; 0xff
 8001a46:	0209      	lsls	r1, r1, #8
 8001a48:	ba12      	rev	r2, r2
 8001a4a:	0c03      	lsrs	r3, r0, #16
 8001a4c:	428b      	cmp	r3, r1
 8001a4e:	d302      	bcc.n	8001a56 <__udivsi3+0x32>
 8001a50:	1212      	asrs	r2, r2, #8
 8001a52:	0209      	lsls	r1, r1, #8
 8001a54:	d065      	beq.n	8001b22 <__udivsi3+0xfe>
 8001a56:	0b03      	lsrs	r3, r0, #12
 8001a58:	428b      	cmp	r3, r1
 8001a5a:	d319      	bcc.n	8001a90 <__udivsi3+0x6c>
 8001a5c:	e000      	b.n	8001a60 <__udivsi3+0x3c>
 8001a5e:	0a09      	lsrs	r1, r1, #8
 8001a60:	0bc3      	lsrs	r3, r0, #15
 8001a62:	428b      	cmp	r3, r1
 8001a64:	d301      	bcc.n	8001a6a <__udivsi3+0x46>
 8001a66:	03cb      	lsls	r3, r1, #15
 8001a68:	1ac0      	subs	r0, r0, r3
 8001a6a:	4152      	adcs	r2, r2
 8001a6c:	0b83      	lsrs	r3, r0, #14
 8001a6e:	428b      	cmp	r3, r1
 8001a70:	d301      	bcc.n	8001a76 <__udivsi3+0x52>
 8001a72:	038b      	lsls	r3, r1, #14
 8001a74:	1ac0      	subs	r0, r0, r3
 8001a76:	4152      	adcs	r2, r2
 8001a78:	0b43      	lsrs	r3, r0, #13
 8001a7a:	428b      	cmp	r3, r1
 8001a7c:	d301      	bcc.n	8001a82 <__udivsi3+0x5e>
 8001a7e:	034b      	lsls	r3, r1, #13
 8001a80:	1ac0      	subs	r0, r0, r3
 8001a82:	4152      	adcs	r2, r2
 8001a84:	0b03      	lsrs	r3, r0, #12
 8001a86:	428b      	cmp	r3, r1
 8001a88:	d301      	bcc.n	8001a8e <__udivsi3+0x6a>
 8001a8a:	030b      	lsls	r3, r1, #12
 8001a8c:	1ac0      	subs	r0, r0, r3
 8001a8e:	4152      	adcs	r2, r2
 8001a90:	0ac3      	lsrs	r3, r0, #11
 8001a92:	428b      	cmp	r3, r1
 8001a94:	d301      	bcc.n	8001a9a <__udivsi3+0x76>
 8001a96:	02cb      	lsls	r3, r1, #11
 8001a98:	1ac0      	subs	r0, r0, r3
 8001a9a:	4152      	adcs	r2, r2
 8001a9c:	0a83      	lsrs	r3, r0, #10
 8001a9e:	428b      	cmp	r3, r1
 8001aa0:	d301      	bcc.n	8001aa6 <__udivsi3+0x82>
 8001aa2:	028b      	lsls	r3, r1, #10
 8001aa4:	1ac0      	subs	r0, r0, r3
 8001aa6:	4152      	adcs	r2, r2
 8001aa8:	0a43      	lsrs	r3, r0, #9
 8001aaa:	428b      	cmp	r3, r1
 8001aac:	d301      	bcc.n	8001ab2 <__udivsi3+0x8e>
 8001aae:	024b      	lsls	r3, r1, #9
 8001ab0:	1ac0      	subs	r0, r0, r3
 8001ab2:	4152      	adcs	r2, r2
 8001ab4:	0a03      	lsrs	r3, r0, #8
 8001ab6:	428b      	cmp	r3, r1
 8001ab8:	d301      	bcc.n	8001abe <__udivsi3+0x9a>
 8001aba:	020b      	lsls	r3, r1, #8
 8001abc:	1ac0      	subs	r0, r0, r3
 8001abe:	4152      	adcs	r2, r2
 8001ac0:	d2cd      	bcs.n	8001a5e <__udivsi3+0x3a>
 8001ac2:	09c3      	lsrs	r3, r0, #7
 8001ac4:	428b      	cmp	r3, r1
 8001ac6:	d301      	bcc.n	8001acc <__udivsi3+0xa8>
 8001ac8:	01cb      	lsls	r3, r1, #7
 8001aca:	1ac0      	subs	r0, r0, r3
 8001acc:	4152      	adcs	r2, r2
 8001ace:	0983      	lsrs	r3, r0, #6
 8001ad0:	428b      	cmp	r3, r1
 8001ad2:	d301      	bcc.n	8001ad8 <__udivsi3+0xb4>
 8001ad4:	018b      	lsls	r3, r1, #6
 8001ad6:	1ac0      	subs	r0, r0, r3
 8001ad8:	4152      	adcs	r2, r2
 8001ada:	0943      	lsrs	r3, r0, #5
 8001adc:	428b      	cmp	r3, r1
 8001ade:	d301      	bcc.n	8001ae4 <__udivsi3+0xc0>
 8001ae0:	014b      	lsls	r3, r1, #5
 8001ae2:	1ac0      	subs	r0, r0, r3
 8001ae4:	4152      	adcs	r2, r2
 8001ae6:	0903      	lsrs	r3, r0, #4
 8001ae8:	428b      	cmp	r3, r1
 8001aea:	d301      	bcc.n	8001af0 <__udivsi3+0xcc>
 8001aec:	010b      	lsls	r3, r1, #4
 8001aee:	1ac0      	subs	r0, r0, r3
 8001af0:	4152      	adcs	r2, r2
 8001af2:	08c3      	lsrs	r3, r0, #3
 8001af4:	428b      	cmp	r3, r1
 8001af6:	d301      	bcc.n	8001afc <__udivsi3+0xd8>
 8001af8:	00cb      	lsls	r3, r1, #3
 8001afa:	1ac0      	subs	r0, r0, r3
 8001afc:	4152      	adcs	r2, r2
 8001afe:	0883      	lsrs	r3, r0, #2
 8001b00:	428b      	cmp	r3, r1
 8001b02:	d301      	bcc.n	8001b08 <__udivsi3+0xe4>
 8001b04:	008b      	lsls	r3, r1, #2
 8001b06:	1ac0      	subs	r0, r0, r3
 8001b08:	4152      	adcs	r2, r2
 8001b0a:	0843      	lsrs	r3, r0, #1
 8001b0c:	428b      	cmp	r3, r1
 8001b0e:	d301      	bcc.n	8001b14 <__udivsi3+0xf0>
 8001b10:	004b      	lsls	r3, r1, #1
 8001b12:	1ac0      	subs	r0, r0, r3
 8001b14:	4152      	adcs	r2, r2
 8001b16:	1a41      	subs	r1, r0, r1
 8001b18:	d200      	bcs.n	8001b1c <__udivsi3+0xf8>
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	4152      	adcs	r2, r2
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4770      	bx	lr
 8001b22:	e7ff      	b.n	8001b24 <__udivsi3+0x100>
 8001b24:	b501      	push	{r0, lr}
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f806 	bl	8001b38 <__aeabi_idiv0>
 8001b2c:	bd02      	pop	{r1, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)

08001b30 <__aeabi_uidivmod>:
 8001b30:	2900      	cmp	r1, #0
 8001b32:	d0f7      	beq.n	8001b24 <__udivsi3+0x100>
 8001b34:	e776      	b.n	8001a24 <__udivsi3>
 8001b36:	4770      	bx	lr

08001b38 <__aeabi_idiv0>:
 8001b38:	4770      	bx	lr
 8001b3a:	46c0      	nop			; (mov r8, r8)

08001b3c <__aeabi_cfrcmple>:
 8001b3c:	4684      	mov	ip, r0
 8001b3e:	0008      	movs	r0, r1
 8001b40:	4661      	mov	r1, ip
 8001b42:	e7ff      	b.n	8001b44 <__aeabi_cfcmpeq>

08001b44 <__aeabi_cfcmpeq>:
 8001b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001b46:	f003 fe5b 	bl	8005800 <__lesf2>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d401      	bmi.n	8001b52 <__aeabi_cfcmpeq+0xe>
 8001b4e:	2100      	movs	r1, #0
 8001b50:	42c8      	cmn	r0, r1
 8001b52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001b54 <__aeabi_fcmpeq>:
 8001b54:	b510      	push	{r4, lr}
 8001b56:	f003 fde7 	bl	8005728 <__eqsf2>
 8001b5a:	4240      	negs	r0, r0
 8001b5c:	3001      	adds	r0, #1
 8001b5e:	bd10      	pop	{r4, pc}

08001b60 <__aeabi_fcmplt>:
 8001b60:	b510      	push	{r4, lr}
 8001b62:	f003 fe4d 	bl	8005800 <__lesf2>
 8001b66:	2800      	cmp	r0, #0
 8001b68:	db01      	blt.n	8001b6e <__aeabi_fcmplt+0xe>
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	bd10      	pop	{r4, pc}
 8001b6e:	2001      	movs	r0, #1
 8001b70:	bd10      	pop	{r4, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)

08001b74 <__aeabi_fcmple>:
 8001b74:	b510      	push	{r4, lr}
 8001b76:	f003 fe43 	bl	8005800 <__lesf2>
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	dd01      	ble.n	8001b82 <__aeabi_fcmple+0xe>
 8001b7e:	2000      	movs	r0, #0
 8001b80:	bd10      	pop	{r4, pc}
 8001b82:	2001      	movs	r0, #1
 8001b84:	bd10      	pop	{r4, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)

08001b88 <__aeabi_fcmpgt>:
 8001b88:	b510      	push	{r4, lr}
 8001b8a:	f003 fdf3 	bl	8005774 <__gesf2>
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	dc01      	bgt.n	8001b96 <__aeabi_fcmpgt+0xe>
 8001b92:	2000      	movs	r0, #0
 8001b94:	bd10      	pop	{r4, pc}
 8001b96:	2001      	movs	r0, #1
 8001b98:	bd10      	pop	{r4, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)

08001b9c <__aeabi_fcmpge>:
 8001b9c:	b510      	push	{r4, lr}
 8001b9e:	f003 fde9 	bl	8005774 <__gesf2>
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	da01      	bge.n	8001baa <__aeabi_fcmpge+0xe>
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	bd10      	pop	{r4, pc}
 8001baa:	2001      	movs	r0, #1
 8001bac:	bd10      	pop	{r4, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)

08001bb0 <__clzsi2>:
 8001bb0:	211c      	movs	r1, #28
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	041b      	lsls	r3, r3, #16
 8001bb6:	4298      	cmp	r0, r3
 8001bb8:	d301      	bcc.n	8001bbe <__clzsi2+0xe>
 8001bba:	0c00      	lsrs	r0, r0, #16
 8001bbc:	3910      	subs	r1, #16
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	4298      	cmp	r0, r3
 8001bc2:	d301      	bcc.n	8001bc8 <__clzsi2+0x18>
 8001bc4:	0a00      	lsrs	r0, r0, #8
 8001bc6:	3908      	subs	r1, #8
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	4298      	cmp	r0, r3
 8001bcc:	d301      	bcc.n	8001bd2 <__clzsi2+0x22>
 8001bce:	0900      	lsrs	r0, r0, #4
 8001bd0:	3904      	subs	r1, #4
 8001bd2:	a202      	add	r2, pc, #8	; (adr r2, 8001bdc <__clzsi2+0x2c>)
 8001bd4:	5c10      	ldrb	r0, [r2, r0]
 8001bd6:	1840      	adds	r0, r0, r1
 8001bd8:	4770      	bx	lr
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	02020304 	.word	0x02020304
 8001be0:	01010101 	.word	0x01010101
	...

08001bf0 <chVTDoResetI>:
void chVTDoResetI(virtual_timer_t *vtp) {
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 8001bf0:	68c3      	ldr	r3, [r0, #12]
void chVTDoResetI(virtual_timer_t *vtp) {
 8001bf2:	b510      	push	{r4, lr}
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d032      	beq.n	8001c5e <chVTDoResetI+0x6e>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!is_first_timer(vtlp, vtp)) {
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <chVTDoResetI+0x88>)
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	4282      	cmp	r2, r0
 8001bfe:	d00d      	beq.n	8001c1c <chVTDoResetI+0x2c>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001c00:	6841      	ldr	r1, [r0, #4]
 8001c02:	6802      	ldr	r2, [r0, #0]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (is_timer(vtlp, vtp->next))
 8001c04:	3310      	adds	r3, #16
    vtp->prev->next = vtp->next;
 8001c06:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 8001c08:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	60c1      	str	r1, [r0, #12]
    if (is_timer(vtlp, vtp->next))
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d003      	beq.n	8001c1a <chVTDoResetI+0x2a>
      vtp->next->delta += vtp->delta;
 8001c12:	6893      	ldr	r3, [r2, #8]
 8001c14:	6881      	ldr	r1, [r0, #8]
 8001c16:	185b      	adds	r3, r3, r1
 8001c18:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(vtlp->lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001c1a:	bd10      	pop	{r4, pc}
  vtlp->next->prev = (virtual_timer_t *)vtlp;
 8001c1c:	0018      	movs	r0, r3
  vtp->func = NULL;
 8001c1e:	2400      	movs	r4, #0
  vtlp->next = vtp->next;
 8001c20:	6811      	ldr	r1, [r2, #0]
  vtlp->next->prev = (virtual_timer_t *)vtlp;
 8001c22:	3010      	adds	r0, #16
  vtlp->next = vtp->next;
 8001c24:	6119      	str	r1, [r3, #16]
  vtlp->next->prev = (virtual_timer_t *)vtlp;
 8001c26:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8001c28:	60d4      	str	r4, [r2, #12]
  if (is_vtlist_empty(vtlp)) {
 8001c2a:	4281      	cmp	r1, r0
 8001c2c:	d01c      	beq.n	8001c68 <chVTDoResetI+0x78>
  vtlp->next->delta += vtp->delta;
 8001c2e:	6888      	ldr	r0, [r1, #8]
 8001c30:	6892      	ldr	r2, [r2, #8]
 8001c32:	1882      	adds	r2, r0, r2
 8001c34:	608a      	str	r2, [r1, #8]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001c36:	2180      	movs	r1, #128	; 0x80
 8001c38:	05c9      	lsls	r1, r1, #23
  nowdelta = chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 8001c3a:	69d8      	ldr	r0, [r3, #28]
 8001c3c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8001c3e:	1a0c      	subs	r4, r1, r0
  if (nowdelta >= vtlp->next->delta) {
 8001c40:	42a2      	cmp	r2, r4
 8001c42:	d9ea      	bls.n	8001c1a <chVTDoResetI+0x2a>
  delta = vtlp->next->delta - nowdelta;
 8001c44:	1a41      	subs	r1, r0, r1
 8001c46:	1889      	adds	r1, r1, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001c48:	2903      	cmp	r1, #3
 8001c4a:	d800      	bhi.n	8001c4e <chVTDoResetI+0x5e>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001c4c:	1d22      	adds	r2, r4, #4
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001c4e:	2480      	movs	r4, #128	; 0x80
 8001c50:	05e4      	lsls	r4, r4, #23
 8001c52:	68e1      	ldr	r1, [r4, #12]
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8001c54:	0789      	lsls	r1, r1, #30
 8001c56:	d50b      	bpl.n	8001c70 <chVTDoResetI+0x80>
  return systime + (systime_t)interval;
 8001c58:	1880      	adds	r0, r0, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001c5a:	6360      	str	r0, [r4, #52]	; 0x34

  st_lld_set_alarm(abstime);
}
 8001c5c:	e7dd      	b.n	8001c1a <chVTDoResetI+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5e:	b672      	cpsid	i

  /* Logging the event.*/
  __trace_halt(reason);

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <chVTDoResetI+0x88>)
 8001c62:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <chVTDoResetI+0x8c>)
 8001c64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Halt hook code, usually empty.*/
  CH_CFG_SYSTEM_HALT_HOOK(reason);

  /* Harmless infinite loop.*/
  while (true) {
 8001c66:	e7fe      	b.n	8001c66 <chVTDoResetI+0x76>
  STM32_ST_TIM->DIER = 0U;
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	05db      	lsls	r3, r3, #23
 8001c6c:	60dc      	str	r4, [r3, #12]
}
 8001c6e:	e7d4      	b.n	8001c1a <chVTDoResetI+0x2a>
 8001c70:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8001c72:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <chVTDoResetI+0x90>)
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8001c76:	e7fe      	b.n	8001c76 <chVTDoResetI+0x86>
 8001c78:	200017f8 	.word	0x200017f8
 8001c7c:	08006260 	.word	0x08006260
 8001c80:	080061e4 	.word	0x080061e4
	...

08001c90 <__idle_thread>:
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8001c90:	e7fe      	b.n	8001c90 <__idle_thread>
 8001c92:	46c0      	nop			; (mov r8, r8)
	...

08001ca0 <__sch_wakeup>:
 8001ca0:	b672      	cpsid	i
 */
static void __sch_wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8001ca2:	7d03      	ldrb	r3, [r0, #20]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d021      	beq.n	8001cec <__sch_wakeup+0x4c>
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d01a      	beq.n	8001ce2 <__sch_wakeup+0x42>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d011      	beq.n	8001cd4 <__sch_wakeup+0x34>
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4252      	negs	r2, r2
 8001cb4:	6182      	str	r2, [r0, #24]
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8001cb6:	2b0f      	cmp	r3, #15
 8001cb8:	d00e      	beq.n	8001cd8 <__sch_wakeup+0x38>
  tp->state = CH_STATE_READY;
 8001cba:	2300      	movs	r3, #0
  } while (cp->prio >= tp->prio);
 8001cbc:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
 8001cbe:	7503      	strb	r3, [r0, #20]
  cp = (thread_t *)&oip->rlist.queue;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <__sch_wakeup+0x54>)
    cp = cp->queue.next;
 8001cc2:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	428a      	cmp	r2, r1
 8001cc8:	d2fb      	bcs.n	8001cc2 <__sch_wakeup+0x22>
  tp->queue.prev             = cp->queue.prev;
 8001cca:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8001ccc:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8001cce:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8001cd0:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001cd2:	6058      	str	r0, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cd4:	b662      	cpsie	i

  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(currcore, tp);
  chSysUnlockFromISR();
}
 8001cd6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <__sch_wakeup+0x54>)
 8001cdc:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <__sch_wakeup+0x58>)
 8001cde:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8001ce0:	e7fe      	b.n	8001ce0 <__sch_wakeup+0x40>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8001ce2:	6841      	ldr	r1, [r0, #4]
 8001ce4:	6802      	ldr	r2, [r0, #0]
 8001ce6:	600a      	str	r2, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001ce8:	6051      	str	r1, [r2, #4]

  return tp;
 8001cea:	e7e1      	b.n	8001cb0 <__sch_wakeup+0x10>
    *tp->u.wttrp = NULL;
 8001cec:	2100      	movs	r1, #0
 8001cee:	6982      	ldr	r2, [r0, #24]
 8001cf0:	6011      	str	r1, [r2, #0]
    break;
 8001cf2:	e7dd      	b.n	8001cb0 <__sch_wakeup+0x10>
 8001cf4:	200017f8 	.word	0x200017f8
 8001cf8:	08006270 	.word	0x08006270
 8001cfc:	00000000 	.word	0x00000000

08001d00 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001d00:	6802      	ldr	r2, [r0, #0]
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d011      	beq.n	8001d2a <chThdResumeI+0x2a>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8001d06:	7d13      	ldrb	r3, [r2, #20]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d10f      	bne.n	8001d2c <chThdResumeI+0x2c>

    *trp = NULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	6003      	str	r3, [r0, #0]
  tp->state = CH_STATE_READY;
 8001d10:	7513      	strb	r3, [r2, #20]
  } while (cp->prio >= tp->prio);
 8001d12:	6890      	ldr	r0, [r2, #8]
  cp = (thread_t *)&oip->rlist.queue;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <chThdResumeI+0x38>)
    tp->u.rdymsg = msg;
 8001d16:	6191      	str	r1, [r2, #24]
    cp = cp->queue.next;
 8001d18:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001d1a:	6899      	ldr	r1, [r3, #8]
 8001d1c:	4281      	cmp	r1, r0
 8001d1e:	d2fb      	bcs.n	8001d18 <chThdResumeI+0x18>
  tp->queue.prev             = cp->queue.prev;
 8001d20:	6859      	ldr	r1, [r3, #4]
  tp->queue.next             = cp;
 8001d22:	6013      	str	r3, [r2, #0]
  tp->queue.prev             = cp->queue.prev;
 8001d24:	6051      	str	r1, [r2, #4]
  tp->queue.prev->queue.next = tp;
 8001d26:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8001d28:	605a      	str	r2, [r3, #4]
    (void) chSchReadyI(tp);
  }
}
 8001d2a:	4770      	bx	lr
 8001d2c:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8001d2e:	4b02      	ldr	r3, [pc, #8]	; (8001d38 <chThdResumeI+0x38>)
 8001d30:	4a02      	ldr	r2, [pc, #8]	; (8001d3c <chThdResumeI+0x3c>)
 8001d32:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8001d34:	e7fe      	b.n	8001d34 <chThdResumeI+0x34>
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	200017f8 	.word	0x200017f8
 8001d3c:	08006284 	.word	0x08006284

08001d40 <nvicEnableVector>:
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8001d40:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <nvicEnableVector+0x40>)
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8001d42:	b570      	push	{r4, r5, r6, lr}
 8001d44:	4694      	mov	ip, r2
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8001d46:	2203      	movs	r2, #3
 8001d48:	25ff      	movs	r5, #255	; 0xff
 8001d4a:	26c0      	movs	r6, #192	; 0xc0
 8001d4c:	4002      	ands	r2, r0
 8001d4e:	00d2      	lsls	r2, r2, #3
 8001d50:	4095      	lsls	r5, r2
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
 8001d52:	0189      	lsls	r1, r1, #6
 8001d54:	4091      	lsls	r1, r2
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8001d56:	0883      	lsrs	r3, r0, #2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4463      	add	r3, ip
 8001d5c:	00b6      	lsls	r6, r6, #2
 8001d5e:	599c      	ldr	r4, [r3, r6]
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d60:	221f      	movs	r2, #31
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8001d62:	43ac      	bics	r4, r5
 8001d64:	430c      	orrs	r4, r1
 8001d66:	519c      	str	r4, [r3, r6]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d68:	2301      	movs	r3, #1
 8001d6a:	4002      	ands	r2, r0
 8001d6c:	4093      	lsls	r3, r2
 8001d6e:	22c0      	movs	r2, #192	; 0xc0
 8001d70:	0940      	lsrs	r0, r0, #5
 8001d72:	0080      	lsls	r0, r0, #2
 8001d74:	4460      	add	r0, ip
 8001d76:	0052      	lsls	r2, r2, #1
 8001d78:	5083      	str	r3, [r0, r2]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d7a:	6003      	str	r3, [r0, #0]
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3)
  /* If the IRQ is enabled from secure mode then it is marked as secure
     interrupt in ITNS.*/
  NVIC->__ITNS[n >> 5U] &= ~(1U << (n & 0x1FU));
#endif
}
 8001d7c:	bd70      	pop	{r4, r5, r6, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	e000e100 	.word	0xe000e100
	...

08001d90 <pwmStart>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] config    pointer to a @p PWMConfig object
 *
 * @api
 */
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d92:	46d6      	mov	lr, sl
 8001d94:	464f      	mov	r7, r9
 8001d96:	4646      	mov	r6, r8
 8001d98:	0004      	movs	r4, r0
 8001d9a:	000d      	movs	r5, r1
 8001d9c:	b5c0      	push	{r6, r7, lr}

  osalDbgCheck((pwmp != NULL) && (config != NULL));
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d02f      	beq.n	8001e02 <pwmStart+0x72>
 8001da2:	b672      	cpsid	i

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 8001da4:	7803      	ldrb	r3, [r0, #0]
 8001da6:	1e5a      	subs	r2, r3, #1
 8001da8:	2a01      	cmp	r2, #1
 8001daa:	d825      	bhi.n	8001df8 <pwmStart+0x68>
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 8001dac:	684a      	ldr	r2, [r1, #4]
  pwmp->config = config;
 8001dae:	6041      	str	r1, [r0, #4]
  pwmp->period = config->period;
 8001db0:	4691      	mov	r9, r2
 8001db2:	6082      	str	r2, [r0, #8]
 */
void pwm_lld_start(PWMDriver *pwmp) {
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d100      	bne.n	8001dba <pwmStart+0x2a>
 8001db8:	e075      	b.n	8001ea6 <pwmStart+0x116>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8001dba:	2300      	movs	r3, #0
 8001dbc:	6986      	ldr	r6, [r0, #24]
 8001dbe:	6033      	str	r3, [r6, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8001dc0:	6373      	str	r3, [r6, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8001dc2:	63b3      	str	r3, [r6, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8001dc4:	63f3      	str	r3, [r6, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8001dc6:	6433      	str	r3, [r6, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8001dc8:	6273      	str	r3, [r6, #36]	; 0x24
 8001dca:	4b77      	ldr	r3, [pc, #476]	; (8001fa8 <pwmStart+0x218>)
 8001dcc:	469a      	mov	sl, r3
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001dce:	682b      	ldr	r3, [r5, #0]
 8001dd0:	6967      	ldr	r7, [r4, #20]
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	0038      	movs	r0, r7
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	f7ff fe24 	bl	8001a24 <__udivsi3>
  osalDbgAssert((psc <= 0xFFFF) &&
 8001ddc:	2280      	movs	r2, #128	; 0x80
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001dde:	1e43      	subs	r3, r0, #1
  osalDbgAssert((psc <= 0xFFFF) &&
 8001de0:	0252      	lsls	r2, r2, #9
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d203      	bcs.n	8001dee <pwmStart+0x5e>
 8001de6:	4642      	mov	r2, r8
 8001de8:	4350      	muls	r0, r2
 8001dea:	4287      	cmp	r7, r0
 8001dec:	d00e      	beq.n	8001e0c <pwmStart+0x7c>
 8001dee:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8001df0:	4b6e      	ldr	r3, [pc, #440]	; (8001fac <pwmStart+0x21c>)
 8001df2:	4a6f      	ldr	r2, [pc, #444]	; (8001fb0 <pwmStart+0x220>)
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8001df6:	e7fe      	b.n	8001df6 <pwmStart+0x66>
 8001df8:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8001dfa:	4b6c      	ldr	r3, [pc, #432]	; (8001fac <pwmStart+0x21c>)
 8001dfc:	4a6d      	ldr	r2, [pc, #436]	; (8001fb4 <pwmStart+0x224>)
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8001e00:	e7fe      	b.n	8001e00 <pwmStart+0x70>
 8001e02:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8001e04:	4b69      	ldr	r3, [pc, #420]	; (8001fac <pwmStart+0x21c>)
 8001e06:	4a6b      	ldr	r2, [pc, #428]	; (8001fb4 <pwmStart+0x224>)
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8001e0a:	e7fe      	b.n	8001e0a <pwmStart+0x7a>
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8001e0c:	62b3      	str	r3, [r6, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8001e0e:	464b      	mov	r3, r9
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001e10:	220f      	movs	r2, #15
  pwmp->tim->ARR  = pwmp->period - 1;
 8001e12:	3b01      	subs	r3, #1
 8001e14:	62f3      	str	r3, [r6, #44]	; 0x2c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001e16:	68ef      	ldr	r7, [r5, #12]
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001e18:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001e1a:	403a      	ands	r2, r7
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001e1c:	6073      	str	r3, [r6, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001e1e:	2a01      	cmp	r2, #1
 8001e20:	d03d      	beq.n	8001e9e <pwmStart+0x10e>
 8001e22:	2300      	movs	r3, #0
 8001e24:	2a02      	cmp	r2, #2
 8001e26:	d03b      	beq.n	8001ea0 <pwmStart+0x110>
    ccer |= STM32_TIM_CCER_CC1E;
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8001e28:	220f      	movs	r2, #15
 8001e2a:	6968      	ldr	r0, [r5, #20]
 8001e2c:	4002      	ands	r2, r0
 8001e2e:	2a01      	cmp	r2, #1
 8001e30:	d055      	beq.n	8001ede <pwmStart+0x14e>
 8001e32:	2a02      	cmp	r2, #2
 8001e34:	d051      	beq.n	8001eda <pwmStart+0x14a>
    ccer |= STM32_TIM_CCER_CC2E;
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8001e36:	69ea      	ldr	r2, [r5, #28]
 8001e38:	4690      	mov	r8, r2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	4641      	mov	r1, r8
 8001e3e:	400a      	ands	r2, r1
 8001e40:	2a01      	cmp	r2, #1
 8001e42:	d046      	beq.n	8001ed2 <pwmStart+0x142>
 8001e44:	2a02      	cmp	r2, #2
 8001e46:	d041      	beq.n	8001ecc <pwmStart+0x13c>
    ccer |= STM32_TIM_CCER_CC3E;
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8001e48:	210f      	movs	r1, #15
 8001e4a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001e4c:	4011      	ands	r1, r2
 8001e4e:	2901      	cmp	r1, #1
 8001e50:	d038      	beq.n	8001ec4 <pwmStart+0x134>
 8001e52:	2902      	cmp	r1, #2
 8001e54:	d033      	beq.n	8001ebe <pwmStart+0x12e>
  default:
    ;
  }
#if STM32_PWM_USE_ADVANCED
#if STM32_PWM_USE_TIM1 && !STM32_PWM_USE_TIM8 && !STM32_PWM_USE_TIM20
  if (&PWMD1 == pwmp) {
 8001e56:	4554      	cmp	r4, sl
 8001e58:	d048      	beq.n	8001eec <pwmStart+0x15c>
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 8001e5a:	6233      	str	r3, [r6, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001e5c:	2301      	movs	r3, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001e5e:	21ff      	movs	r1, #255	; 0xff
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001e60:	2200      	movs	r2, #0
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001e62:	6173      	str	r3, [r6, #20]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001e64:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001e66:	6132      	str	r2, [r6, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001e68:	438b      	bics	r3, r1
 8001e6a:	60f3      	str	r3, [r6, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8 || STM32_PWM_USE_TIM20
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	430b      	orrs	r3, r1
 8001e74:	6473      	str	r3, [r6, #68]	; 0x44
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8001e76:	2385      	movs	r3, #133	; 0x85
 8001e78:	6033      	str	r3, [r6, #0]
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 8001e7a:	3b83      	subs	r3, #131	; 0x83
 8001e7c:	7023      	strb	r3, [r4, #0]

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((currcore->rlist.queue.next == (thread_t *)&currcore->rlist.queue) ||
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <pwmStart+0x21c>)
  pwmp->enabled = 0;
 8001e80:	60e2      	str	r2, [r4, #12]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d004      	beq.n	8001e92 <pwmStart+0x102>
 8001e88:	68d9      	ldr	r1, [r3, #12]
 8001e8a:	6892      	ldr	r2, [r2, #8]
 8001e8c:	6889      	ldr	r1, [r1, #8]
 8001e8e:	4291      	cmp	r1, r2
 8001e90:	d328      	bcc.n	8001ee4 <pwmStart+0x154>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e92:	b662      	cpsie	i
  osalSysUnlock();
}
 8001e94:	bce0      	pop	{r5, r6, r7}
 8001e96:	46ba      	mov	sl, r7
 8001e98:	46b1      	mov	r9, r6
 8001e9a:	46a8      	mov	r8, r5
 8001e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001e9e:	2200      	movs	r2, #0
    ccer |= STM32_TIM_CCER_CC1E;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	e7c0      	b.n	8001e28 <pwmStart+0x98>
    if (&PWMD1 == pwmp) {
 8001ea6:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <pwmStart+0x218>)
 8001ea8:	469a      	mov	sl, r3
 8001eaa:	4298      	cmp	r0, r3
 8001eac:	d061      	beq.n	8001f72 <pwmStart+0x1e2>
    if (&PWMD3 == pwmp) {
 8001eae:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <pwmStart+0x228>)
 8001eb0:	4298      	cmp	r0, r3
 8001eb2:	d04a      	beq.n	8001f4a <pwmStart+0x1ba>
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8001eb4:	69a6      	ldr	r6, [r4, #24]
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <pwmStart+0x22c>)
 8001eb8:	61b3      	str	r3, [r6, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8001eba:	61f3      	str	r3, [r6, #28]
 8001ebc:	e787      	b.n	8001dce <pwmStart+0x3e>
    ccer |= STM32_TIM_CCER_CC4P;
 8001ebe:	2180      	movs	r1, #128	; 0x80
 8001ec0:	0189      	lsls	r1, r1, #6
 8001ec2:	430b      	orrs	r3, r1
    ccer |= STM32_TIM_CCER_CC4E;
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	0149      	lsls	r1, r1, #5
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	e7c4      	b.n	8001e56 <pwmStart+0xc6>
    ccer |= STM32_TIM_CCER_CC3P;
 8001ecc:	32ff      	adds	r2, #255	; 0xff
 8001ece:	32ff      	adds	r2, #255	; 0xff
 8001ed0:	4313      	orrs	r3, r2
    ccer |= STM32_TIM_CCER_CC3E;
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	0052      	lsls	r2, r2, #1
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	e7b6      	b.n	8001e48 <pwmStart+0xb8>
    ccer |= STM32_TIM_CCER_CC2P;
 8001eda:	321e      	adds	r2, #30
 8001edc:	4313      	orrs	r3, r2
    ccer |= STM32_TIM_CCER_CC2E;
 8001ede:	2210      	movs	r2, #16
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	e7a8      	b.n	8001e36 <pwmStart+0xa6>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee4:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8001ee6:	4a36      	ldr	r2, [pc, #216]	; (8001fc0 <pwmStart+0x230>)
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8001eea:	e7fe      	b.n	8001eea <pwmStart+0x15a>
    switch (pwmp->config->channels[0].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 8001eec:	21f0      	movs	r1, #240	; 0xf0
 8001eee:	400f      	ands	r7, r1
 8001ef0:	2f10      	cmp	r7, #16
 8001ef2:	d003      	beq.n	8001efc <pwmStart+0x16c>
 8001ef4:	2f20      	cmp	r7, #32
 8001ef6:	d103      	bne.n	8001f00 <pwmStart+0x170>
      ccer |= STM32_TIM_CCER_CC1NP;
 8001ef8:	3f18      	subs	r7, #24
 8001efa:	433b      	orrs	r3, r7
      ccer |= STM32_TIM_CCER_CC1NE;
 8001efc:	2704      	movs	r7, #4
 8001efe:	433b      	orrs	r3, r7
    switch (pwmp->config->channels[1].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 8001f00:	27f0      	movs	r7, #240	; 0xf0
 8001f02:	4038      	ands	r0, r7
 8001f04:	2810      	cmp	r0, #16
 8001f06:	d003      	beq.n	8001f10 <pwmStart+0x180>
 8001f08:	2820      	cmp	r0, #32
 8001f0a:	d103      	bne.n	8001f14 <pwmStart+0x184>
      ccer |= STM32_TIM_CCER_CC2NP;
 8001f0c:	3060      	adds	r0, #96	; 0x60
 8001f0e:	4303      	orrs	r3, r0
      ccer |= STM32_TIM_CCER_CC2NE;
 8001f10:	2040      	movs	r0, #64	; 0x40
 8001f12:	4303      	orrs	r3, r0
    switch (pwmp->config->channels[2].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 8001f14:	20f0      	movs	r0, #240	; 0xf0
 8001f16:	4641      	mov	r1, r8
 8001f18:	4001      	ands	r1, r0
 8001f1a:	2910      	cmp	r1, #16
 8001f1c:	d004      	beq.n	8001f28 <pwmStart+0x198>
 8001f1e:	2920      	cmp	r1, #32
 8001f20:	d105      	bne.n	8001f2e <pwmStart+0x19e>
      ccer |= STM32_TIM_CCER_CC3NP;
 8001f22:	2180      	movs	r1, #128	; 0x80
 8001f24:	0109      	lsls	r1, r1, #4
 8001f26:	430b      	orrs	r3, r1
      ccer |= STM32_TIM_CCER_CC3NE;
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	00c9      	lsls	r1, r1, #3
 8001f2c:	430b      	orrs	r3, r1
    switch (pwmp->config->channels[3].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 8001f2e:	21f0      	movs	r1, #240	; 0xf0
 8001f30:	400a      	ands	r2, r1
 8001f32:	2a10      	cmp	r2, #16
 8001f34:	d005      	beq.n	8001f42 <pwmStart+0x1b2>
 8001f36:	2a20      	cmp	r2, #32
 8001f38:	d000      	beq.n	8001f3c <pwmStart+0x1ac>
 8001f3a:	e78e      	b.n	8001e5a <pwmStart+0xca>
      ccer |= STM32_TIM_CCER_CC4NP;
 8001f3c:	2280      	movs	r2, #128	; 0x80
 8001f3e:	0212      	lsls	r2, r2, #8
 8001f40:	4313      	orrs	r3, r2
      ccer |= STM32_TIM_CCER_CC4NE;
 8001f42:	2280      	movs	r2, #128	; 0x80
 8001f44:	01d2      	lsls	r2, r2, #7
 8001f46:	4313      	orrs	r3, r2
 8001f48:	e787      	b.n	8001e5a <pwmStart+0xca>
      rccEnableTIM3(true);
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <pwmStart+0x234>)
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
 8001f4e:	2010      	movs	r0, #16
      rccEnableTIM3(true);
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	61da      	str	r2, [r3, #28]
 8001f56:	69da      	ldr	r2, [r3, #28]
      rccResetTIM3();
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	611a      	str	r2, [r3, #16]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	438a      	bics	r2, r1
 8001f62:	611a      	str	r2, [r3, #16]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
 8001f64:	3101      	adds	r1, #1
      rccResetTIM3();
 8001f66:	691b      	ldr	r3, [r3, #16]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
 8001f68:	f7ff feea 	bl	8001d40 <nvicEnableVector>
      pwmp->clock = STM32_TIMCLK1;
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <pwmStart+0x238>)
 8001f6e:	6163      	str	r3, [r4, #20]
 8001f70:	e7a0      	b.n	8001eb4 <pwmStart+0x124>
      rccEnableTIM1(true);
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <pwmStart+0x234>)
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	6999      	ldr	r1, [r3, #24]
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
 8001f7a:	200d      	movs	r0, #13
      rccEnableTIM1(true);
 8001f7c:	4311      	orrs	r1, r2
 8001f7e:	6199      	str	r1, [r3, #24]
 8001f80:	6999      	ldr	r1, [r3, #24]
      rccResetTIM1();
 8001f82:	68d9      	ldr	r1, [r3, #12]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4910      	ldr	r1, [pc, #64]	; (8001fcc <pwmStart+0x23c>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
 8001f90:	2103      	movs	r1, #3
      rccResetTIM1();
 8001f92:	68db      	ldr	r3, [r3, #12]
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
 8001f94:	f7ff fed4 	bl	8001d40 <nvicEnableVector>
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
 8001f98:	2103      	movs	r1, #3
 8001f9a:	200e      	movs	r0, #14
 8001f9c:	f7ff fed0 	bl	8001d40 <nvicEnableVector>
      pwmp->clock = STM32_TIMCLK2;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <pwmStart+0x238>)
 8001fa2:	6163      	str	r3, [r4, #20]
    if (&PWMD3 == pwmp) {
 8001fa4:	e786      	b.n	8001eb4 <pwmStart+0x124>
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	20000ab4 	.word	0x20000ab4
 8001fac:	200017f8 	.word	0x200017f8
 8001fb0:	080061d4 	.word	0x080061d4
 8001fb4:	08006338 	.word	0x08006338
 8001fb8:	20000ad0 	.word	0x20000ad0
 8001fbc:	00006868 	.word	0x00006868
 8001fc0:	0800632c 	.word	0x0800632c
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	02dc6c00 	.word	0x02dc6c00
 8001fcc:	fffff7ff 	.word	0xfffff7ff

08001fd0 <dmaServeInterrupt>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
 8001fd0:	b570      	push	{r4, r5, r6, lr}
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001fd2:	6804      	ldr	r4, [r0, #0]
 8001fd4:	7b45      	ldrb	r5, [r0, #13]
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	210e      	movs	r1, #14
 8001fda:	40eb      	lsrs	r3, r5
 8001fdc:	4019      	ands	r1, r3
  if (flags & dmastp->channel->CCR) {
 8001fde:	6843      	ldr	r3, [r0, #4]
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 8001fe0:	7b82      	ldrb	r2, [r0, #14]
  if (flags & dmastp->channel->CCR) {
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4219      	tst	r1, r3
 8001fe6:	d00b      	beq.n	8002000 <dmaServeInterrupt+0x30>
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001fe8:	000b      	movs	r3, r1
 8001fea:	40ab      	lsls	r3, r5
    if (dma.streams[selfindex].func) {
 8001fec:	3201      	adds	r2, #1
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001fee:	6063      	str	r3, [r4, #4]
    if (dma.streams[selfindex].func) {
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <dmaServeInterrupt+0x34>)
 8001ff2:	00d2      	lsls	r2, r2, #3
 8001ff4:	58d4      	ldr	r4, [r2, r3]
 8001ff6:	2c00      	cmp	r4, #0
 8001ff8:	d002      	beq.n	8002000 <dmaServeInterrupt+0x30>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001ffa:	189b      	adds	r3, r3, r2
 8001ffc:	6858      	ldr	r0, [r3, #4]
 8001ffe:	47a0      	blx	r4
    }
  }
}
 8002000:	bd70      	pop	{r4, r5, r6, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	200018f0 	.word	0x200018f0
	...

08002010 <dac_lld_put_channel>:
 */
void dac_lld_put_channel(DACDriver *dacp,
                         dacchannel_t channel,
                         dacsample_t sample) {

  switch (dacp->config->datamode) {
 8002010:	6903      	ldr	r3, [r0, #16]
 8002012:	789b      	ldrb	r3, [r3, #2]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d008      	beq.n	800202a <dac_lld_put_channel+0x1a>
 8002018:	2b02      	cmp	r3, #2
 800201a:	d01a      	beq.n	8002052 <dac_lld_put_channel+0x42>
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <dac_lld_put_channel+0x2e>
 8002020:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <dac_lld_put_channel+0x70>)
 8002024:	4a17      	ldr	r2, [pc, #92]	; (8002084 <dac_lld_put_channel+0x74>)
 8002026:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8002028:	e7fe      	b.n	8002028 <dac_lld_put_channel+0x18>
    break;
  case DAC_DHRM_12BIT_LEFT:
#if STM32_DAC_DUAL_MODE
  case DAC_DHRM_12BIT_LEFT_DUAL:
#endif
    if (channel == 0U) {
 800202a:	2900      	cmp	r1, #0
 800202c:	d123      	bne.n	8002076 <dac_lld_put_channel+0x66>
#if STM32_DAC_DUAL_MODE
      dacp->params->dac->DHR12L1 = (uint32_t)sample;
#else
      *(&dacp->params->dac->DHR12L1 + dacp->params->dataoffset) = (uint32_t)sample;
 800202e:	69c1      	ldr	r1, [r0, #28]
 8002030:	680b      	ldr	r3, [r1, #0]
 8002032:	6849      	ldr	r1, [r1, #4]
 8002034:	330c      	adds	r3, #12
 8002036:	0089      	lsls	r1, r1, #2
 8002038:	185b      	adds	r3, r3, r1
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e00e      	b.n	800205c <dac_lld_put_channel+0x4c>
    if (channel == 0U) {
 800203e:	2900      	cmp	r1, #0
 8002040:	d115      	bne.n	800206e <dac_lld_put_channel+0x5e>
      *(&dacp->params->dac->DHR12R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8002042:	69c1      	ldr	r1, [r0, #28]
 8002044:	680b      	ldr	r3, [r1, #0]
 8002046:	6849      	ldr	r1, [r1, #4]
 8002048:	3308      	adds	r3, #8
 800204a:	0089      	lsls	r1, r1, #2
 800204c:	185b      	adds	r3, r3, r1
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e004      	b.n	800205c <dac_lld_put_channel+0x4c>
    break;
  case DAC_DHRM_8BIT_RIGHT:
#if STM32_DAC_DUAL_MODE
  case DAC_DHRM_8BIT_RIGHT_DUAL:
#endif
    if (channel == 0U) {
 8002052:	2900      	cmp	r1, #0
 8002054:	d003      	beq.n	800205e <dac_lld_put_channel+0x4e>
#endif
    }
#if (STM32_HAS_DAC1_CH2 || STM32_HAS_DAC2_CH2 ||                            \
     STM32_HAS_DAC3_CH2 || STM32_HAS_DAC4_CH2)
    else {
      dacp->params->dac->DHR8R2 = (uint32_t)sample;
 8002056:	69c3      	ldr	r3, [r0, #28]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61da      	str	r2, [r3, #28]
    break;
  default:
    osalDbgAssert(false, "unexpected DAC mode");
    break;
  }
}
 800205c:	4770      	bx	lr
      *(&dacp->params->dac->DHR8R1 + dacp->params->dataoffset) = (uint32_t)sample;
 800205e:	69c1      	ldr	r1, [r0, #28]
 8002060:	680b      	ldr	r3, [r1, #0]
 8002062:	6849      	ldr	r1, [r1, #4]
 8002064:	3310      	adds	r3, #16
 8002066:	0089      	lsls	r1, r1, #2
 8002068:	185b      	adds	r3, r3, r1
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	e7f6      	b.n	800205c <dac_lld_put_channel+0x4c>
      dacp->params->dac->DHR12R2 = (uint32_t)sample;
 800206e:	69c3      	ldr	r3, [r0, #28]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	615a      	str	r2, [r3, #20]
 8002074:	e7f2      	b.n	800205c <dac_lld_put_channel+0x4c>
      dacp->params->dac->DHR12L2 = (uint32_t)sample;
 8002076:	69c3      	ldr	r3, [r0, #28]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	619a      	str	r2, [r3, #24]
 800207c:	e7ee      	b.n	800205c <dac_lld_put_channel+0x4c>
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	200017f8 	.word	0x200017f8
 8002084:	08006230 	.word	0x08006230
	...

08002090 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8002090:	6982      	ldr	r2, [r0, #24]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8002092:	b570      	push	{r4, r5, r6, lr}
  sr  = pwmp->tim->SR;
 8002094:	6914      	ldr	r4, [r2, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8002096:	68d3      	ldr	r3, [r2, #12]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8002098:	0005      	movs	r5, r0
 800209a:	401c      	ands	r4, r3
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800209c:	23ff      	movs	r3, #255	; 0xff
 800209e:	4023      	ands	r3, r4
  pwmp->tim->SR = ~sr;
 80020a0:	43db      	mvns	r3, r3
 80020a2:	6113      	str	r3, [r2, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80020a4:	07a3      	lsls	r3, r4, #30
 80020a6:	d504      	bpl.n	80020b2 <pwm_lld_serve_interrupt+0x22>
      (pwmp->config->channels[0].callback != NULL))
 80020a8:	6843      	ldr	r3, [r0, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d000      	beq.n	80020b2 <pwm_lld_serve_interrupt+0x22>
    pwmp->config->channels[0].callback(pwmp);
 80020b0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80020b2:	0763      	lsls	r3, r4, #29
 80020b4:	d505      	bpl.n	80020c2 <pwm_lld_serve_interrupt+0x32>
      (pwmp->config->channels[1].callback != NULL))
 80020b6:	686b      	ldr	r3, [r5, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <pwm_lld_serve_interrupt+0x32>
    pwmp->config->channels[1].callback(pwmp);
 80020be:	0028      	movs	r0, r5
 80020c0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80020c2:	0723      	lsls	r3, r4, #28
 80020c4:	d505      	bpl.n	80020d2 <pwm_lld_serve_interrupt+0x42>
      (pwmp->config->channels[2].callback != NULL))
 80020c6:	686b      	ldr	r3, [r5, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <pwm_lld_serve_interrupt+0x42>
    pwmp->config->channels[2].callback(pwmp);
 80020ce:	0028      	movs	r0, r5
 80020d0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80020d2:	06e3      	lsls	r3, r4, #27
 80020d4:	d505      	bpl.n	80020e2 <pwm_lld_serve_interrupt+0x52>
      (pwmp->config->channels[3].callback != NULL))
 80020d6:	686b      	ldr	r3, [r5, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <pwm_lld_serve_interrupt+0x52>
    pwmp->config->channels[3].callback(pwmp);
 80020de:	0028      	movs	r0, r5
 80020e0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80020e2:	07e4      	lsls	r4, r4, #31
 80020e4:	d505      	bpl.n	80020f2 <pwm_lld_serve_interrupt+0x62>
 80020e6:	686b      	ldr	r3, [r5, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <pwm_lld_serve_interrupt+0x62>
    pwmp->config->callback(pwmp);
 80020ee:	0028      	movs	r0, r5
 80020f0:	4798      	blx	r3
}
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
	...

08002100 <_ZN3Pid9GetOutputEff>:
#include "pid.h"

float Pid::GetOutput(float setpoint, float observation)
{
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002102:	46ce      	mov	lr, r9
 8002104:	4647      	mov	r7, r8
 8002106:	0004      	movs	r4, r0
 8002108:	b580      	push	{r7, lr}
 800210a:	1c08      	adds	r0, r1, #0
 800210c:	1c11      	adds	r1, r2, #0
    float error = setpoint - observation;
 800210e:	f003 fd09 	bl	8005b24 <__aeabi_fsub>

    // Integrate error
    m_integrator += error * m_period * m_ki;
 8002112:	6825      	ldr	r5, [r4, #0]
    float error = setpoint - observation;
 8002114:	1c07      	adds	r7, r0, #0
    m_integrator += error * m_period * m_ki;
 8002116:	68a1      	ldr	r1, [r4, #8]
 8002118:	1c28      	adds	r0, r5, #0
 800211a:	f003 fbb5 	bl	8005888 <__aeabi_fmul>
 800211e:	1c39      	adds	r1, r7, #0
 8002120:	f003 fbb2 	bl	8005888 <__aeabi_fmul>
 8002124:	69a1      	ldr	r1, [r4, #24]
 8002126:	f003 f845 	bl	80051b4 <__aeabi_fadd>

    // Differentiate error
    float errorDelta = error - m_lastError;
 800212a:	6961      	ldr	r1, [r4, #20]
    m_integrator += error * m_period * m_ki;
 800212c:	1c06      	adds	r6, r0, #0
    float errorDelta = error - m_lastError;
 800212e:	1c38      	adds	r0, r7, #0
 8002130:	f003 fcf8 	bl	8005b24 <__aeabi_fsub>
    float dEdt = errorDelta / m_period;
 8002134:	1c29      	adds	r1, r5, #0
 8002136:	f003 f9dd 	bl	80054f4 <__aeabi_fdiv>
    m_lastError = error;

    // Clamp to +- 1
    if (m_integrator > m_clamp) m_integrator = m_clamp;
    if (m_integrator < -m_clamp) m_integrator = -m_clamp;
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	061b      	lsls	r3, r3, #24
 800213e:	469c      	mov	ip, r3
    if (m_integrator > m_clamp) m_integrator = m_clamp;
 8002140:	6925      	ldr	r5, [r4, #16]
    float dEdt = errorDelta / m_period;
 8002142:	4680      	mov	r8, r0
    if (m_integrator < -m_clamp) m_integrator = -m_clamp;
 8002144:	44ac      	add	ip, r5
    m_lastError = error;
 8002146:	6167      	str	r7, [r4, #20]
    if (m_integrator < -m_clamp) m_integrator = -m_clamp;
 8002148:	1c29      	adds	r1, r5, #0
 800214a:	1c30      	adds	r0, r6, #0
 800214c:	46e1      	mov	r9, ip
 800214e:	f7ff fd11 	bl	8001b74 <__aeabi_fcmple>
 8002152:	2800      	cmp	r0, #0
 8002154:	d100      	bne.n	8002158 <_ZN3Pid9GetOutputEff+0x58>
 8002156:	1c2e      	adds	r6, r5, #0
 8002158:	4648      	mov	r0, r9
 800215a:	1c31      	adds	r1, r6, #0
 800215c:	464d      	mov	r5, r9
 800215e:	f7ff fd1d 	bl	8001b9c <__aeabi_fcmpge>
 8002162:	2800      	cmp	r0, #0
 8002164:	d100      	bne.n	8002168 <_ZN3Pid9GetOutputEff+0x68>
 8002166:	1c35      	adds	r5, r6, #0

    // Multiply by gains and sum
    return m_kp * error + m_integrator + m_kd * dEdt;
 8002168:	6861      	ldr	r1, [r4, #4]
 800216a:	61a5      	str	r5, [r4, #24]
 800216c:	1c38      	adds	r0, r7, #0
 800216e:	f003 fb8b 	bl	8005888 <__aeabi_fmul>
 8002172:	1c06      	adds	r6, r0, #0
 8002174:	68e1      	ldr	r1, [r4, #12]
 8002176:	4640      	mov	r0, r8
 8002178:	f003 fb86 	bl	8005888 <__aeabi_fmul>
 800217c:	1c01      	adds	r1, r0, #0
 800217e:	1c30      	adds	r0, r6, #0
 8002180:	f003 f818 	bl	80051b4 <__aeabi_fadd>
 8002184:	1c29      	adds	r1, r5, #0
 8002186:	f003 f815 	bl	80051b4 <__aeabi_fadd>
}
 800218a:	bcc0      	pop	{r6, r7}
 800218c:	46b9      	mov	r9, r7
 800218e:	46b0      	mov	r8, r6
 8002190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
	...

080021a0 <_ZNK7Sampler11GetNernstDcEv>:
    m_startupTimer.reset();
}

float Sampler::GetNernstDc() const
{
    return nernstDc;
 80021a0:	6900      	ldr	r0, [r0, #16]
}
 80021a2:	4770      	bx	lr
	...

080021b0 <_ZNK7Sampler11GetNernstAcEv>:

float Sampler::GetNernstAc() const
{
    return nernstAc;
 80021b0:	68c0      	ldr	r0, [r0, #12]
}
 80021b2:	4770      	bx	lr
	...

080021c0 <_ZNK7Sampler21GetPumpNominalCurrentEv>:

float Sampler::GetPumpNominalCurrent() const
{
 80021c0:	b510      	push	{r4, lr}
    // Gain is 10x, then a 61.9 ohm resistor
    // Effective resistance with the gain is 619 ohms
    // 1000 is to convert to milliamperes
    constexpr float ratio = -1000 / (PUMP_CURRENT_SENSE_GAIN * LSU_SENSE_R);
    return pumpCurrentSenseVoltage * ratio;
 80021c2:	4902      	ldr	r1, [pc, #8]	; (80021cc <_ZNK7Sampler21GetPumpNominalCurrentEv+0xc>)
 80021c4:	6940      	ldr	r0, [r0, #20]
 80021c6:	f003 fb5f 	bl	8005888 <__aeabi_fmul>
}
 80021ca:	bd10      	pop	{r4, pc}
 80021cc:	bfcec8ff 	.word	0xbfcec8ff

080021d0 <_ZNK7Sampler25GetInternalBatteryVoltageEv>:

float Sampler::GetInternalBatteryVoltage() const
{
 80021d0:	b570      	push	{r4, r5, r6, lr}
 80021d2:	0006      	movs	r6, r0
 80021d4:	b672      	cpsid	i
  return (systime_t)STM32_ST_TIM->CNT;
 80021d6:	2380      	movs	r3, #128	; 0x80
  last = ch.vtlist.laststamp;

  /* Interval between the last time stamp and current time used for a new
     time stamp. Note that this fails if the interval is larger than a
     systime_t type.*/
  stamp = last + (systimestamp_t)chTimeDiffX((sysinterval_t)last, now);
 80021d8:	2500      	movs	r5, #0
 80021da:	05db      	lsls	r3, r3, #23
 80021dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  last = ch.vtlist.laststamp;
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x78>)
 80021e0:	6a18      	ldr	r0, [r3, #32]
 80021e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
  stamp = last + (systimestamp_t)chTimeDiffX((sysinterval_t)last, now);
 80021e4:	1a14      	subs	r4, r2, r0
 80021e6:	1900      	adds	r0, r0, r4
 80021e8:	4169      	adcs	r1, r5

  chDbgAssert(ch.vtlist.laststamp <= stamp, "wrapped");
 80021ea:	6a1c      	ldr	r4, [r3, #32]
 80021ec:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80021ee:	428d      	cmp	r5, r1
 80021f0:	d81d      	bhi.n	800222e <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x5e>
 80021f2:	d01a      	beq.n	800222a <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x5a>
 80021f4:	681a      	ldr	r2, [r3, #0]

  /* Storing the new stamp.*/
  ch.vtlist.laststamp = stamp;
 80021f6:	6218      	str	r0, [r3, #32]
 80021f8:	6259      	str	r1, [r3, #36]	; 0x24
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d004      	beq.n	8002208 <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x38>
 80021fe:	68dc      	ldr	r4, [r3, #12]
 8002200:	6892      	ldr	r2, [r2, #8]
 8002202:	68a4      	ldr	r4, [r4, #8]
 8002204:	4294      	cmp	r4, r2
 8002206:	d31a      	bcc.n	800223e <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x6e>
  __ASM volatile ("cpsie i" : : : "memory");
 8002208:	b662      	cpsie	i
}

static const float usPerTick = 1000000.0 / CH_CFG_ST_FREQUENCY;

bool Timer::hasElapsedUs(float microseconds) const {
	auto delta = getTimestamp() - m_lastReset;
 800220a:	69b2      	ldr	r2, [r6, #24]
 800220c:	69f3      	ldr	r3, [r6, #28]
 800220e:	1a80      	subs	r0, r0, r2
 8002210:	4199      	sbcs	r1, r3

	// If larger than 32 bits, timer has certainly expired
	if (delta >= UINT32_MAX) {
 8002212:	2900      	cmp	r1, #0
 8002214:	dc11      	bgt.n	800223a <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x6a>
 8002216:	d00e      	beq.n	8002236 <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x66>
		return true;
	}

	auto delta32 = (uint32_t)delta;

	return delta32 > (microseconds / usPerTick);
 8002218:	f003 fe96 	bl	8005f48 <__aeabi_ui2f>
    // After 5 seconds, pretend that we get battery voltage.
    // This makes the controller usable without CAN control
    // enabling the heater - CAN message will be able to keep
    // it disabled, but if no message ever arrives, this will
    // start heating.
    return m_startupTimer.hasElapsedSec(5) ? 13 : 0;
 800221c:	490b      	ldr	r1, [pc, #44]	; (800224c <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x7c>)
 800221e:	f7ff fcb3 	bl	8001b88 <__aeabi_fcmpgt>
 8002222:	2800      	cmp	r0, #0
 8002224:	d109      	bne.n	800223a <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x6a>
 8002226:	2000      	movs	r0, #0
#endif
}
 8002228:	bd70      	pop	{r4, r5, r6, pc}
  chDbgAssert(ch.vtlist.laststamp <= stamp, "wrapped");
 800222a:	4284      	cmp	r4, r0
 800222c:	d9e2      	bls.n	80021f4 <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x24>
  __ASM volatile ("cpsid i" : : : "memory");
 800222e:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8002230:	4a07      	ldr	r2, [pc, #28]	; (8002250 <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x80>)
 8002232:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8002234:	e7fe      	b.n	8002234 <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x64>
	if (delta >= UINT32_MAX) {
 8002236:	1c83      	adds	r3, r0, #2
 8002238:	d9ee      	bls.n	8002218 <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x48>
    return m_startupTimer.hasElapsedSec(5) ? 13 : 0;
 800223a:	4806      	ldr	r0, [pc, #24]	; (8002254 <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x84>)
 800223c:	e7f4      	b.n	8002228 <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x58>
 800223e:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8002240:	4a05      	ldr	r2, [pc, #20]	; (8002258 <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x88>)
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8002244:	e7fe      	b.n	8002244 <_ZNK7Sampler25GetInternalBatteryVoltageEv+0x74>
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	200017f8 	.word	0x200017f8
 800224c:	47435000 	.word	0x47435000
 8002250:	08006188 	.word	0x08006188
 8002254:	41500000 	.word	0x41500000
 8002258:	08005fd8 	.word	0x08005fd8
 800225c:	00000000 	.word	0x00000000

08002260 <_ZNK7Sampler27GetSensorInternalResistanceEv>:
}

float Sampler::GetSensorInternalResistance() const
{
    // Sensor is the lowside of a divider, top side is GetESRSupplyR(), and 3.3v AC pk-pk is injected
    float totalEsr = GetESRSupplyR() / (VCC_VOLTS / GetNernstAc() - 1);
 8002260:	6803      	ldr	r3, [r0, #0]
 8002262:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <_ZNK7Sampler27GetSensorInternalResistanceEv+0x34>)
 8002264:	685b      	ldr	r3, [r3, #4]
{
 8002266:	b510      	push	{r4, lr}
 8002268:	4293      	cmp	r3, r2
 800226a:	d10f      	bne.n	800228c <_ZNK7Sampler27GetSensorInternalResistanceEv+0x2c>
    return nernstAc;
 800226c:	68c1      	ldr	r1, [r0, #12]
    float totalEsr = GetESRSupplyR() / (VCC_VOLTS / GetNernstAc() - 1);
 800226e:	480a      	ldr	r0, [pc, #40]	; (8002298 <_ZNK7Sampler27GetSensorInternalResistanceEv+0x38>)
 8002270:	f003 f940 	bl	80054f4 <__aeabi_fdiv>
 8002274:	21fe      	movs	r1, #254	; 0xfe
 8002276:	0589      	lsls	r1, r1, #22
 8002278:	f003 fc54 	bl	8005b24 <__aeabi_fsub>
 800227c:	1c01      	adds	r1, r0, #0
 800227e:	4807      	ldr	r0, [pc, #28]	; (800229c <_ZNK7Sampler27GetSensorInternalResistanceEv+0x3c>)
 8002280:	f003 f938 	bl	80054f4 <__aeabi_fdiv>

    // There is a resistor between the opamp and Vm sensor pin.  Remove the effect of that
    // resistor so that the remainder is only the ESR of the sensor itself
    return totalEsr - VM_RESISTOR_VALUE;
 8002284:	4906      	ldr	r1, [pc, #24]	; (80022a0 <_ZNK7Sampler27GetSensorInternalResistanceEv+0x40>)
 8002286:	f003 fc4d 	bl	8005b24 <__aeabi_fsub>
}
 800228a:	bd10      	pop	{r4, pc}
    float totalEsr = GetESRSupplyR() / (VCC_VOLTS / GetNernstAc() - 1);
 800228c:	4798      	blx	r3
 800228e:	1c01      	adds	r1, r0, #0
 8002290:	e7ed      	b.n	800226e <_ZNK7Sampler27GetSensorInternalResistanceEv+0xe>
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	080021b1 	.word	0x080021b1
 8002298:	40533333 	.word	0x40533333
 800229c:	46abe000 	.word	0x46abe000
 80022a0:	41200000 	.word	0x41200000
	...

080022b0 <_ZNK7Sampler20GetSensorTemperatureEv>:
{
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	46ce      	mov	lr, r9
 80022b4:	4647      	mov	r7, r8
    float esr = GetSensorInternalResistance();
 80022b6:	6803      	ldr	r3, [r0, #0]
 80022b8:	4944      	ldr	r1, [pc, #272]	; (80023cc <_ZNK7Sampler20GetSensorTemperatureEv+0x11c>)
 80022ba:	695a      	ldr	r2, [r3, #20]
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	428a      	cmp	r2, r1
 80022c0:	d11e      	bne.n	8002300 <_ZNK7Sampler20GetSensorTemperatureEv+0x50>
    float totalEsr = GetESRSupplyR() / (VCC_VOLTS / GetNernstAc() - 1);
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a42      	ldr	r2, [pc, #264]	; (80023d0 <_ZNK7Sampler20GetSensorTemperatureEv+0x120>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d15c      	bne.n	8002384 <_ZNK7Sampler20GetSensorTemperatureEv+0xd4>
    return nernstAc;
 80022ca:	68c1      	ldr	r1, [r0, #12]
    float totalEsr = GetESRSupplyR() / (VCC_VOLTS / GetNernstAc() - 1);
 80022cc:	4841      	ldr	r0, [pc, #260]	; (80023d4 <_ZNK7Sampler20GetSensorTemperatureEv+0x124>)
 80022ce:	f003 f911 	bl	80054f4 <__aeabi_fdiv>
 80022d2:	21fe      	movs	r1, #254	; 0xfe
 80022d4:	0589      	lsls	r1, r1, #22
 80022d6:	f003 fc25 	bl	8005b24 <__aeabi_fsub>
 80022da:	1c01      	adds	r1, r0, #0
 80022dc:	483e      	ldr	r0, [pc, #248]	; (80023d8 <_ZNK7Sampler20GetSensorTemperatureEv+0x128>)
 80022de:	f003 f909 	bl	80054f4 <__aeabi_fdiv>
    return totalEsr - VM_RESISTOR_VALUE;
 80022e2:	493e      	ldr	r1, [pc, #248]	; (80023dc <_ZNK7Sampler20GetSensorTemperatureEv+0x12c>)
 80022e4:	f003 fc1e 	bl	8005b24 <__aeabi_fsub>
 80022e8:	1c04      	adds	r4, r0, #0
    if (esr > 5000)
 80022ea:	493d      	ldr	r1, [pc, #244]	; (80023e0 <_ZNK7Sampler20GetSensorTemperatureEv+0x130>)
 80022ec:	1c20      	adds	r0, r4, #0
 80022ee:	f7ff fc4b 	bl	8001b88 <__aeabi_fcmpgt>
 80022f2:	2800      	cmp	r0, #0
 80022f4:	d00c      	beq.n	8002310 <_ZNK7Sampler20GetSensorTemperatureEv+0x60>
        return 0;
 80022f6:	2000      	movs	r0, #0
}
 80022f8:	bcc0      	pop	{r6, r7}
 80022fa:	46b9      	mov	r9, r7
 80022fc:	46b0      	mov	r8, r6
 80022fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    float esr = GetSensorInternalResistance();
 8002300:	4790      	blx	r2
 8002302:	1c04      	adds	r4, r0, #0
    if (esr > 5000)
 8002304:	4936      	ldr	r1, [pc, #216]	; (80023e0 <_ZNK7Sampler20GetSensorTemperatureEv+0x130>)
 8002306:	1c20      	adds	r0, r4, #0
 8002308:	f7ff fc3e 	bl	8001b88 <__aeabi_fcmpgt>
 800230c:	2800      	cmp	r0, #0
 800230e:	d1f2      	bne.n	80022f6 <_ZNK7Sampler20GetSensorTemperatureEv+0x46>

	// Enforce that there are enough bins to make sense (what does one bin even mean?)
	static_assert(TSize >= 2);

	// Handle NaN
	if (cisnan(value)) {
 8002310:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <_ZNK7Sampler20GetSensorTemperatureEv+0x134>)
 8002312:	429c      	cmp	r4, r3
 8002314:	d039      	beq.n	800238a <_ZNK7Sampler20GetSensorTemperatureEv+0xda>
		return { 0, 0.0f };
	}

	// Handle off-scale low
	if (value <= bins[0]) {
 8002316:	4934      	ldr	r1, [pc, #208]	; (80023e8 <_ZNK7Sampler20GetSensorTemperatureEv+0x138>)
 8002318:	1c20      	adds	r0, r4, #0
 800231a:	f7ff fc2b 	bl	8001b74 <__aeabi_fcmple>
 800231e:	2800      	cmp	r0, #0
 8002320:	d133      	bne.n	800238a <_ZNK7Sampler20GetSensorTemperatureEv+0xda>
		return { 0, 0.0f };
	}

	// Handle off-scale high
	if (value >= bins[TSize - 1]) {
 8002322:	4932      	ldr	r1, [pc, #200]	; (80023ec <_ZNK7Sampler20GetSensorTemperatureEv+0x13c>)
 8002324:	1c20      	adds	r0, r4, #0
 8002326:	f7ff fc39 	bl	8001b9c <__aeabi_fcmpge>
 800232a:	2800      	cmp	r0, #0
 800232c:	d12f      	bne.n	800238e <_ZNK7Sampler20GetSensorTemperatureEv+0xde>
 800232e:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <_ZNK7Sampler20GetSensorTemperatureEv+0x140>)
	size_t idx = 0;

	// Find the last index less than the searched value
	// Linear search for now, maybe binary search in future
	// after collecting real perf data
	for (idx = 0; idx < TSize - 1; idx++) {
 8002330:	2600      	movs	r6, #0
 8002332:	4699      	mov	r9, r3
 8002334:	2308      	movs	r3, #8
 8002336:	444b      	add	r3, r9
 8002338:	4698      	mov	r8, r3
	if (value >= bins[TSize - 1]) {
 800233a:	4f2e      	ldr	r7, [pc, #184]	; (80023f4 <_ZNK7Sampler20GetSensorTemperatureEv+0x144>)
 800233c:	e003      	b.n	8002346 <_ZNK7Sampler20GetSensorTemperatureEv+0x96>
		if (bins[idx + 1] > value) {
 800233e:	4643      	mov	r3, r8
 8002340:	cb80      	ldmia	r3!, {r7}
 8002342:	002e      	movs	r6, r5
 8002344:	4698      	mov	r8, r3
 8002346:	1c39      	adds	r1, r7, #0
 8002348:	1c20      	adds	r0, r4, #0
 800234a:	1c75      	adds	r5, r6, #1
 800234c:	f7ff fc08 	bl	8001b60 <__aeabi_fcmplt>
 8002350:	2800      	cmp	r0, #0
 8002352:	d11e      	bne.n	8002392 <_ZNK7Sampler20GetSensorTemperatureEv+0xe2>
	for (idx = 0; idx < TSize - 1; idx++) {
 8002354:	2d0f      	cmp	r5, #15
 8002356:	d1f2      	bne.n	800233e <_ZNK7Sampler20GetSensorTemperatureEv+0x8e>
	float low = bins[idx];
	float high = bins[idx + 1];

	// Compute how far along the bin we are
	// (0.0f = left side, 1.0f = right side)
	float fraction = (value - low) / (high - low);
 8002358:	4924      	ldr	r1, [pc, #144]	; (80023ec <_ZNK7Sampler20GetSensorTemperatureEv+0x13c>)
 800235a:	1c20      	adds	r0, r4, #0
 800235c:	f003 fbe2 	bl	8005b24 <__aeabi_fsub>
 8002360:	4925      	ldr	r1, [pc, #148]	; (80023f8 <_ZNK7Sampler20GetSensorTemperatureEv+0x148>)
 8002362:	f003 fa91 	bl	8005888 <__aeabi_fmul>
 8002366:	2500      	movs	r5, #0
 8002368:	4e24      	ldr	r6, [pc, #144]	; (80023fc <_ZNK7Sampler20GetSensorTemperatureEv+0x14c>)
 800236a:	1c04      	adds	r4, r0, #0
	return getBin(value * (float(TMult) / TDiv), *reinterpret_cast<const TBin (*)[TSize]>(&bins));
}

static inline float linterp(float low, float high, float frac)
{
	return high * frac + low * (1 - frac);
 800236c:	20fe      	movs	r0, #254	; 0xfe
 800236e:	1c21      	adds	r1, r4, #0
 8002370:	0580      	lsls	r0, r0, #22
 8002372:	f003 fbd7 	bl	8005b24 <__aeabi_fsub>
 8002376:	1c31      	adds	r1, r6, #0
 8002378:	f003 fa86 	bl	8005888 <__aeabi_fmul>
 800237c:	1c29      	adds	r1, r5, #0
 800237e:	f002 ff19 	bl	80051b4 <__aeabi_fadd>
 8002382:	e7b9      	b.n	80022f8 <_ZNK7Sampler20GetSensorTemperatureEv+0x48>
    float totalEsr = GetESRSupplyR() / (VCC_VOLTS / GetNernstAc() - 1);
 8002384:	4798      	blx	r3
 8002386:	1c01      	adds	r1, r0, #0
 8002388:	e7a0      	b.n	80022cc <_ZNK7Sampler20GetSensorTemperatureEv+0x1c>
 800238a:	481d      	ldr	r0, [pc, #116]	; (8002400 <_ZNK7Sampler20GetSensorTemperatureEv+0x150>)
 800238c:	e7b4      	b.n	80022f8 <_ZNK7Sampler20GetSensorTemperatureEv+0x48>
 800238e:	481b      	ldr	r0, [pc, #108]	; (80023fc <_ZNK7Sampler20GetSensorTemperatureEv+0x14c>)
            return interpolate2d(esr, lsu49TempBins, lsu49TempValues);
 8002390:	e7b2      	b.n	80022f8 <_ZNK7Sampler20GetSensorTemperatureEv+0x48>
	float low = bins[idx];
 8002392:	464b      	mov	r3, r9
 8002394:	00b6      	lsls	r6, r6, #2
 8002396:	599b      	ldr	r3, [r3, r6]
	float fraction = (value - low) / (high - low);
 8002398:	1c20      	adds	r0, r4, #0
	float low = bins[idx];
 800239a:	4699      	mov	r9, r3
	static_assert(std::is_arithmetic_v<TBin> || is_scaled_channel<TBin>, "Table values must be an arithmetic type or scaled channel");

	auto b = priv::getBin(value, bin);

	// Convert to float as we read it out
	float low = static_cast<float>(values[b.Idx]);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <_ZNK7Sampler20GetSensorTemperatureEv+0x154>)
	float fraction = (value - low) / (high - low);
 800239e:	4649      	mov	r1, r9
	float low = static_cast<float>(values[b.Idx]);
 80023a0:	4698      	mov	r8, r3
 80023a2:	58f6      	ldr	r6, [r6, r3]
	float fraction = (value - low) / (high - low);
 80023a4:	f003 fbbe 	bl	8005b24 <__aeabi_fsub>
 80023a8:	4649      	mov	r1, r9
 80023aa:	1c04      	adds	r4, r0, #0
 80023ac:	1c38      	adds	r0, r7, #0
 80023ae:	f003 fbb9 	bl	8005b24 <__aeabi_fsub>
 80023b2:	1c01      	adds	r1, r0, #0
 80023b4:	1c20      	adds	r0, r4, #0
 80023b6:	f003 f89d 	bl	80054f4 <__aeabi_fdiv>
	return high * frac + low * (1 - frac);
 80023ba:	4643      	mov	r3, r8
	float high = static_cast<float>(values[b.Idx + 1]);
 80023bc:	00ad      	lsls	r5, r5, #2
	return high * frac + low * (1 - frac);
 80023be:	58e9      	ldr	r1, [r5, r3]
	float fraction = (value - low) / (high - low);
 80023c0:	1c04      	adds	r4, r0, #0
	return high * frac + low * (1 - frac);
 80023c2:	f003 fa61 	bl	8005888 <__aeabi_fmul>
 80023c6:	1c05      	adds	r5, r0, #0
 80023c8:	e7d0      	b.n	800236c <_ZNK7Sampler20GetSensorTemperatureEv+0xbc>
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	08002261 	.word	0x08002261
 80023d0:	080021b1 	.word	0x080021b1
 80023d4:	40533333 	.word	0x40533333
 80023d8:	46abe000 	.word	0x46abe000
 80023dc:	41200000 	.word	0x41200000
 80023e0:	459c4000 	.word	0x459c4000
 80023e4:	7fc00000 	.word	0x7fc00000
 80023e8:	42a00000 	.word	0x42a00000
 80023ec:	458ca000 	.word	0x458ca000
 80023f0:	08006020 	.word	0x08006020
 80023f4:	42c80000 	.word	0x42c80000
 80023f8:	b9690453 	.word	0xb9690453
 80023fc:	43fa0000 	.word	0x43fa0000
 8002400:	4480c000 	.word	0x4480c000
 8002404:	080060d0 	.word	0x080060d0
	...

08002410 <_ZNK20HeaterControllerBase19IsRunningClosedLoopEv>:
    m_batteryStableTimer.reset();
}

bool HeaterControllerBase::IsRunningClosedLoop() const
{
    return heaterState == HeaterState::ClosedLoop;
 8002410:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002412:	3802      	subs	r0, #2
 8002414:	4243      	negs	r3, r0
 8002416:	4158      	adcs	r0, r3
 8002418:	b2c0      	uxtb	r0, r0
}
 800241a:	4770      	bx	lr
 800241c:	0000      	movs	r0, r0
	...

08002420 <_ZNK20HeaterControllerBase25GetHeaterEffectiveVoltageEv>:

float HeaterControllerBase::GetHeaterEffectiveVoltage() const
{
    return heaterVoltage;
 8002420:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8002422:	4770      	bx	lr
	...

08002430 <_ZNK20HeaterControllerBase14GetHeaterStateEv>:

HeaterState HeaterControllerBase::GetHeaterState() const
{
    return heaterState;
 8002430:	6a80      	ldr	r0, [r0, #40]	; 0x28
}
 8002432:	4770      	bx	lr
	...

08002440 <_ZN5Timer5resetEv>:
void Timer::reset() {
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	0006      	movs	r6, r0
 8002444:	b672      	cpsid	i
 8002446:	2380      	movs	r3, #128	; 0x80
  stamp = last + (systimestamp_t)chTimeDiffX((sysinterval_t)last, now);
 8002448:	2500      	movs	r5, #0
 800244a:	05db      	lsls	r3, r3, #23
 800244c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  last = ch.vtlist.laststamp;
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <_ZN5Timer5resetEv+0x54>)
 8002450:	6a18      	ldr	r0, [r3, #32]
 8002452:	6a59      	ldr	r1, [r3, #36]	; 0x24
  stamp = last + (systimestamp_t)chTimeDiffX((sysinterval_t)last, now);
 8002454:	1a14      	subs	r4, r2, r0
 8002456:	1900      	adds	r0, r0, r4
 8002458:	4169      	adcs	r1, r5
  chDbgAssert(ch.vtlist.laststamp <= stamp, "wrapped");
 800245a:	6a1c      	ldr	r4, [r3, #32]
 800245c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800245e:	428d      	cmp	r5, r1
 8002460:	d810      	bhi.n	8002484 <_ZN5Timer5resetEv+0x44>
 8002462:	d00d      	beq.n	8002480 <_ZN5Timer5resetEv+0x40>
 8002464:	681a      	ldr	r2, [r3, #0]
  ch.vtlist.laststamp = stamp;
 8002466:	6218      	str	r0, [r3, #32]
 8002468:	6259      	str	r1, [r3, #36]	; 0x24
 800246a:	429a      	cmp	r2, r3
 800246c:	d004      	beq.n	8002478 <_ZN5Timer5resetEv+0x38>
 800246e:	68dc      	ldr	r4, [r3, #12]
 8002470:	6892      	ldr	r2, [r2, #8]
 8002472:	68a4      	ldr	r4, [r4, #8]
 8002474:	4294      	cmp	r4, r2
 8002476:	d309      	bcc.n	800248c <_ZN5Timer5resetEv+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
 8002478:	b662      	cpsie	i
	m_lastReset = stamp;
 800247a:	6030      	str	r0, [r6, #0]
 800247c:	6071      	str	r1, [r6, #4]
}
 800247e:	bd70      	pop	{r4, r5, r6, pc}
  chDbgAssert(ch.vtlist.laststamp <= stamp, "wrapped");
 8002480:	4284      	cmp	r4, r0
 8002482:	d9ef      	bls.n	8002464 <_ZN5Timer5resetEv+0x24>
  __ASM volatile ("cpsid i" : : : "memory");
 8002484:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8002486:	4a04      	ldr	r2, [pc, #16]	; (8002498 <_ZN5Timer5resetEv+0x58>)
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 800248a:	e7fe      	b.n	800248a <_ZN5Timer5resetEv+0x4a>
 800248c:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 800248e:	4a03      	ldr	r2, [pc, #12]	; (800249c <_ZN5Timer5resetEv+0x5c>)
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8002492:	e7fe      	b.n	8002492 <_ZN5Timer5resetEv+0x52>
 8002494:	200017f8 	.word	0x200017f8
 8002498:	08006188 	.word	0x08006188
 800249c:	08005fd8 	.word	0x08005fd8

080024a0 <_ZNK5Timer13hasElapsedSecEf>:
bool Timer::hasElapsedSec(float seconds) const {
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a2:	0002      	movs	r2, r0
 80024a4:	1c0e      	adds	r6, r1, #0
 80024a6:	b672      	cpsid	i
 80024a8:	2380      	movs	r3, #128	; 0x80
  stamp = last + (systimestamp_t)chTimeDiffX((sysinterval_t)last, now);
 80024aa:	2500      	movs	r5, #0
 80024ac:	05db      	lsls	r3, r3, #23
 80024ae:	6a5f      	ldr	r7, [r3, #36]	; 0x24
  last = ch.vtlist.laststamp;
 80024b0:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <_ZNK5Timer13hasElapsedSecEf+0x84>)
 80024b2:	6a18      	ldr	r0, [r3, #32]
 80024b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
  stamp = last + (systimestamp_t)chTimeDiffX((sysinterval_t)last, now);
 80024b6:	1a3c      	subs	r4, r7, r0
 80024b8:	1900      	adds	r0, r0, r4
 80024ba:	4169      	adcs	r1, r5
  chDbgAssert(ch.vtlist.laststamp <= stamp, "wrapped");
 80024bc:	6a1c      	ldr	r4, [r3, #32]
 80024be:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80024c0:	428d      	cmp	r5, r1
 80024c2:	d822      	bhi.n	800250a <_ZNK5Timer13hasElapsedSecEf+0x6a>
 80024c4:	d01f      	beq.n	8002506 <_ZNK5Timer13hasElapsedSecEf+0x66>
 80024c6:	681c      	ldr	r4, [r3, #0]
  ch.vtlist.laststamp = stamp;
 80024c8:	6218      	str	r0, [r3, #32]
 80024ca:	6259      	str	r1, [r3, #36]	; 0x24
 80024cc:	429c      	cmp	r4, r3
 80024ce:	d004      	beq.n	80024da <_ZNK5Timer13hasElapsedSecEf+0x3a>
 80024d0:	68dd      	ldr	r5, [r3, #12]
 80024d2:	68a4      	ldr	r4, [r4, #8]
 80024d4:	68ad      	ldr	r5, [r5, #8]
 80024d6:	42a5      	cmp	r5, r4
 80024d8:	d31f      	bcc.n	800251a <_ZNK5Timer13hasElapsedSecEf+0x7a>
  __ASM volatile ("cpsie i" : : : "memory");
 80024da:	b662      	cpsie	i
	auto delta = getTimestamp() - m_lastReset;
 80024dc:	6853      	ldr	r3, [r2, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	1a80      	subs	r0, r0, r2
 80024e2:	4199      	sbcs	r1, r3
	if (delta >= UINT32_MAX) {
 80024e4:	2900      	cmp	r1, #0
 80024e6:	dc16      	bgt.n	8002516 <_ZNK5Timer13hasElapsedSecEf+0x76>
 80024e8:	d013      	beq.n	8002512 <_ZNK5Timer13hasElapsedSecEf+0x72>
	return delta32 > (microseconds / usPerTick);
 80024ea:	f003 fd2d 	bl	8005f48 <__aeabi_ui2f>
 80024ee:	490e      	ldr	r1, [pc, #56]	; (8002528 <_ZNK5Timer13hasElapsedSecEf+0x88>)
 80024f0:	1c04      	adds	r4, r0, #0
 80024f2:	1c30      	adds	r0, r6, #0
 80024f4:	f003 f9c8 	bl	8005888 <__aeabi_fmul>
 80024f8:	1c01      	adds	r1, r0, #0
 80024fa:	1c20      	adds	r0, r4, #0
 80024fc:	f7ff fb44 	bl	8001b88 <__aeabi_fcmpgt>
 8002500:	1e43      	subs	r3, r0, #1
 8002502:	4198      	sbcs	r0, r3
}
 8002504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgAssert(ch.vtlist.laststamp <= stamp, "wrapped");
 8002506:	4284      	cmp	r4, r0
 8002508:	d9dd      	bls.n	80024c6 <_ZNK5Timer13hasElapsedSecEf+0x26>
  __ASM volatile ("cpsid i" : : : "memory");
 800250a:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <_ZNK5Timer13hasElapsedSecEf+0x8c>)
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8002510:	e7fe      	b.n	8002510 <_ZNK5Timer13hasElapsedSecEf+0x70>
	if (delta >= UINT32_MAX) {
 8002512:	1c83      	adds	r3, r0, #2
 8002514:	d9e9      	bls.n	80024ea <_ZNK5Timer13hasElapsedSecEf+0x4a>
		return true;
 8002516:	2001      	movs	r0, #1
 8002518:	e7f4      	b.n	8002504 <_ZNK5Timer13hasElapsedSecEf+0x64>
 800251a:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <_ZNK5Timer13hasElapsedSecEf+0x90>)
 800251e:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8002520:	e7fe      	b.n	8002520 <_ZNK5Timer13hasElapsedSecEf+0x80>
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	200017f8 	.word	0x200017f8
 8002528:	461c4000 	.word	0x461c4000
 800252c:	08006188 	.word	0x08006188
 8002530:	08005fd8 	.word	0x08005fd8
	...

08002540 <_Z9GetLambdai>:

static Sampler samplers[AFR_CHANNELS];

const ISampler& GetSampler(int ch)
{
    return samplers[ch];
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <_Z9GetLambdai+0x70>)
 8002542:	0142      	lsls	r2, r0, #5
 8002544:	1898      	adds	r0, r3, r2
    return 1;
}

float GetLambda(int ch)
{
    float pumpCurrent = GetSampler(ch).GetPumpNominalCurrent();
 8002546:	58d3      	ldr	r3, [r2, r3]
 8002548:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <_Z9GetLambdai+0x74>)
 800254a:	689b      	ldr	r3, [r3, #8]
{
 800254c:	b510      	push	{r4, lr}
 800254e:	4293      	cmp	r3, r2
 8002550:	d126      	bne.n	80025a0 <_Z9GetLambdai+0x60>
    return pumpCurrentSenseVoltage * ratio;
 8002552:	4919      	ldr	r1, [pc, #100]	; (80025b8 <_Z9GetLambdai+0x78>)
 8002554:	6940      	ldr	r0, [r0, #20]
 8002556:	f003 f997 	bl	8005888 <__aeabi_fmul>
 800255a:	1c04      	adds	r4, r0, #0
    if (pumpCurrent > 1.11f)
 800255c:	4917      	ldr	r1, [pc, #92]	; (80025bc <_Z9GetLambdai+0x7c>)
 800255e:	1c20      	adds	r0, r4, #0
 8002560:	f7ff fb12 	bl	8001b88 <__aeabi_fcmpgt>
 8002564:	2800      	cmp	r0, #0
 8002566:	d118      	bne.n	800259a <_Z9GetLambdai+0x5a>
    if (pumpCurrent < -3.5f)
 8002568:	4915      	ldr	r1, [pc, #84]	; (80025c0 <_Z9GetLambdai+0x80>)
 800256a:	1c20      	adds	r0, r4, #0
 800256c:	f7ff faf8 	bl	8001b60 <__aeabi_fcmplt>
 8002570:	2800      	cmp	r0, #0
 8002572:	d118      	bne.n	80025a6 <_Z9GetLambdai+0x66>
    float gain = pumpCurrent < 0 ? -0.28299f : -0.44817f;
 8002574:	2100      	movs	r1, #0
 8002576:	1c20      	adds	r0, r4, #0
 8002578:	f7ff faf2 	bl	8001b60 <__aeabi_fcmplt>
 800257c:	2800      	cmp	r0, #0
 800257e:	d115      	bne.n	80025ac <_Z9GetLambdai+0x6c>
 8002580:	4910      	ldr	r1, [pc, #64]	; (80025c4 <_Z9GetLambdai+0x84>)
    return gain * pumpCurrent + 0.99559f;
 8002582:	1c20      	adds	r0, r4, #0
 8002584:	f003 f980 	bl	8005888 <__aeabi_fmul>
 8002588:	490f      	ldr	r1, [pc, #60]	; (80025c8 <_Z9GetLambdai+0x88>)
 800258a:	f002 fe13 	bl	80051b4 <__aeabi_fadd>
 800258e:	1c01      	adds	r1, r0, #0

    // Lambda is reciprocal of phi
    return 1 / GetPhi(pumpCurrent);
 8002590:	20fe      	movs	r0, #254	; 0xfe
 8002592:	0580      	lsls	r0, r0, #22
 8002594:	f002 ffae 	bl	80054f4 <__aeabi_fdiv>
    return gain * pumpCurrent + 0.99559f;
 8002598:	e001      	b.n	800259e <_Z9GetLambdai+0x5e>
 800259a:	2080      	movs	r0, #128	; 0x80
 800259c:	05c0      	lsls	r0, r0, #23
}
 800259e:	bd10      	pop	{r4, pc}
    float pumpCurrent = GetSampler(ch).GetPumpNominalCurrent();
 80025a0:	4798      	blx	r3
 80025a2:	1c04      	adds	r4, r0, #0
 80025a4:	e7da      	b.n	800255c <_Z9GetLambdai+0x1c>
 80025a6:	20fc      	movs	r0, #252	; 0xfc
 80025a8:	0580      	lsls	r0, r0, #22
    return 1 / GetPhi(pumpCurrent);
 80025aa:	e7f8      	b.n	800259e <_Z9GetLambdai+0x5e>
    float gain = pumpCurrent < 0 ? -0.28299f : -0.44817f;
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <_Z9GetLambdai+0x8c>)
 80025ae:	e7e8      	b.n	8002582 <_Z9GetLambdai+0x42>
 80025b0:	20001728 	.word	0x20001728
 80025b4:	080021c1 	.word	0x080021c1
 80025b8:	bfcec8ff 	.word	0xbfcec8ff
 80025bc:	3f8e147b 	.word	0x3f8e147b
 80025c0:	c0600000 	.word	0xc0600000
 80025c4:	bee5768a 	.word	0xbee5768a
 80025c8:	3f7edefc 	.word	0x3f7edefc
 80025cc:	be90e411 	.word	0xbe90e411

080025d0 <_ZN3Pwm7SetDutyEif>:
    m_counterPeriod = config.period;

    pwmStart(m_driver, &config);
}

void Pwm::SetDuty(int channel, float duty) {
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	000d      	movs	r5, r1
 80025d4:	21fe      	movs	r1, #254	; 0xfe
 80025d6:	0006      	movs	r6, r0
 80025d8:	0589      	lsls	r1, r1, #22
 80025da:	1c10      	adds	r0, r2, #0
 80025dc:	1c14      	adds	r4, r2, #0
 80025de:	f7ff fac9 	bl	8001b74 <__aeabi_fcmple>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d101      	bne.n	80025ea <_ZN3Pwm7SetDutyEif+0x1a>
 80025e6:	24fe      	movs	r4, #254	; 0xfe
 80025e8:	05a4      	lsls	r4, r4, #22
 80025ea:	2100      	movs	r1, #0
 80025ec:	1c20      	adds	r0, r4, #0
 80025ee:	f7ff fad5 	bl	8001b9c <__aeabi_fcmpge>
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d100      	bne.n	80025f8 <_ZN3Pwm7SetDutyEif+0x28>
 80025f6:	2400      	movs	r4, #0
    auto dutyFloat = clampF(0, duty, 1);
    m_dutyFloat[channel] = dutyFloat;
 80025f8:	1cab      	adds	r3, r5, #2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	18f3      	adds	r3, r6, r3
 80025fe:	605c      	str	r4, [r3, #4]
    pwmcnt_t highTime = m_counterPeriod * dutyFloat;

    pwmEnableChannel(m_driver, channel, highTime);
 8002600:	6833      	ldr	r3, [r6, #0]
    pwmcnt_t highTime = m_counterPeriod * dutyFloat;
 8002602:	8930      	ldrh	r0, [r6, #8]
    pwmEnableChannel(m_driver, channel, highTime);
 8002604:	b2ea      	uxtb	r2, r5
 */
void pwmEnableChannel(PWMDriver *pwmp,
                      pwmchannel_t channel,
                      pwmcnt_t width) {

  osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <_ZN3Pwm7SetDutyEif+0x52>
 800260a:	7c19      	ldrb	r1, [r3, #16]
 800260c:	4291      	cmp	r1, r2
 800260e:	d908      	bls.n	8002622 <_ZN3Pwm7SetDutyEif+0x52>
 8002610:	b672      	cpsid	i

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	2a02      	cmp	r2, #2
 8002616:	d009      	beq.n	800262c <_ZN3Pwm7SetDutyEif+0x5c>
 8002618:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <_ZN3Pwm7SetDutyEif+0x9c>)
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <_ZN3Pwm7SetDutyEif+0xa0>)
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8002620:	e7fe      	b.n	8002620 <_ZN3Pwm7SetDutyEif+0x50>
 8002622:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <_ZN3Pwm7SetDutyEif+0x9c>)
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <_ZN3Pwm7SetDutyEif+0xa0>)
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 800262a:	e7fe      	b.n	800262a <_ZN3Pwm7SetDutyEif+0x5a>

  pwmEnableChannelI(pwmp, channel, width);
 800262c:	2101      	movs	r1, #1
 800262e:	40a9      	lsls	r1, r5
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	699e      	ldr	r6, [r3, #24]
 8002634:	430a      	orrs	r2, r1
 8002636:	60da      	str	r2, [r3, #12]
    pwmcnt_t highTime = m_counterPeriod * dutyFloat;
 8002638:	f003 fc34 	bl	8005ea4 <__aeabi_i2f>
 800263c:	1c21      	adds	r1, r4, #0
 800263e:	f003 f923 	bl	8005888 <__aeabi_fmul>
 8002642:	f002 fd9f 	bl	8005184 <__aeabi_f2uiz>
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <_ZN3Pwm7SetDutyEif+0x9c>)
  pwmp->tim->CCR[channel] = width;
 8002648:	350c      	adds	r5, #12
 800264a:	00ad      	lsls	r5, r5, #2
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	1976      	adds	r6, r6, r5
 8002650:	6070      	str	r0, [r6, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d004      	beq.n	8002660 <_ZN3Pwm7SetDutyEif+0x90>
 8002656:	68d9      	ldr	r1, [r3, #12]
 8002658:	6892      	ldr	r2, [r2, #8]
 800265a:	6889      	ldr	r1, [r1, #8]
 800265c:	4291      	cmp	r1, r2
 800265e:	d301      	bcc.n	8002664 <_ZN3Pwm7SetDutyEif+0x94>
  __ASM volatile ("cpsie i" : : : "memory");
 8002660:	b662      	cpsie	i
}
 8002662:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8002664:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8002666:	4a03      	ldr	r2, [pc, #12]	; (8002674 <_ZN3Pwm7SetDutyEif+0xa4>)
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 800266a:	e7fe      	b.n	800266a <_ZN3Pwm7SetDutyEif+0x9a>
 800266c:	200017f8 	.word	0x200017f8
 8002670:	080062d0 	.word	0x080062d0
 8002674:	0800632c 	.word	0x0800632c
	...

08002680 <_ZNK16HeaterController7SetDutyEf>:
    {
    }

    void SetDuty(float duty) const override
    {
        heaterPwm.SetDuty(pwm_ch, duty);
 8002680:	2358      	movs	r3, #88	; 0x58
    void SetDuty(float duty) const override
 8002682:	b510      	push	{r4, lr}
 8002684:	1c0a      	adds	r2, r1, #0
        heaterPwm.SetDuty(pwm_ch, duty);
 8002686:	5cc1      	ldrb	r1, [r0, r3]
 8002688:	4801      	ldr	r0, [pc, #4]	; (8002690 <_ZNK16HeaterController7SetDutyEf+0x10>)
 800268a:	f7ff ffa1 	bl	80025d0 <_ZN3Pwm7SetDutyEif>
    }
 800268e:	bd10      	pop	{r4, pc}
 8002690:	200017d8 	.word	0x200017d8
	...

080026a0 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow>:
    // should be unreachable
    return 0;
}

void HeaterControllerBase::Update(const ISampler& sampler, HeaterAllow heaterAllowState)
{
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	464e      	mov	r6, r9
 80026a4:	4645      	mov	r5, r8
 80026a6:	46de      	mov	lr, fp
 80026a8:	4657      	mov	r7, sl
 80026aa:	b5e0      	push	{r5, r6, r7, lr}
    // Read sensor state
    float sensorEsr = sampler.GetSensorInternalResistance();
 80026ac:	680e      	ldr	r6, [r1, #0]
{
 80026ae:	4691      	mov	r9, r2
    float sensorEsr = sampler.GetSensorInternalResistance();
 80026b0:	6973      	ldr	r3, [r6, #20]
 80026b2:	4ab2      	ldr	r2, [pc, #712]	; (800297c <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2dc>)
{
 80026b4:	0004      	movs	r4, r0
 80026b6:	000d      	movs	r5, r1
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d000      	beq.n	80026be <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x1e>
 80026bc:	e07c      	b.n	80027b8 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x118>
    float totalEsr = GetESRSupplyR() / (VCC_VOLTS / GetNernstAc() - 1);
 80026be:	6873      	ldr	r3, [r6, #4]
 80026c0:	4aaf      	ldr	r2, [pc, #700]	; (8002980 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2e0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d000      	beq.n	80026c8 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x28>
 80026c6:	e118      	b.n	80028fa <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x25a>
    return nernstAc;
 80026c8:	68c9      	ldr	r1, [r1, #12]
    float totalEsr = GetESRSupplyR() / (VCC_VOLTS / GetNernstAc() - 1);
 80026ca:	48ae      	ldr	r0, [pc, #696]	; (8002984 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2e4>)
 80026cc:	f002 ff12 	bl	80054f4 <__aeabi_fdiv>
 80026d0:	21fe      	movs	r1, #254	; 0xfe
 80026d2:	0589      	lsls	r1, r1, #22
 80026d4:	f003 fa26 	bl	8005b24 <__aeabi_fsub>
 80026d8:	1c01      	adds	r1, r0, #0
 80026da:	48ab      	ldr	r0, [pc, #684]	; (8002988 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2e8>)
 80026dc:	f002 ff0a 	bl	80054f4 <__aeabi_fdiv>
    return totalEsr - VM_RESISTOR_VALUE;
 80026e0:	49aa      	ldr	r1, [pc, #680]	; (800298c <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2ec>)
 80026e2:	f003 fa1f 	bl	8005b24 <__aeabi_fsub>
 80026e6:	4680      	mov	r8, r0
    float sensorTemperature = sampler.GetSensorTemperature();
 80026e8:	6933      	ldr	r3, [r6, #16]
 80026ea:	0028      	movs	r0, r5
 80026ec:	4798      	blx	r3

    // If we haven't heard from the ECU, use the internally sensed
    // battery voltage instead of voltage over CAN.
    float batteryVoltage = heaterAllowState == HeaterAllow::Unknown
                                ? sampler.GetInternalBatteryVoltage()
 80026ee:	464b      	mov	r3, r9
    float sensorTemperature = sampler.GetSensorTemperature();
 80026f0:	4683      	mov	fp, r0
                                ? sampler.GetInternalBatteryVoltage()
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d122      	bne.n	800273c <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x9c>
 80026f6:	682b      	ldr	r3, [r5, #0]
 80026f8:	0028      	movs	r0, r5
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4798      	blx	r3
        if (batteryVoltage < HEATER_BATTETY_OFF_VOLTAGE)
 80026fe:	49a4      	ldr	r1, [pc, #656]	; (8002990 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2f0>)
                                : GetRemoteBatteryVoltage();

    // Run the state machine
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 8002700:	6aa6      	ldr	r6, [r4, #40]	; 0x28
                                ? sampler.GetInternalBatteryVoltage()
 8002702:	1c05      	adds	r5, r0, #0
        if (batteryVoltage < HEATER_BATTETY_OFF_VOLTAGE)
 8002704:	f7ff fa2c 	bl	8001b60 <__aeabi_fcmplt>
 8002708:	2800      	cmp	r0, #0
 800270a:	d000      	beq.n	800270e <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x6e>
 800270c:	e103      	b.n	8002916 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x276>
        else if (batteryVoltage > HEATER_BATTERY_ON_VOLTAGE)
 800270e:	49a1      	ldr	r1, [pc, #644]	; (8002994 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2f4>)
 8002710:	1c28      	adds	r0, r5, #0
 8002712:	f7ff fa39 	bl	8001b88 <__aeabi_fcmpgt>
 8002716:	2800      	cmp	r0, #0
 8002718:	d153      	bne.n	80027c2 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x122>
        m_preheatTimer.reset();
 800271a:	0020      	movs	r0, r4
 800271c:	3048      	adds	r0, #72	; 0x48
 800271e:	f7ff fe8f 	bl	8002440 <_ZN5Timer5resetEv>
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 8002722:	2300      	movs	r3, #0
    if (heaterVoltage > 12) {
        heaterVoltage = 12;
    }

    // duty = (V_eff / V_batt) ^ 2
    float voltageRatio = (batteryVoltage < 1.0f) ? 0 : heaterVoltage / batteryVoltage;
 8002724:	21fe      	movs	r1, #254	; 0xfe
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 8002726:	2680      	movs	r6, #128	; 0x80
 8002728:	62a3      	str	r3, [r4, #40]	; 0x28
    float voltageRatio = (batteryVoltage < 1.0f) ? 0 : heaterVoltage / batteryVoltage;
 800272a:	0589      	lsls	r1, r1, #22
 800272c:	1c28      	adds	r0, r5, #0
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 800272e:	05f6      	lsls	r6, r6, #23
    float voltageRatio = (batteryVoltage < 1.0f) ? 0 : heaterVoltage / batteryVoltage;
 8002730:	f7ff fa34 	bl	8001b9c <__aeabi_fcmpge>
 8002734:	2800      	cmp	r0, #0
 8002736:	d11f      	bne.n	8002778 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xd8>
 8002738:	2600      	movs	r6, #0
 800273a:	e025      	b.n	8002788 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xe8>
    return heaterAllow;
}

float GetRemoteBatteryVoltage()
{
    return remoteBatteryVoltage;
 800273c:	4b96      	ldr	r3, [pc, #600]	; (8002998 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2f8>)
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 800273e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002740:	681d      	ldr	r5, [r3, #0]
    if (!heaterAllowed)
 8002742:	464b      	mov	r3, r9
 8002744:	2b01      	cmp	r3, #1
 8002746:	d1e8      	bne.n	800271a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x7a>
    float overheatTemp = m_targetTempC + 100;
 8002748:	6b23      	ldr	r3, [r4, #48]	; 0x30
    float closedLoopTemp = m_targetTempC - 30;
 800274a:	4994      	ldr	r1, [pc, #592]	; (800299c <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2fc>)
 800274c:	1c18      	adds	r0, r3, #0
    float overheatTemp = m_targetTempC + 100;
 800274e:	469a      	mov	sl, r3
    float closedLoopTemp = m_targetTempC - 30;
 8002750:	f003 f9e8 	bl	8005b24 <__aeabi_fsub>
 8002754:	4681      	mov	r9, r0
    switch (currentState)
 8002756:	2e01      	cmp	r6, #1
 8002758:	d100      	bne.n	800275c <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xbc>
 800275a:	e0a7      	b.n	80028ac <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x20c>
 800275c:	2e02      	cmp	r6, #2
 800275e:	d100      	bne.n	8002762 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xc2>
 8002760:	e07c      	b.n	800285c <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x1bc>
 8002762:	2e00      	cmp	r6, #0
 8002764:	d066      	beq.n	8002834 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x194>
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 8002766:	62a6      	str	r6, [r4, #40]	; 0x28
 8002768:	2600      	movs	r6, #0
    float voltageRatio = (batteryVoltage < 1.0f) ? 0 : heaterVoltage / batteryVoltage;
 800276a:	21fe      	movs	r1, #254	; 0xfe
 800276c:	1c28      	adds	r0, r5, #0
 800276e:	0589      	lsls	r1, r1, #22
 8002770:	f7ff fa14 	bl	8001b9c <__aeabi_fcmpge>
 8002774:	2800      	cmp	r0, #0
 8002776:	d0df      	beq.n	8002738 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x98>
 8002778:	1c29      	adds	r1, r5, #0
 800277a:	1c30      	adds	r0, r6, #0
 800277c:	f002 feba 	bl	80054f4 <__aeabi_fdiv>
    float duty = voltageRatio * voltageRatio;
 8002780:	1c01      	adds	r1, r0, #0
 8002782:	f003 f881 	bl	8005888 <__aeabi_fmul>
 8002786:	1c06      	adds	r6, r0, #0
            duty = HEATER_MAX_DUTY;
        }
    }
    #endif

    if (batteryVoltage >= 23)
 8002788:	4985      	ldr	r1, [pc, #532]	; (80029a0 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x300>)
 800278a:	1c28      	adds	r0, r5, #0
 800278c:	f7ff fa06 	bl	8001b9c <__aeabi_fcmpge>
 8002790:	2800      	cmp	r0, #0
 8002792:	d000      	beq.n	8002796 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xf6>
    {
        duty = 0;
 8002794:	2600      	movs	r6, #0
        heaterVoltage = 0;
    }

    // Pipe the output to the heater driver
    SetDuty(duty);
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	4a82      	ldr	r2, [pc, #520]	; (80029a4 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x304>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	4293      	cmp	r3, r2
 800279e:	d145      	bne.n	800282c <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x18c>
        heaterPwm.SetDuty(pwm_ch, duty);
 80027a0:	2358      	movs	r3, #88	; 0x58
 80027a2:	4881      	ldr	r0, [pc, #516]	; (80029a8 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x308>)
 80027a4:	5ce1      	ldrb	r1, [r4, r3]
 80027a6:	1c32      	adds	r2, r6, #0
 80027a8:	f7ff ff12 	bl	80025d0 <_ZN3Pwm7SetDutyEif>
}
 80027ac:	bcf0      	pop	{r4, r5, r6, r7}
 80027ae:	46bb      	mov	fp, r7
 80027b0:	46b2      	mov	sl, r6
 80027b2:	46a9      	mov	r9, r5
 80027b4:	46a0      	mov	r8, r4
 80027b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    float sensorEsr = sampler.GetSensorInternalResistance();
 80027b8:	0008      	movs	r0, r1
 80027ba:	4798      	blx	r3
    float sensorTemperature = sampler.GetSensorTemperature();
 80027bc:	682e      	ldr	r6, [r5, #0]
    float sensorEsr = sampler.GetSensorInternalResistance();
 80027be:	4680      	mov	r8, r0
 80027c0:	e792      	b.n	80026e8 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x48>
 80027c2:	b672      	cpsid	i
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	05db      	lsls	r3, r3, #23
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  stamp = last + (systimestamp_t)chTimeDiffX((sysinterval_t)last, now);
 80027ca:	2100      	movs	r1, #0
 80027cc:	4699      	mov	r9, r3
  last = ch.vtlist.laststamp;
 80027ce:	4b77      	ldr	r3, [pc, #476]	; (80029ac <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x30c>)
  stamp = last + (systimestamp_t)chTimeDiffX((sysinterval_t)last, now);
 80027d0:	464f      	mov	r7, r9
  last = ch.vtlist.laststamp;
 80027d2:	469c      	mov	ip, r3
 80027d4:	6a1a      	ldr	r2, [r3, #32]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  stamp = last + (systimestamp_t)chTimeDiffX((sysinterval_t)last, now);
 80027d8:	1ab8      	subs	r0, r7, r2
 80027da:	1880      	adds	r0, r0, r2
 80027dc:	4159      	adcs	r1, r3
  chDbgAssert(ch.vtlist.laststamp <= stamp, "wrapped");
 80027de:	4663      	mov	r3, ip
 80027e0:	6a1a      	ldr	r2, [r3, #32]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	428b      	cmp	r3, r1
 80027e6:	d900      	bls.n	80027ea <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x14a>
 80027e8:	e0a5      	b.n	8002936 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x296>
 80027ea:	d100      	bne.n	80027ee <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x14e>
 80027ec:	e0a0      	b.n	8002930 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x290>
  ch.vtlist.laststamp = stamp;
 80027ee:	4663      	mov	r3, ip
 80027f0:	6218      	str	r0, [r3, #32]
 80027f2:	6259      	str	r1, [r3, #36]	; 0x24
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4563      	cmp	r3, ip
 80027f8:	d006      	beq.n	8002808 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x168>
 80027fa:	4662      	mov	r2, ip
 80027fc:	68d2      	ldr	r2, [r2, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	6892      	ldr	r2, [r2, #8]
 8002802:	429a      	cmp	r2, r3
 8002804:	d200      	bcs.n	8002808 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x168>
 8002806:	e08e      	b.n	8002926 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x286>
  __ASM volatile ("cpsie i" : : : "memory");
 8002808:	b662      	cpsie	i
	auto delta = getTimestamp() - m_lastReset;
 800280a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800280c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800280e:	1a80      	subs	r0, r0, r2
 8002810:	4199      	sbcs	r1, r3
	if (delta >= UINT32_MAX) {
 8002812:	2900      	cmp	r1, #0
 8002814:	dc98      	bgt.n	8002748 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xa8>
 8002816:	d100      	bne.n	800281a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x17a>
 8002818:	e0a4      	b.n	8002964 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2c4>
	return delta32 > (microseconds / usPerTick);
 800281a:	f003 fb95 	bl	8005f48 <__aeabi_ui2f>
    if (!heaterAllowed)
 800281e:	4964      	ldr	r1, [pc, #400]	; (80029b0 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x310>)
 8002820:	f7ff f9b2 	bl	8001b88 <__aeabi_fcmpgt>
 8002824:	2800      	cmp	r0, #0
 8002826:	d000      	beq.n	800282a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x18a>
 8002828:	e78e      	b.n	8002748 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xa8>
 800282a:	e776      	b.n	800271a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x7a>
    SetDuty(duty);
 800282c:	0020      	movs	r0, r4
 800282e:	1c31      	adds	r1, r6, #0
 8002830:	4798      	blx	r3
}
 8002832:	e7bb      	b.n	80027ac <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x10c>
            if (m_preheatTimer.hasElapsedSec(m_preheatTimeSec) || sensorTemp > closedLoopTemp)
 8002834:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002836:	f003 fb35 	bl	8005ea4 <__aeabi_i2f>
 800283a:	1c01      	adds	r1, r0, #0
 800283c:	0020      	movs	r0, r4
 800283e:	3048      	adds	r0, #72	; 0x48
 8002840:	f7ff fe2e 	bl	80024a0 <_ZNK5Timer13hasElapsedSecEf>
 8002844:	2800      	cmp	r0, #0
 8002846:	d15d      	bne.n	8002904 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x264>
 8002848:	4649      	mov	r1, r9
 800284a:	4658      	mov	r0, fp
 800284c:	f7ff f99c 	bl	8001b88 <__aeabi_fcmpgt>
 8002850:	2800      	cmp	r0, #0
 8002852:	d157      	bne.n	8002904 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x264>
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 8002854:	62a6      	str	r6, [r4, #40]	; 0x28
 8002856:	2680      	movs	r6, #128	; 0x80
 8002858:	05f6      	lsls	r6, r6, #23
 800285a:	e786      	b.n	800276a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xca>
    float overheatTemp = m_targetTempC + 100;
 800285c:	4955      	ldr	r1, [pc, #340]	; (80029b4 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x314>)
 800285e:	4650      	mov	r0, sl
 8002860:	f002 fca8 	bl	80051b4 <__aeabi_fadd>
 8002864:	1c01      	adds	r1, r0, #0
            if (sensorTemp > overheatTemp)
 8002866:	4658      	mov	r0, fp
 8002868:	f7ff f98e 	bl	8001b88 <__aeabi_fcmpgt>
 800286c:	2800      	cmp	r0, #0
 800286e:	d167      	bne.n	8002940 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2a0>
    float underheatTemp = m_targetTempC - 100;
 8002870:	4950      	ldr	r1, [pc, #320]	; (80029b4 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x314>)
 8002872:	4650      	mov	r0, sl
 8002874:	f003 f956 	bl	8005b24 <__aeabi_fsub>
 8002878:	1c01      	adds	r1, r0, #0
            else if (sensorTemp < underheatTemp)
 800287a:	4658      	mov	r0, fp
 800287c:	f7ff f970 	bl	8001b60 <__aeabi_fcmplt>
 8002880:	2800      	cmp	r0, #0
 8002882:	d166      	bne.n	8002952 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2b2>
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 8002884:	2302      	movs	r3, #2
            return 7.5f - heaterPid.GetOutput(m_targetEsr, sensorEsr);
 8002886:	4642      	mov	r2, r8
 8002888:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 800288a:	62a3      	str	r3, [r4, #40]	; 0x28
            return 7.5f - heaterPid.GetOutput(m_targetEsr, sensorEsr);
 800288c:	1d20      	adds	r0, r4, #4
 800288e:	f7ff fc37 	bl	8002100 <_ZN3Pid9GetOutputEff>
 8002892:	1c01      	adds	r1, r0, #0
 8002894:	4848      	ldr	r0, [pc, #288]	; (80029b8 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x318>)
 8002896:	f003 f945 	bl	8005b24 <__aeabi_fsub>
 800289a:	4948      	ldr	r1, [pc, #288]	; (80029bc <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x31c>)
 800289c:	1c06      	adds	r6, r0, #0
 800289e:	f7ff f969 	bl	8001b74 <__aeabi_fcmple>
 80028a2:	2800      	cmp	r0, #0
 80028a4:	d000      	beq.n	80028a8 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x208>
 80028a6:	e760      	b.n	800276a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xca>
 80028a8:	4e44      	ldr	r6, [pc, #272]	; (80029bc <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x31c>)
            return rampVoltage;
 80028aa:	e75e      	b.n	800276a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xca>
            if (sensorTemp > closedLoopTemp)
 80028ac:	1c01      	adds	r1, r0, #0
 80028ae:	4658      	mov	r0, fp
 80028b0:	f7ff f96a 	bl	8001b88 <__aeabi_fcmpgt>
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d1e5      	bne.n	8002884 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x1e4>
            else if (m_warmupTimer.hasElapsedSec(m_warmupTimeSec))
 80028b8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80028ba:	f003 faf3 	bl	8005ea4 <__aeabi_i2f>
 80028be:	1c01      	adds	r1, r0, #0
 80028c0:	0020      	movs	r0, r4
 80028c2:	3050      	adds	r0, #80	; 0x50
 80028c4:	f7ff fdec 	bl	80024a0 <_ZNK5Timer13hasElapsedSecEf>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d14f      	bne.n	800296c <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2cc>
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 80028cc:	62a6      	str	r6, [r4, #40]	; 0x28
            if (rampVoltage < 12)
 80028ce:	6a26      	ldr	r6, [r4, #32]
 80028d0:	493a      	ldr	r1, [pc, #232]	; (80029bc <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x31c>)
 80028d2:	1c30      	adds	r0, r6, #0
 80028d4:	f7ff f944 	bl	8001b60 <__aeabi_fcmplt>
 80028d8:	2800      	cmp	r0, #0
 80028da:	d005      	beq.n	80028e8 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x248>
                rampVoltage += (rampRateVoltPerSecond / heaterFrequency);
 80028dc:	1c30      	adds	r0, r6, #0
 80028de:	4938      	ldr	r1, [pc, #224]	; (80029c0 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x320>)
 80028e0:	f002 fc68 	bl	80051b4 <__aeabi_fadd>
 80028e4:	1c06      	adds	r6, r0, #0
 80028e6:	6220      	str	r0, [r4, #32]
            return rampVoltage;
 80028e8:	4934      	ldr	r1, [pc, #208]	; (80029bc <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x31c>)
 80028ea:	1c30      	adds	r0, r6, #0
 80028ec:	f7ff f942 	bl	8001b74 <__aeabi_fcmple>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d000      	beq.n	80028f6 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x256>
 80028f4:	e739      	b.n	800276a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xca>
 80028f6:	4e31      	ldr	r6, [pc, #196]	; (80029bc <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x31c>)
 80028f8:	e737      	b.n	800276a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xca>
    float totalEsr = GetESRSupplyR() / (VCC_VOLTS / GetNernstAc() - 1);
 80028fa:	0008      	movs	r0, r1
 80028fc:	4798      	blx	r3
    float sensorTemperature = sampler.GetSensorTemperature();
 80028fe:	682e      	ldr	r6, [r5, #0]
 8002900:	1c01      	adds	r1, r0, #0
 8002902:	e6e2      	b.n	80026ca <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2a>
                m_warmupTimer.reset();
 8002904:	0020      	movs	r0, r4
                rampVoltage = 7;
 8002906:	4b2f      	ldr	r3, [pc, #188]	; (80029c4 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x324>)
                m_warmupTimer.reset();
 8002908:	3050      	adds	r0, #80	; 0x50
                rampVoltage = 7;
 800290a:	6223      	str	r3, [r4, #32]
                m_warmupTimer.reset();
 800290c:	f7ff fd98 	bl	8002440 <_ZN5Timer5resetEv>
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 8002910:	2301      	movs	r3, #1
 8002912:	62a3      	str	r3, [r4, #40]	; 0x28
    switch (state)
 8002914:	e7db      	b.n	80028ce <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x22e>
            m_batteryStableTimer.reset();
 8002916:	0020      	movs	r0, r4
 8002918:	3040      	adds	r0, #64	; 0x40
 800291a:	f7ff fd91 	bl	8002440 <_ZN5Timer5resetEv>
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 800291e:	2304      	movs	r3, #4
 8002920:	2600      	movs	r6, #0
 8002922:	62a3      	str	r3, [r4, #40]	; 0x28
    switch (state)
 8002924:	e721      	b.n	800276a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xca>
  __ASM volatile ("cpsid i" : : : "memory");
 8002926:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8002928:	4662      	mov	r2, ip
 800292a:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x328>)
 800292c:	6453      	str	r3, [r2, #68]	; 0x44
  while (true) {
 800292e:	e7fe      	b.n	800292e <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x28e>
  chDbgAssert(ch.vtlist.laststamp <= stamp, "wrapped");
 8002930:	4282      	cmp	r2, r0
 8002932:	d800      	bhi.n	8002936 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x296>
 8002934:	e75b      	b.n	80027ee <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x14e>
 8002936:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8002938:	4662      	mov	r2, ip
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x32c>)
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
  while (true) {
 800293e:	e7fe      	b.n	800293e <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x29e>
                SetFault(ch, Fault::SensorOverheat);
 8002940:	2234      	movs	r2, #52	; 0x34

static Fault currentFault[AFR_CHANNELS];

void SetFault(int ch, Fault fault)
{
    currentFault[ch] = fault;
 8002942:	2104      	movs	r1, #4
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x330>)
 8002946:	5ca2      	ldrb	r2, [r4, r2]
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 8002948:	2600      	movs	r6, #0
 800294a:	5499      	strb	r1, [r3, r2]
 800294c:	2303      	movs	r3, #3
 800294e:	62a3      	str	r3, [r4, #40]	; 0x28
    switch (state)
 8002950:	e70b      	b.n	800276a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xca>
                SetFault(ch, Fault::SensorUnderheat);
 8002952:	2234      	movs	r2, #52	; 0x34
 8002954:	2105      	movs	r1, #5
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x330>)
 8002958:	5ca2      	ldrb	r2, [r4, r2]
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 800295a:	2600      	movs	r6, #0
 800295c:	5499      	strb	r1, [r3, r2]
 800295e:	2303      	movs	r3, #3
 8002960:	62a3      	str	r3, [r4, #40]	; 0x28
    switch (state)
 8002962:	e702      	b.n	800276a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xca>
	if (delta >= UINT32_MAX) {
 8002964:	1c83      	adds	r3, r0, #2
 8002966:	d800      	bhi.n	800296a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x2ca>
 8002968:	e757      	b.n	800281a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x17a>
 800296a:	e6ed      	b.n	8002748 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xa8>
                SetFault(ch, Fault::SensorDidntHeat);
 800296c:	2234      	movs	r2, #52	; 0x34
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0x330>)
 8002970:	5ca1      	ldrb	r1, [r4, r2]
 8002972:	3a31      	subs	r2, #49	; 0x31
    heaterState = GetNextState(heaterState, heaterAllowState, batteryVoltage, sensorTemperature);
 8002974:	2600      	movs	r6, #0
 8002976:	545a      	strb	r2, [r3, r1]
 8002978:	62a2      	str	r2, [r4, #40]	; 0x28
    switch (state)
 800297a:	e6f6      	b.n	800276a <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow+0xca>
 800297c:	08002261 	.word	0x08002261
 8002980:	080021b1 	.word	0x080021b1
 8002984:	40533333 	.word	0x40533333
 8002988:	46abe000 	.word	0x46abe000
 800298c:	41200000 	.word	0x41200000
 8002990:	41080000 	.word	0x41080000
 8002994:	41180000 	.word	0x41180000
 8002998:	200015e0 	.word	0x200015e0
 800299c:	41f00000 	.word	0x41f00000
 80029a0:	41b80000 	.word	0x41b80000
 80029a4:	08002681 	.word	0x08002681
 80029a8:	200017d8 	.word	0x200017d8
 80029ac:	200017f8 	.word	0x200017f8
 80029b0:	459c4000 	.word	0x459c4000
 80029b4:	42c80000 	.word	0x42c80000
 80029b8:	40f00000 	.word	0x40f00000
 80029bc:	41400000 	.word	0x41400000
 80029c0:	3ca3d70a 	.word	0x3ca3d70a
 80029c4:	40e00000 	.word	0x40e00000
 80029c8:	08005fd8 	.word	0x08005fd8
 80029cc:	08006188 	.word	0x08006188
 80029d0:	20000b14 	.word	0x20000b14
	...

080029e0 <_Z20SetPumpCurrentTargetil.constprop.0>:
        // while warming up
        SetPumpCurrentTarget(ch, 0);
    }
}

void SetPumpCurrentTarget(int ch, int32_t microampere)
 80029e0:	b510      	push	{r4, lr}
 80029e2:	0004      	movs	r4, r0
{
    // Don't allow pump current when the sensor isn't hot
    if (!GetHeaterController(ch).IsRunningClosedLoop())
 80029e4:	4810      	ldr	r0, [pc, #64]	; (8002a28 <_Z20SetPumpCurrentTargetil.constprop.0+0x48>)
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <_Z20SetPumpCurrentTargetil.constprop.0+0x4c>)
 80029e8:	6802      	ldr	r2, [r0, #0]
 80029ea:	6852      	ldr	r2, [r2, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d114      	bne.n	8002a1a <_Z20SetPumpCurrentTargetil.constprop.0+0x3a>
 80029f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d115      	bne.n	8002a22 <_Z20SetPumpCurrentTargetil.constprop.0+0x42>
    state[ch].curIpump = microampere;

    // 47 ohm resistor
    // 0.147 gain
    // effective resistance of 317 ohms
    float volts = -0.000321162f * microampere;
 80029f6:	0020      	movs	r0, r4
 80029f8:	f003 fa54 	bl	8005ea4 <__aeabi_i2f>
 80029fc:	490c      	ldr	r1, [pc, #48]	; (8002a30 <_Z20SetPumpCurrentTargetil.constprop.0+0x50>)
 80029fe:	f002 ff43 	bl	8005888 <__aeabi_fmul>

    // offset by half vcc
    volts += HALF_VCC;
 8002a02:	490c      	ldr	r1, [pc, #48]	; (8002a34 <_Z20SetPumpCurrentTargetil.constprop.0+0x54>)
 8002a04:	f002 fbd6 	bl	80051b4 <__aeabi_fadd>
    pumpDac.SetDuty(pumpDacPwmCh[ch], volts / VCC_VOLTS);
 8002a08:	490b      	ldr	r1, [pc, #44]	; (8002a38 <_Z20SetPumpCurrentTargetil.constprop.0+0x58>)
 8002a0a:	f002 ff3d 	bl	8005888 <__aeabi_fmul>
 8002a0e:	1c02      	adds	r2, r0, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	480a      	ldr	r0, [pc, #40]	; (8002a3c <_Z20SetPumpCurrentTargetil.constprop.0+0x5c>)
 8002a14:	f7ff fddc 	bl	80025d0 <_ZN3Pwm7SetDutyEif>

    SetPumpVoltage(ch, volts);
}
 8002a18:	bd10      	pop	{r4, pc}
    if (!GetHeaterController(ch).IsRunningClosedLoop())
 8002a1a:	f7ff fcf9 	bl	8002410 <_ZNK20HeaterControllerBase19IsRunningClosedLoopEv>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d1e9      	bne.n	80029f6 <_Z20SetPumpCurrentTargetil.constprop.0+0x16>
 8002a22:	22fc      	movs	r2, #252	; 0xfc
 8002a24:	0592      	lsls	r2, r2, #22
 8002a26:	e7f3      	b.n	8002a10 <_Z20SetPumpCurrentTargetil.constprop.0+0x30>
 8002a28:	20001930 	.word	0x20001930
 8002a2c:	08002411 	.word	0x08002411
 8002a30:	b9a861a2 	.word	0xb9a861a2
 8002a34:	3fd33333 	.word	0x3fd33333
 8002a38:	3e9b26ca 	.word	0x3e9b26ca
 8002a3c:	2000170c 	.word	0x2000170c

08002a40 <chThdDequeueAllI.constprop.0>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002a40:	6803      	ldr	r3, [r0, #0]
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8002a42:	b570      	push	{r4, r5, r6, lr}

  while (queue_notempty(tqp)) {
 8002a44:	4298      	cmp	r0, r3
 8002a46:	d017      	beq.n	8002a78 <chThdDequeueAllI.constprop.0+0x38>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002a48:	2500      	movs	r5, #0
 8002a4a:	4e0e      	ldr	r6, [pc, #56]	; (8002a84 <chThdDequeueAllI.constprop.0+0x44>)
  tqp->next             = tp->queue.next;
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002a50:	6050      	str	r0, [r2, #4]
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8002a52:	7d1a      	ldrb	r2, [r3, #20]
 8002a54:	2a04      	cmp	r2, #4
 8002a56:	d110      	bne.n	8002a7a <chThdDequeueAllI.constprop.0+0x3a>
  cp = (thread_t *)&oip->rlist.queue;
 8002a58:	0032      	movs	r2, r6
  } while (cp->prio >= tp->prio);
 8002a5a:	689c      	ldr	r4, [r3, #8]
  tp->u.rdymsg = msg;
 8002a5c:	619d      	str	r5, [r3, #24]
  tp->state = CH_STATE_READY;
 8002a5e:	751d      	strb	r5, [r3, #20]
    cp = cp->queue.next;
 8002a60:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8002a62:	6891      	ldr	r1, [r2, #8]
 8002a64:	42a1      	cmp	r1, r4
 8002a66:	d2fb      	bcs.n	8002a60 <chThdDequeueAllI.constprop.0+0x20>
  tp->queue.prev             = cp->queue.prev;
 8002a68:	6851      	ldr	r1, [r2, #4]
  tp->queue.next             = cp;
 8002a6a:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 8002a6c:	6059      	str	r1, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8002a6e:	600b      	str	r3, [r1, #0]
  cp->queue.prev             = tp;
 8002a70:	6053      	str	r3, [r2, #4]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002a72:	6803      	ldr	r3, [r0, #0]
 8002a74:	4298      	cmp	r0, r3
 8002a76:	d1e9      	bne.n	8002a4c <chThdDequeueAllI.constprop.0+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8002a78:	bd70      	pop	{r4, r5, r6, pc}
 8002a7a:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8002a7c:	4b02      	ldr	r3, [pc, #8]	; (8002a88 <chThdDequeueAllI.constprop.0+0x48>)
 8002a7e:	6473      	str	r3, [r6, #68]	; 0x44
 8002a80:	e7fe      	b.n	8002a80 <chThdDequeueAllI.constprop.0+0x40>
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	200017f8 	.word	0x200017f8
 8002a88:	080061b0 	.word	0x080061b0
 8002a8c:	00000000 	.word	0x00000000

08002a90 <chVTDoSetI.constprop.0>:
  vtp->func = vtfunc;
 8002a90:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <chVTDoSetI.constprop.0+0xe4>)
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
 8002a92:	b5f0      	push	{r4, r5, r6, r7, lr}
  vtp->func = vtfunc;
 8002a94:	60c3      	str	r3, [r0, #12]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	05db      	lsls	r3, r3, #23
 8002a9a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
  vtp->par = par;
 8002a9c:	6102      	str	r2, [r0, #16]
 8002a9e:	2904      	cmp	r1, #4
 8002aa0:	d200      	bcs.n	8002aa4 <chVTDoSetI.constprop.0+0x14>
 8002aa2:	2104      	movs	r1, #4
    if (is_vtlist_empty(vtlp)) {
 8002aa4:	4d34      	ldr	r5, [pc, #208]	; (8002b78 <chVTDoSetI.constprop.0+0xe8>)
 8002aa6:	002a      	movs	r2, r5
 8002aa8:	692b      	ldr	r3, [r5, #16]
 8002aaa:	3210      	adds	r2, #16
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d042      	beq.n	8002b36 <chVTDoSetI.constprop.0+0xa6>
    deltanow = chTimeDiffX(vtlp->lasttime, now);
 8002ab0:	69ea      	ldr	r2, [r5, #28]
  return (sysinterval_t)((systime_t)(end - start));
 8002ab2:	1abc      	subs	r4, r7, r2
 8002ab4:	4694      	mov	ip, r2
    delta    = deltanow + delay;
 8002ab6:	190a      	adds	r2, r1, r4
    if (delta < deltanow) {
 8002ab8:	4294      	cmp	r4, r2
 8002aba:	d81c      	bhi.n	8002af6 <chVTDoSetI.constprop.0+0x66>
    else if (delta < vtlp->next->delta) {
 8002abc:	689c      	ldr	r4, [r3, #8]
 8002abe:	42a2      	cmp	r2, r4
 8002ac0:	d330      	bcc.n	8002b24 <chVTDoSetI.constprop.0+0x94>
  while (p->delta < delta) {
 8002ac2:	42a2      	cmp	r2, r4
 8002ac4:	d906      	bls.n	8002ad4 <chVTDoSetI.constprop.0+0x44>
    chDbgAssert(p != vtp, "timer already armed");
 8002ac6:	4298      	cmp	r0, r3
 8002ac8:	d011      	beq.n	8002aee <chVTDoSetI.constprop.0+0x5e>
    p = p->next;
 8002aca:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8002acc:	1b12      	subs	r2, r2, r4
  while (p->delta < delta) {
 8002ace:	689c      	ldr	r4, [r3, #8]
 8002ad0:	42a2      	cmp	r2, r4
 8002ad2:	d8f8      	bhi.n	8002ac6 <chVTDoSetI.constprop.0+0x36>
  vtp->prev = vtp->next->prev;
 8002ad4:	6859      	ldr	r1, [r3, #4]
  vtp->next = p;
 8002ad6:	6003      	str	r3, [r0, #0]
  vtp->prev = vtp->next->prev;
 8002ad8:	6041      	str	r1, [r0, #4]
  vtp->prev->next = vtp;
 8002ada:	6008      	str	r0, [r1, #0]
  p->prev = vtp;
 8002adc:	6058      	str	r0, [r3, #4]
  vtp->delta = delta;
 8002ade:	6082      	str	r2, [r0, #8]
  p->delta -= delta;
 8002ae0:	6899      	ldr	r1, [r3, #8]
 8002ae2:	1a8a      	subs	r2, r1, r2
 8002ae4:	609a      	str	r2, [r3, #8]
  vtlp->delta = (sysinterval_t)-1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	425b      	negs	r3, r3
 8002aea:	61ab      	str	r3, [r5, #24]
}
 8002aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aee:	b672      	cpsid	i
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <chVTDoSetI.constprop.0+0xec>)
 8002af2:	646b      	str	r3, [r5, #68]	; 0x44
 8002af4:	e7fe      	b.n	8002af4 <chVTDoSetI.constprop.0+0x64>
  while (vtp->delta < deltanow) {
 8002af6:	689e      	ldr	r6, [r3, #8]
 8002af8:	42b4      	cmp	r4, r6
 8002afa:	d933      	bls.n	8002b64 <chVTDoSetI.constprop.0+0xd4>
 8002afc:	001a      	movs	r2, r3
    vtp->delta = (sysinterval_t)0;
 8002afe:	2700      	movs	r7, #0
 8002b00:	6097      	str	r7, [r2, #8]
    vtp        = vtp->next;
 8002b02:	6812      	ldr	r2, [r2, #0]
    deltanow  -= vtp->delta;
 8002b04:	1ba4      	subs	r4, r4, r6
  while (vtp->delta < deltanow) {
 8002b06:	6896      	ldr	r6, [r2, #8]
 8002b08:	42a6      	cmp	r6, r4
 8002b0a:	d3f9      	bcc.n	8002b00 <chVTDoSetI.constprop.0+0x70>
  vtlp->lasttime = vtlp->lasttime + deltanow;
 8002b0c:	4667      	mov	r7, ip
 8002b0e:	193f      	adds	r7, r7, r4
 8002b10:	61ef      	str	r7, [r5, #28]
  if (is_timer(vtlp, vtp)) {
 8002b12:	002f      	movs	r7, r5
 8002b14:	3710      	adds	r7, #16
 8002b16:	42ba      	cmp	r2, r7
 8002b18:	d001      	beq.n	8002b1e <chVTDoSetI.constprop.0+0x8e>
    vtp->delta -= deltanow;
 8002b1a:	1b36      	subs	r6, r6, r4
 8002b1c:	6096      	str	r6, [r2, #8]
      delta -= deltanow;
 8002b1e:	000a      	movs	r2, r1
  while (p->delta < delta) {
 8002b20:	689c      	ldr	r4, [r3, #8]
 8002b22:	e7ce      	b.n	8002ac2 <chVTDoSetI.constprop.0+0x32>
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8002b24:	2680      	movs	r6, #128	; 0x80
 8002b26:	05f6      	lsls	r6, r6, #23
 8002b28:	68f1      	ldr	r1, [r6, #12]
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8002b2a:	0789      	lsls	r1, r1, #30
 8002b2c:	d516      	bpl.n	8002b5c <chVTDoSetI.constprop.0+0xcc>
  return systime + (systime_t)interval;
 8002b2e:	4661      	mov	r1, ip
 8002b30:	1889      	adds	r1, r1, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002b32:	6371      	str	r1, [r6, #52]	; 0x34
}
 8002b34:	e7c5      	b.n	8002ac2 <chVTDoSetI.constprop.0+0x32>
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8002b36:	2202      	movs	r2, #2
      vtlp->lasttime = now;
 8002b38:	61ef      	str	r7, [r5, #28]
      vtlp->next = vtp;
 8002b3a:	6128      	str	r0, [r5, #16]
      vtlp->prev = vtp;
 8002b3c:	6168      	str	r0, [r5, #20]
      vtp->next = (virtual_timer_t *)vtlp;
 8002b3e:	6003      	str	r3, [r0, #0]
      vtp->prev = (virtual_timer_t *)vtlp;
 8002b40:	6043      	str	r3, [r0, #4]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	0014      	movs	r4, r2
      vtp->delta = delay;
 8002b46:	6081      	str	r1, [r0, #8]
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	68d8      	ldr	r0, [r3, #12]
 8002b4c:	4004      	ands	r4, r0
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8002b4e:	4202      	tst	r2, r0
 8002b50:	d10b      	bne.n	8002b6a <chVTDoSetI.constprop.0+0xda>
 8002b52:	19cf      	adds	r7, r1, r7
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002b54:	635f      	str	r7, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8002b56:	611c      	str	r4, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002b58:	60da      	str	r2, [r3, #12]
}
 8002b5a:	e7c7      	b.n	8002aec <chVTDoSetI.constprop.0+0x5c>
 8002b5c:	b672      	cpsid	i
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <chVTDoSetI.constprop.0+0xf0>)
 8002b60:	646b      	str	r3, [r5, #68]	; 0x44
 8002b62:	e7fe      	b.n	8002b62 <chVTDoSetI.constprop.0+0xd2>
  vtlp->lasttime = vtlp->lasttime + deltanow;
 8002b64:	001a      	movs	r2, r3
 8002b66:	61ef      	str	r7, [r5, #28]
 8002b68:	e7d7      	b.n	8002b1a <chVTDoSetI.constprop.0+0x8a>
 8002b6a:	b672      	cpsid	i
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <chVTDoSetI.constprop.0+0xf4>)
 8002b6e:	646b      	str	r3, [r5, #68]	; 0x44
 8002b70:	e7fe      	b.n	8002b70 <chVTDoSetI.constprop.0+0xe0>
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	08001ca1 	.word	0x08001ca1
 8002b78:	200017f8 	.word	0x200017f8
 8002b7c:	080062a8 	.word	0x080062a8
 8002b80:	080061e4 	.word	0x080061e4
 8002b84:	08006250 	.word	0x08006250
	...

08002b90 <adc_lld_vreg_on.constprop.0>:
 *
 * @param[in] adc       pointer to the ADC registers block
 */
NOINLINE static void adc_lld_vreg_on(ADC_TypeDef *adc) {

  osalDbgAssert(adc->CR == 0, "invalid register state");
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <adc_lld_vreg_on.constprop.0+0x14>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d100      	bne.n	8002b9a <adc_lld_vreg_on.constprop.0+0xa>
  do {
    loop--;
  } while (loop > 0);
#else
#endif
}
 8002b98:	4770      	bx	lr
 8002b9a:	b672      	cpsid	i
 8002b9c:	4b02      	ldr	r3, [pc, #8]	; (8002ba8 <adc_lld_vreg_on.constprop.0+0x18>)
 8002b9e:	4a03      	ldr	r2, [pc, #12]	; (8002bac <adc_lld_vreg_on.constprop.0+0x1c>)
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ba2:	e7fe      	b.n	8002ba2 <adc_lld_vreg_on.constprop.0+0x12>
 8002ba4:	40012400 	.word	0x40012400
 8002ba8:	200017f8 	.word	0x200017f8
 8002bac:	08006220 	.word	0x08006220

08002bb0 <adc_lld_stop_conversion.isra.0>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8002bb0:	b510      	push	{r4, lr}

  dmaStreamDisable(adcp->dmastp);
 8002bb2:	240f      	movs	r4, #15
 8002bb4:	684a      	ldr	r2, [r1, #4]
 8002bb6:	6813      	ldr	r3, [r2, #0]
 8002bb8:	43a3      	bics	r3, r4
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	230e      	movs	r3, #14
 8002bbe:	680a      	ldr	r2, [r1, #0]
 8002bc0:	7b49      	ldrb	r1, [r1, #13]
 8002bc2:	408b      	lsls	r3, r1
 8002bc4:	6053      	str	r3, [r2, #4]
  if (adc->CR & ADC_CR_ADSTART) {
 8002bc6:	6883      	ldr	r3, [r0, #8]
 8002bc8:	075b      	lsls	r3, r3, #29
 8002bca:	d509      	bpl.n	8002be0 <adc_lld_stop_conversion.isra.0+0x30>
    adc->CR |= ADC_CR_ADSTP;
 8002bcc:	2210      	movs	r2, #16
 8002bce:	6883      	ldr	r3, [r0, #8]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	6083      	str	r3, [r0, #8]
    while (adc->CR & ADC_CR_ADSTP)
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	6883      	ldr	r3, [r0, #8]
 8002bd8:	4019      	ands	r1, r3
 8002bda:	421a      	tst	r2, r3
 8002bdc:	d1fa      	bne.n	8002bd4 <adc_lld_stop_conversion.isra.0+0x24>
    adc->IER = 0;
 8002bde:	6041      	str	r1, [r0, #4]
  adc_lld_stop_adc(adcp->adc);
}
 8002be0:	bd10      	pop	{r4, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
	...

08002bf0 <adc_lld_serve_rx_interrupt>:
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	0004      	movs	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002bf4:	070b      	lsls	r3, r1, #28
 8002bf6:	d411      	bmi.n	8002c1c <adc_lld_serve_rx_interrupt+0x2c>
    if (adcp->grpp != NULL) {
 8002bf8:	6905      	ldr	r5, [r0, #16]
 8002bfa:	2d00      	cmp	r5, #0
 8002bfc:	d00d      	beq.n	8002c1a <adc_lld_serve_rx_interrupt+0x2a>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8002bfe:	078b      	lsls	r3, r1, #30
 8002c00:	d525      	bpl.n	8002c4e <adc_lld_serve_rx_interrupt+0x5e>
        _adc_isr_full_code(adcp);
 8002c02:	782b      	ldrb	r3, [r5, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d02e      	beq.n	8002c66 <adc_lld_serve_rx_interrupt+0x76>
 8002c08:	686b      	ldr	r3, [r5, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <adc_lld_serve_rx_interrupt+0x2a>
 8002c0e:	2204      	movs	r2, #4
 8002c10:	7002      	strb	r2, [r0, #0]
 8002c12:	4798      	blx	r3
 8002c14:	7823      	ldrb	r3, [r4, #0]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d03b      	beq.n	8002c92 <adc_lld_serve_rx_interrupt+0xa2>
}
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8002c1c:	69c1      	ldr	r1, [r0, #28]
 8002c1e:	6980      	ldr	r0, [r0, #24]
 8002c20:	f7ff ffc6 	bl	8002bb0 <adc_lld_stop_conversion.isra.0>
 8002c24:	6923      	ldr	r3, [r4, #16]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d017      	beq.n	8002c5c <adc_lld_serve_rx_interrupt+0x6c>
 8002c2c:	2205      	movs	r2, #5
 8002c2e:	2100      	movs	r1, #0
 8002c30:	0020      	movs	r0, r4
 8002c32:	7022      	strb	r2, [r4, #0]
 8002c34:	4798      	blx	r3
 8002c36:	7823      	ldrb	r3, [r4, #0]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d00f      	beq.n	8002c5c <adc_lld_serve_rx_interrupt+0x6c>
 8002c3c:	b672      	cpsid	i
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8002c3e:	2101      	movs	r1, #1
 8002c40:	0020      	movs	r0, r4
 8002c42:	4249      	negs	r1, r1
 8002c44:	3014      	adds	r0, #20
 8002c46:	f7ff f85b 	bl	8001d00 <chThdResumeI>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c4a:	b662      	cpsie	i
}
 8002c4c:	e7e5      	b.n	8002c1a <adc_lld_serve_rx_interrupt+0x2a>
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8002c4e:	0749      	lsls	r1, r1, #29
 8002c50:	d5e3      	bpl.n	8002c1a <adc_lld_serve_rx_interrupt+0x2a>
        _adc_isr_half_code(adcp);
 8002c52:	686b      	ldr	r3, [r5, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0e0      	beq.n	8002c1a <adc_lld_serve_rx_interrupt+0x2a>
 8002c58:	4798      	blx	r3
}
 8002c5a:	e7de      	b.n	8002c1a <adc_lld_serve_rx_interrupt+0x2a>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	7023      	strb	r3, [r4, #0]
 8002c60:	2300      	movs	r3, #0
 8002c62:	6123      	str	r3, [r4, #16]
 8002c64:	e7ea      	b.n	8002c3c <adc_lld_serve_rx_interrupt+0x4c>
        _adc_isr_full_code(adcp);
 8002c66:	69c1      	ldr	r1, [r0, #28]
 8002c68:	6980      	ldr	r0, [r0, #24]
 8002c6a:	f7ff ffa1 	bl	8002bb0 <adc_lld_stop_conversion.isra.0>
 8002c6e:	686b      	ldr	r3, [r5, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d011      	beq.n	8002c98 <adc_lld_serve_rx_interrupt+0xa8>
 8002c74:	2204      	movs	r2, #4
 8002c76:	0020      	movs	r0, r4
 8002c78:	7022      	strb	r2, [r4, #0]
 8002c7a:	4798      	blx	r3
 8002c7c:	7823      	ldrb	r3, [r4, #0]
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d00a      	beq.n	8002c98 <adc_lld_serve_rx_interrupt+0xa8>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c82:	b672      	cpsid	i
 8002c84:	0020      	movs	r0, r4
  chThdResumeI(trp, msg);
 8002c86:	2100      	movs	r1, #0
 8002c88:	3014      	adds	r0, #20
 8002c8a:	f7ff f839 	bl	8001d00 <chThdResumeI>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c8e:	b662      	cpsie	i
}
 8002c90:	e7c3      	b.n	8002c1a <adc_lld_serve_rx_interrupt+0x2a>
 8002c92:	3b01      	subs	r3, #1
 8002c94:	7023      	strb	r3, [r4, #0]
 8002c96:	e7c0      	b.n	8002c1a <adc_lld_serve_rx_interrupt+0x2a>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	7023      	strb	r3, [r4, #0]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6123      	str	r3, [r4, #16]
 8002ca0:	e7ef      	b.n	8002c82 <adc_lld_serve_rx_interrupt+0x92>
 8002ca2:	46c0      	nop			; (mov r8, r8)
	...

08002cb0 <chSchGoSleepS>:
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  os_instance_t *oip = currcore;
  thread_t *otp = __sch_get_currthread(oip);
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <chSchGoSleepS+0x30>)
void chSchGoSleepS(tstate_t newstate) {
 8002cb2:	b510      	push	{r4, lr}
  thread_t *otp = __sch_get_currthread(oip);
 8002cb4:	68d9      	ldr	r1, [r3, #12]
  thread_t *ntp;

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8002cb6:	7508      	strb	r0, [r1, #20]
  thread_t *tp = tqp->next;
 8002cb8:	6818      	ldr	r0, [r3, #0]
  tqp->next             = tp->queue.next;
 8002cba:	6802      	ldr	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002cbc:	6053      	str	r3, [r2, #4]
  tqp->next             = tp->queue.next;
 8002cbe:	601a      	str	r2, [r3, #0]
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = queue_fifo_remove(&oip->rlist.queue);
  ntp->state = CH_STATE_CURRENT;
 8002cc0:	2201      	movs	r2, #1
  __sch_set_currthread(oip, ntp);
 8002cc2:	60d8      	str	r0, [r3, #12]
  ntp->state = CH_STATE_CURRENT;
 8002cc4:	7502      	strb	r2, [r0, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002cc6:	f3ef 8209 	mrs	r2, PSP
  if (ntp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8002cca:	690c      	ldr	r4, [r1, #16]
 8002ccc:	3a24      	subs	r2, #36	; 0x24
 8002cce:	4294      	cmp	r4, r2
 8002cd0:	d802      	bhi.n	8002cd8 <chSchGoSleepS+0x28>
 8002cd2:	f7fe fe69 	bl	80019a8 <__port_switch>
}
 8002cd6:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd8:	b672      	cpsid	i
 8002cda:	4a02      	ldr	r2, [pc, #8]	; (8002ce4 <chSchGoSleepS+0x34>)
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
  while (true) {
 8002cde:	e7fe      	b.n	8002cde <chSchGoSleepS+0x2e>
 8002ce0:	200017f8 	.word	0x200017f8
 8002ce4:	08005fe4 	.word	0x08005fe4
	...

08002cf0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	0001      	movs	r1, r0
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	b672      	cpsid	i
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
  thread_t *tp = __sch_get_currthread(currcore);
 8002cf8:	4c0e      	ldr	r4, [pc, #56]	; (8002d34 <chThdSleep+0x44>)
  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8002cfa:	a801      	add	r0, sp, #4
 8002cfc:	68e2      	ldr	r2, [r4, #12]
 8002cfe:	f7ff fec7 	bl	8002a90 <chVTDoSetI.constprop.0>
    chSchGoSleepS(newstate);
 8002d02:	2008      	movs	r0, #8
 8002d04:	f7ff ffd4 	bl	8002cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8002d08:	9b04      	ldr	r3, [sp, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <chThdSleep+0x24>
      chVTDoResetI(&vt);
 8002d0e:	a801      	add	r0, sp, #4
 8002d10:	f7fe ff6e 	bl	8001bf0 <chVTDoResetI>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	42a3      	cmp	r3, r4
 8002d18:	d004      	beq.n	8002d24 <chThdSleep+0x34>
 8002d1a:	68e2      	ldr	r2, [r4, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	6892      	ldr	r2, [r2, #8]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d302      	bcc.n	8002d2a <chThdSleep+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8002d24:	b662      	cpsie	i
}
 8002d26:	b006      	add	sp, #24
 8002d28:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8002d2a:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <chThdSleep+0x48>)
 8002d2e:	6463      	str	r3, [r4, #68]	; 0x44
  while (true) {
 8002d30:	e7fe      	b.n	8002d30 <chThdSleep+0x40>
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	200017f8 	.word	0x200017f8
 8002d38:	08006244 	.word	0x08006244
 8002d3c:	00000000 	.word	0x00000000

08002d40 <canTransmitTimeout.constprop.0.isra.0>:
 * @retval MSG_TIMEOUT  The operation has timed out.
 * @retval MSG_RESET    The driver has been stopped while waiting.
 *
 * @api
 */
msg_t canTransmitTimeout(CANDriver *canp,
 8002d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d42:	464f      	mov	r7, r9
 8002d44:	4646      	mov	r6, r8
 8002d46:	46d6      	mov	lr, sl
 8002d48:	b5c0      	push	{r6, r7, lr}
 8002d4a:	4681      	mov	r9, r0
 8002d4c:	000e      	movs	r6, r1
 8002d4e:	b086      	sub	sp, #24
 8002d50:	b672      	cpsid	i

  osalDbgCheck((canp != NULL) && (ctfp != NULL) &&
               (mailbox <= (canmbx_t)CAN_TX_MAILBOXES));

  osalSysLock();
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
 8002d52:	4d4d      	ldr	r5, [pc, #308]	; (8002e88 <canTransmitTimeout.constprop.0.isra.0+0x148>)
 8002d54:	782b      	ldrb	r3, [r5, #0]
 8002d56:	1f1a      	subs	r2, r3, #4
 8002d58:	2a01      	cmp	r2, #1
 8002d5a:	d83b      	bhi.n	8002dd4 <canTransmitTimeout.constprop.0.isra.0+0x94>
 */
bool can_lld_is_tx_empty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
  case CAN_ANY_MAILBOX:
    return (canp->can->TSR & CAN_TSR_TME) != 0;
 8002d5c:	22e0      	movs	r2, #224	; 0xe0
 8002d5e:	0552      	lsls	r2, r2, #21
 8002d60:	4692      	mov	sl, r2
  tp->queue.next             = (thread_t *)tqp;
 8002d62:	2208      	movs	r2, #8
 8002d64:	4690      	mov	r8, r2
 8002d66:	4f49      	ldr	r7, [pc, #292]	; (8002e8c <canTransmitTimeout.constprop.0.isra.0+0x14c>)
 8002d68:	44a8      	add	r8, r5
 8002d6a:	e011      	b.n	8002d90 <canTransmitTimeout.constprop.0.isra.0+0x50>
    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8002d6c:	0022      	movs	r2, r4
 8002d6e:	0031      	movs	r1, r6
 8002d70:	a801      	add	r0, sp, #4
 8002d72:	f7ff fe8d 	bl	8002a90 <chVTDoSetI.constprop.0>
    chSchGoSleepS(newstate);
 8002d76:	2004      	movs	r0, #4
 8002d78:	f7ff ff9a 	bl	8002cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8002d7c:	9b04      	ldr	r3, [sp, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <canTransmitTimeout.constprop.0.isra.0+0x48>
      chVTDoResetI(&vt);
 8002d82:	a801      	add	r0, sp, #4
 8002d84:	f7fe ff34 	bl	8001bf0 <chVTDoResetI>

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
  /*lint -restore*/
   msg_t msg = osalThreadEnqueueTimeoutS(&canp->txqueue, timeout);
    if (msg != MSG_OK) {
 8002d88:	69a3      	ldr	r3, [r4, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d116      	bne.n	8002dbc <canTransmitTimeout.constprop.0.isra.0+0x7c>
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
 8002d8e:	782b      	ldrb	r3, [r5, #0]
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d004      	beq.n	8002d9e <canTransmitTimeout.constprop.0.isra.0+0x5e>
 8002d94:	4651      	mov	r1, sl
 8002d96:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	420a      	tst	r2, r1
 8002d9c:	d14d      	bne.n	8002e3a <canTransmitTimeout.constprop.0.isra.0+0xfa>
 8002d9e:	4643      	mov	r3, r8
  return __sch_get_currthread(currcore);
 8002da0:	68fc      	ldr	r4, [r7, #12]
 8002da2:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = tqp->prev;
 8002da4:	68eb      	ldr	r3, [r5, #12]
 8002da6:	6063      	str	r3, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8002da8:	601c      	str	r4, [r3, #0]
  tqp->prev                  = tp;
 8002daa:	60ec      	str	r4, [r5, #12]
  if (TIME_INFINITE != timeout) {
 8002dac:	1c73      	adds	r3, r6, #1
 8002dae:	d1dd      	bne.n	8002d6c <canTransmitTimeout.constprop.0.isra.0+0x2c>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8002db0:	2004      	movs	r0, #4
 8002db2:	f7ff ff7d 	bl	8002cb0 <chSchGoSleepS>
    if (msg != MSG_OK) {
 8002db6:	69a3      	ldr	r3, [r4, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0e8      	beq.n	8002d8e <canTransmitTimeout.constprop.0.isra.0+0x4e>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	42bb      	cmp	r3, r7
 8002dc0:	d034      	beq.n	8002e2c <canTransmitTimeout.constprop.0.isra.0+0xec>
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	6892      	ldr	r2, [r2, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d22f      	bcs.n	8002e2c <canTransmitTimeout.constprop.0.isra.0+0xec>
 8002dcc:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8002dce:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <canTransmitTimeout.constprop.0.isra.0+0x150>)
 8002dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd2:	e7fe      	b.n	8002dd2 <canTransmitTimeout.constprop.0.isra.0+0x92>
 8002dd4:	b672      	cpsid	i
 8002dd6:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <canTransmitTimeout.constprop.0.isra.0+0x14c>)
 8002dd8:	4a2e      	ldr	r2, [pc, #184]	; (8002e94 <canTransmitTimeout.constprop.0.isra.0+0x154>)
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44
 8002ddc:	e7fe      	b.n	8002ddc <canTransmitTimeout.constprop.0.isra.0+0x9c>
  /* Pointer to a free transmission mailbox.*/
  switch (mailbox) {
  case CAN_ANY_MAILBOX:
    if ((DBGMCU->IDCODE >> 16) == 0x1001) {
      /* real STM32 */
      tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	0192      	lsls	r2, r2, #6
 8002de2:	0f92      	lsrs	r2, r2, #30
 8002de4:	3218      	adds	r2, #24
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	189b      	adds	r3, r3, r2
  default:
    return;
  }

  /* Preparing the message.*/
  if (ctfp->IDE)
 8002dea:	464a      	mov	r2, r9
 8002dec:	7811      	ldrb	r1, [r2, #0]
 8002dee:	068a      	lsls	r2, r1, #26
 8002df0:	d536      	bpl.n	8002e60 <canTransmitTimeout.constprop.0.isra.0+0x120>
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 8002df2:	464a      	mov	r2, r9
 8002df4:	06c8      	lsls	r0, r1, #27
 8002df6:	6852      	ldr	r2, [r2, #4]
 8002df8:	0fc0      	lsrs	r0, r0, #31
 8002dfa:	0040      	lsls	r0, r0, #1
 8002dfc:	00d2      	lsls	r2, r2, #3
 8002dfe:	4302      	orrs	r2, r0
 8002e00:	2004      	movs	r0, #4
 8002e02:	4302      	orrs	r2, r0
          CAN_TI0R_IDE;
  else
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
  tmbp->TDTR = ctfp->DLC;
 8002e04:	0709      	lsls	r1, r1, #28
 8002e06:	0f09      	lsrs	r1, r1, #28
 8002e08:	6059      	str	r1, [r3, #4]
  tmbp->TDLR = ctfp->data32[0];
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	6889      	ldr	r1, [r1, #8]
 8002e0e:	6099      	str	r1, [r3, #8]
  tmbp->TDHR = ctfp->data32[1];
 8002e10:	4649      	mov	r1, r9
 8002e12:	68c9      	ldr	r1, [r1, #12]
 8002e14:	60d9      	str	r1, [r3, #12]
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 8002e16:	2101      	movs	r1, #1
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	42bb      	cmp	r3, r7
 8002e20:	d004      	beq.n	8002e2c <canTransmitTimeout.constprop.0.isra.0+0xec>
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d325      	bcc.n	8002e78 <canTransmitTimeout.constprop.0.isra.0+0x138>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e2c:	b662      	cpsie	i
    }
  }
  can_lld_transmit(canp, mailbox, ctfp);
  osalSysUnlock();
  return MSG_OK;
}
 8002e2e:	b006      	add	sp, #24
 8002e30:	bce0      	pop	{r5, r6, r7}
 8002e32:	46ba      	mov	sl, r7
 8002e34:	46b1      	mov	r9, r6
 8002e36:	46a8      	mov	r8, r5
 8002e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((DBGMCU->IDCODE >> 16) == 0x1001) {
 8002e3a:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <canTransmitTimeout.constprop.0.isra.0+0x158>)
 8002e3c:	4917      	ldr	r1, [pc, #92]	; (8002e9c <canTransmitTimeout.constprop.0.isra.0+0x15c>)
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	0c12      	lsrs	r2, r2, #16
 8002e42:	428a      	cmp	r2, r1
 8002e44:	d0cb      	beq.n	8002dde <canTransmitTimeout.constprop.0.isra.0+0x9e>
      if ((canp->can->TSR & CAN_TSR_TME0) == CAN_TSR_TME0)
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	0152      	lsls	r2, r2, #5
 8002e4a:	d411      	bmi.n	8002e70 <canTransmitTimeout.constprop.0.isra.0+0x130>
      else if ((canp->can->TSR & CAN_TSR_TME1) == CAN_TSR_TME1)
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	d416      	bmi.n	8002e80 <canTransmitTimeout.constprop.0.isra.0+0x140>
      else if ((canp->can->TSR & CAN_TSR_TME2) == CAN_TSR_TME2)
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	00d2      	lsls	r2, r2, #3
 8002e56:	d5e1      	bpl.n	8002e1c <canTransmitTimeout.constprop.0.isra.0+0xdc>
 8002e58:	22d0      	movs	r2, #208	; 0xd0
 8002e5a:	0052      	lsls	r2, r2, #1
      tmbp = &canp->can->sTxMailBox[n];
 8002e5c:	189b      	adds	r3, r3, r2
 8002e5e:	e7c4      	b.n	8002dea <canTransmitTimeout.constprop.0.isra.0+0xaa>
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
 8002e60:	464a      	mov	r2, r9
 8002e62:	06c8      	lsls	r0, r1, #27
 8002e64:	8892      	ldrh	r2, [r2, #4]
 8002e66:	0fc0      	lsrs	r0, r0, #31
 8002e68:	0552      	lsls	r2, r2, #21
 8002e6a:	0040      	lsls	r0, r0, #1
 8002e6c:	4302      	orrs	r2, r0
 8002e6e:	e7c9      	b.n	8002e04 <canTransmitTimeout.constprop.0.isra.0+0xc4>
 8002e70:	22c0      	movs	r2, #192	; 0xc0
 8002e72:	0052      	lsls	r2, r2, #1
      tmbp = &canp->can->sTxMailBox[n];
 8002e74:	189b      	adds	r3, r3, r2
 8002e76:	e7b8      	b.n	8002dea <canTransmitTimeout.constprop.0.isra.0+0xaa>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e78:	b672      	cpsid	i
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <canTransmitTimeout.constprop.0.isra.0+0x150>)
 8002e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7e:	e7fe      	b.n	8002e7e <canTransmitTimeout.constprop.0.isra.0+0x13e>
 8002e80:	22c8      	movs	r2, #200	; 0xc8
 8002e82:	0052      	lsls	r2, r2, #1
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	e7b0      	b.n	8002dea <canTransmitTimeout.constprop.0.isra.0+0xaa>
 8002e88:	20000a2c 	.word	0x20000a2c
 8002e8c:	200017f8 	.word	0x200017f8
 8002e90:	080062f0 	.word	0x080062f0
 8002e94:	080061f0 	.word	0x080061f0
 8002e98:	40015800 	.word	0x40015800
 8002e9c:	00001001 	.word	0x00001001

08002ea0 <chThdCreateStatic.constprop.0.isra.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	0015      	movs	r5, r2
 8002ea4:	b672      	cpsid	i
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002ea6:	000a      	movs	r2, r1
 8002ea8:	3a20      	subs	r2, #32
 8002eaa:	1882      	adds	r2, r0, r2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002eac:	0011      	movs	r1, r2
 8002eae:	3924      	subs	r1, #36	; 0x24
  tp->wabase = (stkalign_t *)wsp;
 8002eb0:	6110      	str	r0, [r2, #16]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002eb2:	60d1      	str	r1, [r2, #12]
 8002eb4:	610b      	str	r3, [r1, #16]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	614b      	str	r3, [r1, #20]
 8002eba:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <chThdCreateStatic.constprop.0.isra.0+0xc4>)
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  os_instance_t *oip = currcore;
  thread_t *otp = __sch_get_currthread(oip);
 8002ebc:	4c2a      	ldr	r4, [pc, #168]	; (8002f68 <chThdCreateStatic.constprop.0.isra.0+0xc8>)
 8002ebe:	620b      	str	r3, [r1, #32]
  tp->state     = CH_STATE_WTSTART;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	68e1      	ldr	r1, [r4, #12]
 8002ec4:	8293      	strh	r3, [r2, #20]

  chDbgCheckClassS();

  chDbgAssert((oip->rlist.queue.next == (thread_t *)&oip->rlist.queue) ||
 8002ec6:	6823      	ldr	r3, [r4, #0]
  tp->prio      = prio;
 8002ec8:	6095      	str	r5, [r2, #8]
 8002eca:	6888      	ldr	r0, [r1, #8]
 8002ecc:	42a3      	cmp	r3, r4
 8002ece:	d002      	beq.n	8002ed6 <chThdCreateStatic.constprop.0.isra.0+0x36>
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	4298      	cmp	r0, r3
 8002ed4:	d318      	bcc.n	8002f08 <chThdCreateStatic.constprop.0.isra.0+0x68>
              (oip->rlist.current->prio >= oip->rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6193      	str	r3, [r2, #24]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8002eda:	4285      	cmp	r5, r0
 8002edc:	d818      	bhi.n	8002f10 <chThdCreateStatic.constprop.0.isra.0+0x70>
  tp->state = CH_STATE_READY;
 8002ede:	7513      	strb	r3, [r2, #20]
  cp = (thread_t *)&oip->rlist.queue;
 8002ee0:	0023      	movs	r3, r4
    cp = cp->queue.next;
 8002ee2:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002ee4:	6899      	ldr	r1, [r3, #8]
 8002ee6:	428d      	cmp	r5, r1
 8002ee8:	d9fb      	bls.n	8002ee2 <chThdCreateStatic.constprop.0.isra.0+0x42>
  tp->queue.prev             = cp->queue.prev;
 8002eea:	6859      	ldr	r1, [r3, #4]
  tp->queue.next             = cp;
 8002eec:	6013      	str	r3, [r2, #0]
  tp->queue.prev             = cp->queue.prev;
 8002eee:	6051      	str	r1, [r2, #4]
  tp->queue.prev->queue.next = tp;
 8002ef0:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	42a3      	cmp	r3, r4
 8002ef8:	d004      	beq.n	8002f04 <chThdCreateStatic.constprop.0.isra.0+0x64>
 8002efa:	68e2      	ldr	r2, [r4, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	6892      	ldr	r2, [r2, #8]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d326      	bcc.n	8002f52 <chThdCreateStatic.constprop.0.isra.0+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
 8002f04:	b662      	cpsie	i
}
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8002f08:	b672      	cpsid	i
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <chThdCreateStatic.constprop.0.isra.0+0xcc>)
 8002f0c:	6463      	str	r3, [r4, #68]	; 0x44
 8002f0e:	e7fe      	b.n	8002f0e <chThdCreateStatic.constprop.0.isra.0+0x6e>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8002f10:	7d0d      	ldrb	r5, [r1, #20]
 8002f12:	2d00      	cmp	r5, #0
 8002f14:	d019      	beq.n	8002f4a <chThdCreateStatic.constprop.0.isra.0+0xaa>
 8002f16:	2d0f      	cmp	r5, #15
 8002f18:	d017      	beq.n	8002f4a <chThdCreateStatic.constprop.0.isra.0+0xaa>
  tp->state = CH_STATE_READY;
 8002f1a:	750b      	strb	r3, [r1, #20]
  cp = (thread_t *)&oip->rlist.queue;
 8002f1c:	0023      	movs	r3, r4
    cp = cp->queue.next;
 8002f1e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8002f20:	689d      	ldr	r5, [r3, #8]
 8002f22:	42a8      	cmp	r0, r5
 8002f24:	d3fb      	bcc.n	8002f1e <chThdCreateStatic.constprop.0.isra.0+0x7e>
  tp->queue.prev             = cp->queue.prev;
 8002f26:	6858      	ldr	r0, [r3, #4]
  tp->queue.next             = cp;
 8002f28:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8002f2a:	6048      	str	r0, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8002f2c:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
 8002f2e:	6059      	str	r1, [r3, #4]
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    ntp->state = CH_STATE_CURRENT;
 8002f30:	2301      	movs	r3, #1
    __sch_set_currthread(oip, ntp);
 8002f32:	60e2      	str	r2, [r4, #12]
    ntp->state = CH_STATE_CURRENT;
 8002f34:	7513      	strb	r3, [r2, #20]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002f36:	f3ef 8309 	mrs	r3, PSP

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8002f3a:	6908      	ldr	r0, [r1, #16]
 8002f3c:	3b24      	subs	r3, #36	; 0x24
 8002f3e:	4298      	cmp	r0, r3
 8002f40:	d80b      	bhi.n	8002f5a <chThdCreateStatic.constprop.0.isra.0+0xba>
 8002f42:	0010      	movs	r0, r2
 8002f44:	f7fe fd30 	bl	80019a8 <__port_switch>
 8002f48:	e7d4      	b.n	8002ef4 <chThdCreateStatic.constprop.0.isra.0+0x54>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4a:	b672      	cpsid	i
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <chThdCreateStatic.constprop.0.isra.0+0xd0>)
 8002f4e:	6463      	str	r3, [r4, #68]	; 0x44
 8002f50:	e7fe      	b.n	8002f50 <chThdCreateStatic.constprop.0.isra.0+0xb0>
 8002f52:	b672      	cpsid	i
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <chThdCreateStatic.constprop.0.isra.0+0xd4>)
 8002f56:	6463      	str	r3, [r4, #68]	; 0x44
 8002f58:	e7fe      	b.n	8002f58 <chThdCreateStatic.constprop.0.isra.0+0xb8>
 8002f5a:	b672      	cpsid	i
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <chThdCreateStatic.constprop.0.isra.0+0xd8>)
 8002f5e:	6463      	str	r3, [r4, #68]	; 0x44
 8002f60:	e7fe      	b.n	8002f60 <chThdCreateStatic.constprop.0.isra.0+0xc0>
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	080019c9 	.word	0x080019c9
 8002f68:	200017f8 	.word	0x200017f8
 8002f6c:	08006210 	.word	0x08006210
 8002f70:	0800619c 	.word	0x0800619c
 8002f74:	08006244 	.word	0x08006244
 8002f78:	08005fe4 	.word	0x08005fe4
 8002f7c:	00000000 	.word	0x00000000

08002f80 <_ZL10readSelPinP12stm32_gpio_tm>:
// Returns:
// low -> 0
// floating -> 1
// high -> 2
static uint8_t readSelPin(ioportid_t port, iopadid_t pad)
{
 8002f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f82:	4657      	mov	r7, sl
 8002f84:	464e      	mov	r6, r9
 8002f86:	4645      	mov	r5, r8
 8002f88:	46de      	mov	lr, fp
 8002f8a:	b5e0      	push	{r5, r6, r7, lr}
    // If we pull the pin down, does the input follow?
    palSetPadMode(port, pad, PAL_MODE_INPUT_PULLDOWN);
 8002f8c:	2601      	movs	r6, #1
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8002f8e:	2207      	movs	r2, #7
 8002f90:	408e      	lsls	r6, r1
 8002f92:	4693      	mov	fp, r2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8002f94:	3208      	adds	r2, #8
 8002f96:	4692      	mov	sl, r2
      m2 = 3 << (bit * 2);
 8002f98:	3a0c      	subs	r2, #12
{
 8002f9a:	4688      	mov	r8, r1
 8002f9c:	0004      	movs	r4, r0
    palSetPadMode(port, pad, PAL_MODE_INPUT_PULLDOWN);
 8002f9e:	0035      	movs	r5, r6
  uint32_t bit     = 0;
 8002fa0:	2300      	movs	r3, #0
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8002fa2:	2102      	movs	r1, #2
    if ((mask & 1) != 0) {
 8002fa4:	2701      	movs	r7, #1
      m2 = 3 << (bit * 2);
 8002fa6:	4691      	mov	r9, r2
 8002fa8:	46b4      	mov	ip, r6
{
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	e007      	b.n	8002fbe <_ZL10readSelPinP12stm32_gpio_tm+0x3e>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002fae:	6a22      	ldr	r2, [r4, #32]
 8002fb0:	9800      	ldr	r0, [sp, #0]
 8002fb2:	4382      	bics	r2, r0
 8002fb4:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
 8002fb6:	086d      	lsrs	r5, r5, #1
    if (!mask)
 8002fb8:	d024      	beq.n	8003004 <_ZL10readSelPinP12stm32_gpio_tm+0x84>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
 8002fba:	0089      	lsls	r1, r1, #2
    moder <<= 2;
    bit++;
 8002fbc:	3301      	adds	r3, #1
    if ((mask & 1) != 0) {
 8002fbe:	422f      	tst	r7, r5
 8002fc0:	d0f9      	beq.n	8002fb6 <_ZL10readSelPinP12stm32_gpio_tm+0x36>
      altrmask = altr << ((bit & 7) * 4);
 8002fc2:	465a      	mov	r2, fp
      m4 = 15 << ((bit & 7) * 4);
 8002fc4:	4656      	mov	r6, sl
      altrmask = altr << ((bit & 7) * 4);
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	0092      	lsls	r2, r2, #2
      m1 = 1 << bit;
 8002fca:	0038      	movs	r0, r7
      m4 = 15 << ((bit & 7) * 4);
 8002fcc:	4096      	lsls	r6, r2
      m1 = 1 << bit;
 8002fce:	4098      	lsls	r0, r3
      m4 = 15 << ((bit & 7) * 4);
 8002fd0:	9600      	str	r6, [sp, #0]
      m2 = 3 << (bit * 2);
 8002fd2:	464e      	mov	r6, r9
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002fd4:	6862      	ldr	r2, [r4, #4]
 8002fd6:	4382      	bics	r2, r0
      m2 = 3 << (bit * 2);
 8002fd8:	0058      	lsls	r0, r3, #1
 8002fda:	4086      	lsls	r6, r0
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002fdc:	6062      	str	r2, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002fde:	68a2      	ldr	r2, [r4, #8]
 8002fe0:	43b2      	bics	r2, r6
 8002fe2:	60a2      	str	r2, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8002fe4:	68e2      	ldr	r2, [r4, #12]
 8002fe6:	43b2      	bics	r2, r6
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	60e2      	str	r2, [r4, #12]
        port->MODER   = (port->MODER & ~m2) | moder;
 8002fec:	6822      	ldr	r2, [r4, #0]
 8002fee:	43b2      	bics	r2, r6
 8002ff0:	6022      	str	r2, [r4, #0]
        if (bit < 8)
 8002ff2:	2b07      	cmp	r3, #7
 8002ff4:	d9db      	bls.n	8002fae <_ZL10readSelPinP12stm32_gpio_tm+0x2e>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8002ff6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ff8:	9800      	ldr	r0, [sp, #0]
    mask >>= 1;
 8002ffa:	086d      	lsrs	r5, r5, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8002ffc:	4382      	bics	r2, r0
 8002ffe:	6262      	str	r2, [r4, #36]	; 0x24
    if (!mask)
 8003000:	2d00      	cmp	r5, #0
 8003002:	d1da      	bne.n	8002fba <_ZL10readSelPinP12stm32_gpio_tm+0x3a>
 8003004:	4666      	mov	r6, ip
 8003006:	b672      	cpsid	i
  thread_t *tp = __sch_get_currthread(currcore);
 8003008:	4f42      	ldr	r7, [pc, #264]	; (8003114 <_ZL10readSelPinP12stm32_gpio_tm+0x194>)
    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 800300a:	210a      	movs	r1, #10
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	a803      	add	r0, sp, #12
 8003010:	f7ff fd3e 	bl	8002a90 <chVTDoSetI.constprop.0>
    chSchGoSleepS(newstate);
 8003014:	2008      	movs	r0, #8
 8003016:	f7ff fe4b 	bl	8002cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800301a:	9b06      	ldr	r3, [sp, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <_ZL10readSelPinP12stm32_gpio_tm+0xa6>
      chVTDoResetI(&vt);
 8003020:	a803      	add	r0, sp, #12
 8003022:	f7fe fde5 	bl	8001bf0 <chVTDoResetI>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	42bb      	cmp	r3, r7
 800302a:	d004      	beq.n	8003036 <_ZL10readSelPinP12stm32_gpio_tm+0xb6>
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	6892      	ldr	r2, [r2, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d366      	bcc.n	8003104 <_ZL10readSelPinP12stm32_gpio_tm+0x184>
  __ASM volatile ("cpsie i" : : : "memory");
 8003036:	b662      	cpsie	i
    chThdSleepMilliseconds(1);
    auto pd = palReadPad(port, pad);
 8003038:	4642      	mov	r2, r8
 800303a:	6923      	ldr	r3, [r4, #16]
    if ((mask & 1) != 0) {
 800303c:	2101      	movs	r1, #1
 800303e:	40d3      	lsrs	r3, r2
 8003040:	2201      	movs	r2, #1
 8003042:	401a      	ands	r2, r3
      altrmask = altr << ((bit & 7) * 4);
 8003044:	2307      	movs	r3, #7
 8003046:	469b      	mov	fp, r3
      m4 = 15 << ((bit & 7) * 4);
 8003048:	3308      	adds	r3, #8
 800304a:	469a      	mov	sl, r3
      m2 = 3 << (bit * 2);
 800304c:	3b0c      	subs	r3, #12
 800304e:	9201      	str	r2, [sp, #4]
 8003050:	4699      	mov	r9, r3
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8003052:	2201      	movs	r2, #1
      m2 = 3 << (bit * 2);
 8003054:	46bc      	mov	ip, r7
 8003056:	e007      	b.n	8003068 <_ZL10readSelPinP12stm32_gpio_tm+0xe8>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8003058:	6a23      	ldr	r3, [r4, #32]
 800305a:	9800      	ldr	r0, [sp, #0]
 800305c:	4383      	bics	r3, r0
 800305e:	6223      	str	r3, [r4, #32]
    mask >>= 1;
 8003060:	0876      	lsrs	r6, r6, #1
    if (!mask)
 8003062:	d024      	beq.n	80030ae <_ZL10readSelPinP12stm32_gpio_tm+0x12e>
    pupdr <<= 2;
 8003064:	0092      	lsls	r2, r2, #2
    bit++;
 8003066:	3501      	adds	r5, #1
    if ((mask & 1) != 0) {
 8003068:	4231      	tst	r1, r6
 800306a:	d0f9      	beq.n	8003060 <_ZL10readSelPinP12stm32_gpio_tm+0xe0>
      altrmask = altr << ((bit & 7) * 4);
 800306c:	465b      	mov	r3, fp
      m4 = 15 << ((bit & 7) * 4);
 800306e:	4657      	mov	r7, sl
      altrmask = altr << ((bit & 7) * 4);
 8003070:	402b      	ands	r3, r5
 8003072:	009b      	lsls	r3, r3, #2
      m1 = 1 << bit;
 8003074:	0008      	movs	r0, r1
      m4 = 15 << ((bit & 7) * 4);
 8003076:	409f      	lsls	r7, r3
      m1 = 1 << bit;
 8003078:	40a8      	lsls	r0, r5
      m4 = 15 << ((bit & 7) * 4);
 800307a:	9700      	str	r7, [sp, #0]
      m2 = 3 << (bit * 2);
 800307c:	464f      	mov	r7, r9
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800307e:	6863      	ldr	r3, [r4, #4]
 8003080:	4383      	bics	r3, r0
      m2 = 3 << (bit * 2);
 8003082:	0068      	lsls	r0, r5, #1
 8003084:	4087      	lsls	r7, r0
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8003086:	6063      	str	r3, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8003088:	68a3      	ldr	r3, [r4, #8]
 800308a:	43bb      	bics	r3, r7
 800308c:	60a3      	str	r3, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800308e:	68e3      	ldr	r3, [r4, #12]
 8003090:	43bb      	bics	r3, r7
 8003092:	4313      	orrs	r3, r2
 8003094:	60e3      	str	r3, [r4, #12]
        port->MODER   = (port->MODER & ~m2) | moder;
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	43bb      	bics	r3, r7
 800309a:	6023      	str	r3, [r4, #0]
        if (bit < 8)
 800309c:	2d07      	cmp	r5, #7
 800309e:	d9db      	bls.n	8003058 <_ZL10readSelPinP12stm32_gpio_tm+0xd8>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80030a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030a2:	9800      	ldr	r0, [sp, #0]
    mask >>= 1;
 80030a4:	0876      	lsrs	r6, r6, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80030a6:	4383      	bics	r3, r0
 80030a8:	6263      	str	r3, [r4, #36]	; 0x24
    if (!mask)
 80030aa:	2e00      	cmp	r6, #0
 80030ac:	d1da      	bne.n	8003064 <_ZL10readSelPinP12stm32_gpio_tm+0xe4>
  __ASM volatile ("cpsid i" : : : "memory");
 80030ae:	4667      	mov	r7, ip
 80030b0:	b672      	cpsid	i
    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 80030b2:	210a      	movs	r1, #10
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	a803      	add	r0, sp, #12
 80030b8:	f7ff fcea 	bl	8002a90 <chVTDoSetI.constprop.0>
    chSchGoSleepS(newstate);
 80030bc:	2008      	movs	r0, #8
 80030be:	f7ff fdf7 	bl	8002cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80030c2:	9b06      	ldr	r3, [sp, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <_ZL10readSelPinP12stm32_gpio_tm+0x14e>
      chVTDoResetI(&vt);
 80030c8:	a803      	add	r0, sp, #12
 80030ca:	f7fe fd91 	bl	8001bf0 <chVTDoResetI>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	42bb      	cmp	r3, r7
 80030d2:	d004      	beq.n	80030de <_ZL10readSelPinP12stm32_gpio_tm+0x15e>
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	6892      	ldr	r2, [r2, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d316      	bcc.n	800310c <_ZL10readSelPinP12stm32_gpio_tm+0x18c>
  __ASM volatile ("cpsie i" : : : "memory");
 80030de:	b662      	cpsie	i

    // If we pull the pin up, does the input follow?
    palSetPadMode(port, pad, PAL_MODE_INPUT_PULLUP);
    chThdSleepMilliseconds(1);
    auto pu = palReadPad(port, pad);
 80030e0:	4643      	mov	r3, r8
 80030e2:	6922      	ldr	r2, [r4, #16]

    // If the pin changed with pullup/down state, it's floating
    if (pd != pu)
    {
        return 1;
 80030e4:	2001      	movs	r0, #1
    auto pu = palReadPad(port, pad);
 80030e6:	40da      	lsrs	r2, r3
 80030e8:	2301      	movs	r3, #1
 80030ea:	4013      	ands	r3, r2
    if (pd != pu)
 80030ec:	9a01      	ldr	r2, [sp, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d006      	beq.n	8003100 <_ZL10readSelPinP12stm32_gpio_tm+0x180>
    else
    {
        // Pin was low
        return 0;
    }
}
 80030f2:	b009      	add	sp, #36	; 0x24
 80030f4:	bcf0      	pop	{r4, r5, r6, r7}
 80030f6:	46bb      	mov	fp, r7
 80030f8:	46b2      	mov	sl, r6
 80030fa:	46a9      	mov	r9, r5
 80030fc:	46a0      	mov	r8, r4
 80030fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pu)
 8003100:	0050      	lsls	r0, r2, #1
 8003102:	e7f6      	b.n	80030f2 <_ZL10readSelPinP12stm32_gpio_tm+0x172>
  __ASM volatile ("cpsid i" : : : "memory");
 8003104:	b672      	cpsid	i
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <_ZL10readSelPinP12stm32_gpio_tm+0x198>)
 8003108:	647b      	str	r3, [r7, #68]	; 0x44
  while (true) {
 800310a:	e7fe      	b.n	800310a <_ZL10readSelPinP12stm32_gpio_tm+0x18a>
 800310c:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 800310e:	4b02      	ldr	r3, [pc, #8]	; (8003118 <_ZL10readSelPinP12stm32_gpio_tm+0x198>)
 8003110:	647b      	str	r3, [r7, #68]	; 0x44
  while (true) {
 8003112:	e7fe      	b.n	8003112 <_ZL10readSelPinP12stm32_gpio_tm+0x192>
 8003114:	200017f8 	.word	0x200017f8
 8003118:	08006244 	.word	0x08006244
 800311c:	00000000 	.word	0x00000000

08003120 <_Z16GetConfigurationv>:
    uint32_t Tag = ExpectedTag;

public:
    bool IsValid() const
    {
        return this->Tag == ExpectedTag;
 8003120:	491b      	ldr	r1, [pc, #108]	; (8003190 <_Z16GetConfigurationv+0x70>)
Configuration* GetConfiguration()
{
    const auto& cfg = __configflash__start__;

    // If config has been written before, use the stored configuration
    if (cfg.IsValid())
 8003122:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <_Z16GetConfigurationv+0x74>)
 8003124:	680a      	ldr	r2, [r1, #0]
{
 8003126:	b570      	push	{r4, r5, r6, lr}
    {
        config = cfg;
 8003128:	4d1b      	ldr	r5, [pc, #108]	; (8003198 <_Z16GetConfigurationv+0x78>)
    if (cfg.IsValid())
 800312a:	429a      	cmp	r2, r3
 800312c:	d104      	bne.n	8003138 <_Z16GetConfigurationv+0x18>
        config = cfg;
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	0028      	movs	r0, r5
 8003132:	0052      	lsls	r2, r2, #1
 8003134:	f001 ffd4 	bl	80050e0 <memcpy>
    }

    // Now, override the index with a hardware-strapped option (if present)
    auto sel1 = readSelPin(ID_SEL1_PORT, ID_SEL1_PIN);
 8003138:	2101      	movs	r1, #1
 800313a:	4818      	ldr	r0, [pc, #96]	; (800319c <_Z16GetConfigurationv+0x7c>)
 800313c:	f7ff ff20 	bl	8002f80 <_ZL10readSelPinP12stm32_gpio_tm>
 8003140:	0004      	movs	r4, r0
    auto sel2 = readSelPin(ID_SEL2_PORT, ID_SEL2_PIN);
 8003142:	2090      	movs	r0, #144	; 0x90
 8003144:	2108      	movs	r1, #8
 8003146:	05c0      	lsls	r0, r0, #23
 8003148:	f7ff ff1a 	bl	8002f80 <_ZL10readSelPinP12stm32_gpio_tm>

    // See https://github.com/mck1117/wideband/issues/11 to explain this madness
    switch (3 * sel1 + sel2) {
 800314c:	0063      	lsls	r3, r4, #1
 800314e:	191b      	adds	r3, r3, r4
 8003150:	1818      	adds	r0, r3, r0
 8003152:	2808      	cmp	r0, #8
 8003154:	d805      	bhi.n	8003162 <_Z16GetConfigurationv+0x42>
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <_Z16GetConfigurationv+0x80>)
 8003158:	0080      	lsls	r0, r0, #2
 800315a:	581b      	ldr	r3, [r3, r0]
 800315c:	469f      	mov	pc, r3
        case 0: config.CanIndexOffset = 2; break;
 800315e:	2302      	movs	r3, #2
 8003160:	712b      	strb	r3, [r5, #4]
        case 8: config.CanIndexOffset = 7; break;
        default: break;
    }

    return &config;
}
 8003162:	0028      	movs	r0, r5
 8003164:	bd70      	pop	{r4, r5, r6, pc}
        case 8: config.CanIndexOffset = 7; break;
 8003166:	2307      	movs	r3, #7
 8003168:	712b      	strb	r3, [r5, #4]
 800316a:	e7fa      	b.n	8003162 <_Z16GetConfigurationv+0x42>
        case 1: config.CanIndexOffset = 0; break;
 800316c:	2300      	movs	r3, #0
 800316e:	712b      	strb	r3, [r5, #4]
 8003170:	e7f7      	b.n	8003162 <_Z16GetConfigurationv+0x42>
        case 2: config.CanIndexOffset = 3; break;
 8003172:	2303      	movs	r3, #3
 8003174:	712b      	strb	r3, [r5, #4]
 8003176:	e7f4      	b.n	8003162 <_Z16GetConfigurationv+0x42>
        case 3: config.CanIndexOffset = 4; break;
 8003178:	2304      	movs	r3, #4
 800317a:	712b      	strb	r3, [r5, #4]
 800317c:	e7f1      	b.n	8003162 <_Z16GetConfigurationv+0x42>
        case 5: config.CanIndexOffset = 1; break;
 800317e:	2301      	movs	r3, #1
 8003180:	712b      	strb	r3, [r5, #4]
 8003182:	e7ee      	b.n	8003162 <_Z16GetConfigurationv+0x42>
        case 6: config.CanIndexOffset = 5; break;
 8003184:	2305      	movs	r3, #5
 8003186:	712b      	strb	r3, [r5, #4]
 8003188:	e7eb      	b.n	8003162 <_Z16GetConfigurationv+0x42>
        case 7: config.CanIndexOffset = 6; break;
 800318a:	2306      	movs	r3, #6
 800318c:	712b      	strb	r3, [r5, #4]
 800318e:	e7e8      	b.n	8003162 <_Z16GetConfigurationv+0x42>
 8003190:	08007c00 	.word	0x08007c00
 8003194:	deadbe01 	.word	0xdeadbe01
 8003198:	2000160c 	.word	0x2000160c
 800319c:	48000400 	.word	0x48000400
 80031a0:	08005ff4 	.word	0x08005ff4
	...

080031b0 <_Z11CanRxThreadPv>:
{
 80031b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b2:	4657      	mov	r7, sl
 80031b4:	464e      	mov	r6, r9
 80031b6:	46de      	mov	lr, fp
 80031b8:	4645      	mov	r5, r8
 80031ba:	2300      	movs	r3, #0
 80031bc:	b5e0      	push	{r5, r6, r7, lr}
 80031be:	b091      	sub	sp, #68	; 0x44
 80031c0:	469a      	mov	sl, r3
 80031c2:	4699      	mov	r9, r3
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	b672      	cpsid	i

  osalDbgCheck((canp != NULL) && (crfp != NULL) &&
               (mailbox <= (canmbx_t)CAN_RX_MAILBOXES));

  osalSysLock();
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
 80031c8:	4dd5      	ldr	r5, [pc, #852]	; (8003520 <_Z11CanRxThreadPv+0x370>)
 80031ca:	4ed6      	ldr	r6, [pc, #856]	; (8003524 <_Z11CanRxThreadPv+0x374>)
 80031cc:	782b      	ldrb	r3, [r5, #0]
 80031ce:	3b04      	subs	r3, #4
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d900      	bls.n	80031d6 <_Z11CanRxThreadPv+0x26>
 80031d4:	e11a      	b.n	800340c <_Z11CanRxThreadPv+0x25c>
 80031d6:	4bd4      	ldr	r3, [pc, #848]	; (8003528 <_Z11CanRxThreadPv+0x378>)
 80031d8:	9305      	str	r3, [sp, #20]
 80031da:	4bd4      	ldr	r3, [pc, #848]	; (800352c <_Z11CanRxThreadPv+0x37c>)
 80031dc:	9303      	str	r3, [sp, #12]
 80031de:	4bd4      	ldr	r3, [pc, #848]	; (8003530 <_Z11CanRxThreadPv+0x380>)
 80031e0:	9304      	str	r3, [sp, #16]
 80031e2:	4bd4      	ldr	r3, [pc, #848]	; (8003534 <_Z11CanRxThreadPv+0x384>)
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	4bd4      	ldr	r3, [pc, #848]	; (8003538 <_Z11CanRxThreadPv+0x388>)
 80031e8:	9302      	str	r3, [sp, #8]
        if (frame.IDE != CAN_IDE_EXT)
 80031ea:	2301      	movs	r3, #1
 80031ec:	469b      	mov	fp, r3
  tp->queue.next             = (thread_t *)tqp;
 80031ee:	2310      	movs	r3, #16
 80031f0:	4698      	mov	r8, r3
 */
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
  case CAN_ANY_MAILBOX:
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 80031f2:	2703      	movs	r7, #3
 80031f4:	44a8      	add	r8, r5
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 80031f6:	782b      	ldrb	r3, [r5, #0]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d100      	bne.n	80031fe <_Z11CanRxThreadPv+0x4e>
 80031fc:	e0e9      	b.n	80033d2 <_Z11CanRxThreadPv+0x222>
 80031fe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	4217      	tst	r7, r2
 8003204:	d100      	bne.n	8003208 <_Z11CanRxThreadPv+0x58>
 8003206:	e0e0      	b.n	80033ca <_Z11CanRxThreadPv+0x21a>
                     canmbx_t mailbox,
                     CANRxFrame *crfp) {
  uint32_t rir, rdtr;

  if (mailbox == CAN_ANY_MAILBOX) {
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
 8003208:	2003      	movs	r0, #3
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	4202      	tst	r2, r0
 800320e:	d100      	bne.n	8003212 <_Z11CanRxThreadPv+0x62>
 8003210:	e100      	b.n	8003414 <_Z11CanRxThreadPv+0x264>
    }
  }
  switch (mailbox) {
  case 1:
    /* Fetches the message.*/
    rir  = canp->can->sFIFOMailBox[0].RIR;
 8003212:	22d8      	movs	r2, #216	; 0xd8
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 8003214:	21da      	movs	r1, #218	; 0xda
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 8003216:	24dc      	movs	r4, #220	; 0xdc
    rir  = canp->can->sFIFOMailBox[0].RIR;
 8003218:	0052      	lsls	r2, r2, #1
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 800321a:	0049      	lsls	r1, r1, #1
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 800321c:	0064      	lsls	r4, r4, #1
    rir  = canp->can->sFIFOMailBox[0].RIR;
 800321e:	589a      	ldr	r2, [r3, r2]
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 8003220:	5859      	ldr	r1, [r3, r1]
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 8003222:	591c      	ldr	r4, [r3, r4]
 8003224:	940e      	str	r4, [sp, #56]	; 0x38
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 8003226:	24de      	movs	r4, #222	; 0xde
 8003228:	0064      	lsls	r4, r4, #1
 800322a:	591c      	ldr	r4, [r3, r4]

    /* Releases the mailbox.*/
    canp->can->RF0R = CAN_RF0R_RFOM0;
 800322c:	2420      	movs	r4, #32
 800322e:	60dc      	str	r4, [r3, #12]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 8003230:	68dc      	ldr	r4, [r3, #12]
 8003232:	4204      	tst	r4, r0
 8003234:	d103      	bne.n	800323e <_Z11CanRxThreadPv+0x8e>
      canp->can->IER |= CAN_IER_FMPIE0;
 8003236:	2002      	movs	r0, #2
 8003238:	695c      	ldr	r4, [r3, #20]
 800323a:	4320      	orrs	r0, r4
 800323c:	6158      	str	r0, [r3, #20]
    /* Should not happen, do nothing.*/
    return;
  }

  /* Decodes the various fields in the RX frame.*/
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 800323e:	465b      	mov	r3, fp
 8003240:	0854      	lsrs	r4, r2, #1
 8003242:	4023      	ands	r3, r4
 8003244:	9300      	str	r3, [sp, #0]
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
 8003246:	465b      	mov	r3, fp
  if (crfp->IDE)
 8003248:	270f      	movs	r7, #15
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
 800324a:	0890      	lsrs	r0, r2, #2
 800324c:	4003      	ands	r3, r0
 800324e:	4699      	mov	r9, r3
  if (crfp->IDE)
 8003250:	ab06      	add	r3, sp, #24
 8003252:	7d1b      	ldrb	r3, [r3, #20]
 8003254:	4648      	mov	r0, r9
 8003256:	43bb      	bics	r3, r7
 8003258:	465f      	mov	r7, fp
 800325a:	403c      	ands	r4, r7
 800325c:	4657      	mov	r7, sl
 800325e:	433b      	orrs	r3, r7
 8003260:	2710      	movs	r7, #16
 8003262:	0124      	lsls	r4, r4, #4
 8003264:	43bb      	bics	r3, r7
 8003266:	4323      	orrs	r3, r4
 8003268:	2420      	movs	r4, #32
 800326a:	b2db      	uxtb	r3, r3
 800326c:	0140      	lsls	r0, r0, #5
 800326e:	43a3      	bics	r3, r4
 8003270:	4303      	orrs	r3, r0
 8003272:	a806      	add	r0, sp, #24
 8003274:	7503      	strb	r3, [r0, #20]
 8003276:	4223      	tst	r3, r4
 8003278:	d000      	beq.n	800327c <_Z11CanRxThreadPv+0xcc>
 800327a:	e0e7      	b.n	800344c <_Z11CanRxThreadPv+0x29c>
    crfp->EID = rir >> 3;
  else
    crfp->SID = rir >> 21;
 800327c:	ab06      	add	r3, sp, #24
 800327e:	8b1b      	ldrh	r3, [r3, #24]
 8003280:	0d52      	lsrs	r2, r2, #21
 8003282:	0adb      	lsrs	r3, r3, #11
 8003284:	02db      	lsls	r3, r3, #11
 8003286:	4313      	orrs	r3, r2
 8003288:	aa06      	add	r2, sp, #24
 800328a:	8313      	strh	r3, [r2, #24]
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 800328c:	230f      	movs	r3, #15
 800328e:	400b      	ands	r3, r1
 8003290:	469a      	mov	sl, r3
 8003292:	6833      	ldr	r3, [r6, #0]
 8003294:	42b3      	cmp	r3, r6
 8003296:	d005      	beq.n	80032a4 <_Z11CanRxThreadPv+0xf4>
 8003298:	68f2      	ldr	r2, [r6, #12]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	6892      	ldr	r2, [r2, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d200      	bcs.n	80032a4 <_Z11CanRxThreadPv+0xf4>
 80032a2:	e120      	b.n	80034e6 <_Z11CanRxThreadPv+0x336>
  __ASM volatile ("cpsie i" : : : "memory");
 80032a4:	b662      	cpsie	i
 80032a6:	220f      	movs	r2, #15
 80032a8:	ab06      	add	r3, sp, #24
 80032aa:	7d1b      	ldrb	r3, [r3, #20]
 80032ac:	4393      	bics	r3, r2
 80032ae:	9a00      	ldr	r2, [sp, #0]
 80032b0:	0111      	lsls	r1, r2, #4
 80032b2:	4652      	mov	r2, sl
 80032b4:	4313      	orrs	r3, r2
 80032b6:	2210      	movs	r2, #16
 80032b8:	4393      	bics	r3, r2
 80032ba:	430b      	orrs	r3, r1
 80032bc:	464a      	mov	r2, r9
 80032be:	2120      	movs	r1, #32
 80032c0:	0152      	lsls	r2, r2, #5
 80032c2:	438b      	bics	r3, r1
 80032c4:	4313      	orrs	r3, r2
 80032c6:	aa06      	add	r2, sp, #24
 80032c8:	7513      	strb	r3, [r2, #20]
 80032ca:	420b      	tst	r3, r1
 80032cc:	d100      	bne.n	80032d0 <_Z11CanRxThreadPv+0x120>
 80032ce:	e097      	b.n	8003400 <_Z11CanRxThreadPv+0x250>
        if (frame.DLC == 2 && frame.EID == WB_MGS_ECU_STATUS) {
 80032d0:	220f      	movs	r2, #15
 80032d2:	401a      	ands	r2, r3
 80032d4:	2a02      	cmp	r2, #2
 80032d6:	d100      	bne.n	80032da <_Z11CanRxThreadPv+0x12a>
 80032d8:	e0ce      	b.n	8003478 <_Z11CanRxThreadPv+0x2c8>
        else if ((frame.DLC == 0 || frame.DLC == 1) && frame.EID == WB_BL_ENTER)
 80032da:	210e      	movs	r1, #14
 80032dc:	420b      	tst	r3, r1
 80032de:	d100      	bne.n	80032e2 <_Z11CanRxThreadPv+0x132>
 80032e0:	e0bb      	b.n	800345a <_Z11CanRxThreadPv+0x2aa>
        else if (frame.DLC == 1 && frame.EID == WB_MSG_SET_INDEX)
 80032e2:	2a01      	cmp	r2, #1
 80032e4:	d000      	beq.n	80032e8 <_Z11CanRxThreadPv+0x138>
 80032e6:	e08b      	b.n	8003400 <_Z11CanRxThreadPv+0x250>
 80032e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032ea:	4a94      	ldr	r2, [pc, #592]	; (800353c <_Z11CanRxThreadPv+0x38c>)
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	08db      	lsrs	r3, r3, #3
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d000      	beq.n	80032f6 <_Z11CanRxThreadPv+0x146>
 80032f4:	e084      	b.n	8003400 <_Z11CanRxThreadPv+0x250>
            configuration = GetConfiguration();
 80032f6:	f7ff ff13 	bl	8003120 <_Z16GetConfigurationv>
            configuration->CanIndexOffset = frame.data8[0];
 80032fa:	2220      	movs	r2, #32
            configuration = GetConfiguration();
 80032fc:	9b04      	ldr	r3, [sp, #16]
 80032fe:	6018      	str	r0, [r3, #0]
            configuration->CanIndexOffset = frame.data8[0];
 8003300:	ab06      	add	r3, sp, #24
 8003302:	189b      	adds	r3, r3, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	7103      	strb	r3, [r0, #4]
    while (FLASH->SR & FLASH_SR_BSY) ;
}

static void flashUnlock() {
    /* Check if unlock is really needed */
    if (!(FLASH->CR & FLASH_CR_LOCK))
 8003308:	4b8d      	ldr	r3, [pc, #564]	; (8003540 <_Z11CanRxThreadPv+0x390>)
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	0612      	lsls	r2, r2, #24
 800330e:	d503      	bpl.n	8003318 <_Z11CanRxThreadPv+0x168>
        return;

    /* Write magic unlock sequence */
    FLASH->KEYR = 0x45670123;
 8003310:	4a8c      	ldr	r2, [pc, #560]	; (8003544 <_Z11CanRxThreadPv+0x394>)
 8003312:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = 0xCDEF89AB;
 8003314:	4a8c      	ldr	r2, [pc, #560]	; (8003548 <_Z11CanRxThreadPv+0x398>)
 8003316:	605a      	str	r2, [r3, #4]
    while (FLASH->SR & FLASH_SR_BSY) ;
 8003318:	4b89      	ldr	r3, [pc, #548]	; (8003540 <_Z11CanRxThreadPv+0x390>)
 800331a:	4659      	mov	r1, fp
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	420a      	tst	r2, r1
 8003320:	d1fb      	bne.n	800331a <_Z11CanRxThreadPv+0x16a>

    // Wait for flash to be not busy
    flashWaitWhileBusy();

    // page erase mode
    FLASH->CR |= FLASH_CR_PER;
 8003322:	2202      	movs	r2, #2
 8003324:	6919      	ldr	r1, [r3, #16]
 8003326:	430a      	orrs	r2, r1
 8003328:	611a      	str	r2, [r3, #16]

    // Set page number
    FLASH->AR = pageIdx * 1024;
 800332a:	22f8      	movs	r2, #248	; 0xf8
 800332c:	01d2      	lsls	r2, r2, #7
 800332e:	615a      	str	r2, [r3, #20]

    // Start the erase operation
    FLASH->CR |= FLASH_CR_STRT;
 8003330:	2240      	movs	r2, #64	; 0x40
 8003332:	6919      	ldr	r1, [r3, #16]
 8003334:	430a      	orrs	r2, r1
 8003336:	611a      	str	r2, [r3, #16]

    // Must wait at least one cycle before reading FLASH_SR_BSY
    __asm__ __volatile__("nop");
 8003338:	46c0      	nop			; (mov r8, r8)
    while (FLASH->SR & FLASH_SR_BSY) ;
 800333a:	4b81      	ldr	r3, [pc, #516]	; (8003540 <_Z11CanRxThreadPv+0x390>)
 800333c:	4659      	mov	r1, fp
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	420a      	tst	r2, r1
 8003342:	d1fb      	bne.n	800333c <_Z11CanRxThreadPv+0x18c>

    // Wait for flash to be not busy
    flashWaitWhileBusy();

    // clear page erase bit
    FLASH->CR &= ~FLASH_CR_PER;
 8003344:	2102      	movs	r1, #2
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	438a      	bics	r2, r1
 800334a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_LOCK;
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	317e      	adds	r1, #126	; 0x7e
 8003350:	430a      	orrs	r2, r1
 8003352:	611a      	str	r2, [r3, #16]
    if (!(FLASH->CR & FLASH_CR_LOCK))
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	420a      	tst	r2, r1
 8003358:	d003      	beq.n	8003362 <_Z11CanRxThreadPv+0x1b2>
    FLASH->KEYR = 0x45670123;
 800335a:	4a7a      	ldr	r2, [pc, #488]	; (8003544 <_Z11CanRxThreadPv+0x394>)
 800335c:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = 0xCDEF89AB;
 800335e:	4a7a      	ldr	r2, [pc, #488]	; (8003548 <_Z11CanRxThreadPv+0x398>)
 8003360:	605a      	str	r2, [r3, #4]
    while (FLASH->SR & FLASH_SR_BSY) ;
 8003362:	4a77      	ldr	r2, [pc, #476]	; (8003540 <_Z11CanRxThreadPv+0x390>)
 8003364:	4659      	mov	r1, fp
 8003366:	4658      	mov	r0, fp
 8003368:	68d3      	ldr	r3, [r2, #12]
 800336a:	4019      	ands	r1, r3
 800336c:	4203      	tst	r3, r0
 800336e:	d1f9      	bne.n	8003364 <_Z11CanRxThreadPv+0x1b4>

    /* Wait for any busy flags */
    flashWaitWhileBusy();

    //Copy data directly from buffer's data to flash
    while (size >= sizeof(flashdata_t)) {
 8003370:	2480      	movs	r4, #128	; 0x80
    FLASH->CR |= FLASH_CR_PG;
 8003372:	4a73      	ldr	r2, [pc, #460]	; (8003540 <_Z11CanRxThreadPv+0x390>)
    while (size >= sizeof(flashdata_t)) {
 8003374:	0064      	lsls	r4, r4, #1
    FLASH->CR |= FLASH_CR_PG;
 8003376:	465f      	mov	r7, fp
        flashWriteData(address, *(const flashdata_t*) buffer);
 8003378:	9b01      	ldr	r3, [sp, #4]
 800337a:	5a58      	ldrh	r0, [r3, r1]
    FLASH->CR |= FLASH_CR_PG;
 800337c:	6913      	ldr	r3, [r2, #16]
 800337e:	433b      	orrs	r3, r7
 8003380:	6113      	str	r3, [r2, #16]
    *(flashdata_t*) address = data;
 8003382:	9b02      	ldr	r3, [sp, #8]
 8003384:	5258      	strh	r0, [r3, r1]
    while (FLASH->SR & FLASH_SR_BSY) ;
 8003386:	4658      	mov	r0, fp
 8003388:	68d3      	ldr	r3, [r2, #12]
 800338a:	4218      	tst	r0, r3
 800338c:	d1fb      	bne.n	8003386 <_Z11CanRxThreadPv+0x1d6>
    FLASH->CR &= ~FLASH_CR_PG;
 800338e:	6913      	ldr	r3, [r2, #16]
    while (size >= sizeof(flashdata_t)) {
 8003390:	3102      	adds	r1, #2
    FLASH->CR &= ~FLASH_CR_PG;
 8003392:	4383      	bics	r3, r0
 8003394:	6113      	str	r3, [r2, #16]
    while (size >= sizeof(flashdata_t)) {
 8003396:	42a1      	cmp	r1, r4
 8003398:	d1ed      	bne.n	8003376 <_Z11CanRxThreadPv+0x1c6>
    FLASH->CR |= FLASH_CR_LOCK;
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	6911      	ldr	r1, [r2, #16]
 800339e:	430b      	orrs	r3, r1
 80033a0:	6113      	str	r3, [r2, #16]
    frame.EID = WB_ACK;
 80033a2:	9b07      	ldr	r3, [sp, #28]
 80033a4:	4a69      	ldr	r2, [pc, #420]	; (800354c <_Z11CanRxThreadPv+0x39c>)
 80033a6:	0f5b      	lsrs	r3, r3, #29
 80033a8:	075b      	lsls	r3, r3, #29
 80033aa:	4313      	orrs	r3, r2
 80033ac:	9307      	str	r3, [sp, #28]
    frame.DLC = 0;
 80033ae:	ab06      	add	r3, sp, #24
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	233f      	movs	r3, #63	; 0x3f
    canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &frame, TIME_INFINITE);
 80033b4:	2101      	movs	r1, #1
    frame.DLC = 0;
 80033b6:	439a      	bics	r2, r3
 80033b8:	3b1f      	subs	r3, #31
 80033ba:	4313      	orrs	r3, r2
 80033bc:	aa06      	add	r2, sp, #24
    canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &frame, TIME_INFINITE);
 80033be:	0010      	movs	r0, r2
    frame.DLC = 0;
 80033c0:	7013      	strb	r3, [r2, #0]
    canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &frame, TIME_INFINITE);
 80033c2:	4249      	negs	r1, r1
 80033c4:	f7ff fcbc 	bl	8002d40 <canTransmitTimeout.constprop.0.isra.0>
}
 80033c8:	e01a      	b.n	8003400 <_Z11CanRxThreadPv+0x250>
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
 80033ca:	691a      	ldr	r2, [r3, #16]
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 80033cc:	4217      	tst	r7, r2
 80033ce:	d000      	beq.n	80033d2 <_Z11CanRxThreadPv+0x222>
 80033d0:	e71a      	b.n	8003208 <_Z11CanRxThreadPv+0x58>
 80033d2:	4643      	mov	r3, r8
 80033d4:	68f4      	ldr	r4, [r6, #12]
    chSchGoSleepS(newstate);
 80033d6:	2004      	movs	r0, #4
 80033d8:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = tqp->prev;
 80033da:	696b      	ldr	r3, [r5, #20]
 80033dc:	6063      	str	r3, [r4, #4]
  tp->queue.prev->queue.next = tp;
 80033de:	601c      	str	r4, [r3, #0]
  tqp->prev                  = tp;
 80033e0:	616c      	str	r4, [r5, #20]
 80033e2:	f7ff fc65 	bl	8002cb0 <chSchGoSleepS>
  /*lint -restore*/
    msg_t msg = osalThreadEnqueueTimeoutS(&canp->rxqueue, timeout);
    if (msg != MSG_OK) {
 80033e6:	69a3      	ldr	r3, [r4, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d100      	bne.n	80033ee <_Z11CanRxThreadPv+0x23e>
 80033ec:	e703      	b.n	80031f6 <_Z11CanRxThreadPv+0x46>
 80033ee:	6833      	ldr	r3, [r6, #0]
 80033f0:	42b3      	cmp	r3, r6
 80033f2:	d004      	beq.n	80033fe <_Z11CanRxThreadPv+0x24e>
 80033f4:	68f2      	ldr	r2, [r6, #12]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	6892      	ldr	r2, [r2, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d338      	bcc.n	8003470 <_Z11CanRxThreadPv+0x2c0>
 80033fe:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8003400:	b672      	cpsid	i
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
 8003402:	782b      	ldrb	r3, [r5, #0]
 8003404:	3b04      	subs	r3, #4
 8003406:	2b01      	cmp	r3, #1
 8003408:	d800      	bhi.n	800340c <_Z11CanRxThreadPv+0x25c>
 800340a:	e6f0      	b.n	80031ee <_Z11CanRxThreadPv+0x3e>
 800340c:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 800340e:	4b50      	ldr	r3, [pc, #320]	; (8003550 <_Z11CanRxThreadPv+0x3a0>)
 8003410:	6473      	str	r3, [r6, #68]	; 0x44
  while (true) {
 8003412:	e7fe      	b.n	8003412 <_Z11CanRxThreadPv+0x262>
    else if ((canp->can->RF1R & CAN_RF1R_FMP1) != 0)
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	4202      	tst	r2, r0
 8003418:	d100      	bne.n	800341c <_Z11CanRxThreadPv+0x26c>
 800341a:	e73a      	b.n	8003292 <_Z11CanRxThreadPv+0xe2>
    rir  = canp->can->sFIFOMailBox[1].RIR;
 800341c:	22e0      	movs	r2, #224	; 0xe0
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 800341e:	21e2      	movs	r1, #226	; 0xe2
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 8003420:	24e4      	movs	r4, #228	; 0xe4
    rir  = canp->can->sFIFOMailBox[1].RIR;
 8003422:	0052      	lsls	r2, r2, #1
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 8003424:	0049      	lsls	r1, r1, #1
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 8003426:	0064      	lsls	r4, r4, #1
    rir  = canp->can->sFIFOMailBox[1].RIR;
 8003428:	589a      	ldr	r2, [r3, r2]
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 800342a:	5859      	ldr	r1, [r3, r1]
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 800342c:	591c      	ldr	r4, [r3, r4]
 800342e:	940e      	str	r4, [sp, #56]	; 0x38
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 8003430:	24e6      	movs	r4, #230	; 0xe6
 8003432:	0064      	lsls	r4, r4, #1
 8003434:	591c      	ldr	r4, [r3, r4]
    canp->can->RF1R = CAN_RF1R_RFOM1;
 8003436:	2420      	movs	r4, #32
 8003438:	611c      	str	r4, [r3, #16]
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 800343a:	691c      	ldr	r4, [r3, #16]
 800343c:	4204      	tst	r4, r0
 800343e:	d000      	beq.n	8003442 <_Z11CanRxThreadPv+0x292>
 8003440:	e6fd      	b.n	800323e <_Z11CanRxThreadPv+0x8e>
      canp->can->IER |= CAN_IER_FMPIE1;
 8003442:	2410      	movs	r4, #16
 8003444:	6958      	ldr	r0, [r3, #20]
 8003446:	4320      	orrs	r0, r4
 8003448:	6158      	str	r0, [r3, #20]
 800344a:	e6f8      	b.n	800323e <_Z11CanRxThreadPv+0x8e>
    crfp->EID = rir >> 3;
 800344c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800344e:	08d2      	lsrs	r2, r2, #3
 8003450:	0f5b      	lsrs	r3, r3, #29
 8003452:	075b      	lsls	r3, r3, #29
 8003454:	4313      	orrs	r3, r2
 8003456:	930c      	str	r3, [sp, #48]	; 0x30
 8003458:	e718      	b.n	800328c <_Z11CanRxThreadPv+0xdc>
        else if ((frame.DLC == 0 || frame.DLC == 1) && frame.EID == WB_BL_ENTER)
 800345a:	21ef      	movs	r1, #239	; 0xef
 800345c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800345e:	0509      	lsls	r1, r1, #20
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	08db      	lsrs	r3, r3, #3
 8003464:	428b      	cmp	r3, r1
 8003466:	d000      	beq.n	800346a <_Z11CanRxThreadPv+0x2ba>
 8003468:	e73b      	b.n	80032e2 <_Z11CanRxThreadPv+0x132>
            if (frame.DLC == 0 || frame.data8[0] == 0xFF || frame.data8[0] == GetConfiguration()->CanIndexOffset)
 800346a:	2a00      	cmp	r2, #0
 800346c:	d111      	bne.n	8003492 <_Z11CanRxThreadPv+0x2e2>
 800346e:	e01b      	b.n	80034a8 <_Z11CanRxThreadPv+0x2f8>
 8003470:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8003472:	4b38      	ldr	r3, [pc, #224]	; (8003554 <_Z11CanRxThreadPv+0x3a4>)
 8003474:	6473      	str	r3, [r6, #68]	; 0x44
  while (true) {
 8003476:	e7fe      	b.n	8003476 <_Z11CanRxThreadPv+0x2c6>
        if (frame.DLC == 2 && frame.EID == WB_MGS_ECU_STATUS) {
 8003478:	990c      	ldr	r1, [sp, #48]	; 0x30
 800347a:	4837      	ldr	r0, [pc, #220]	; (8003558 <_Z11CanRxThreadPv+0x3a8>)
 800347c:	00c9      	lsls	r1, r1, #3
 800347e:	08c9      	lsrs	r1, r1, #3
 8003480:	4281      	cmp	r1, r0
 8003482:	d034      	beq.n	80034ee <_Z11CanRxThreadPv+0x33e>
        else if ((frame.DLC == 0 || frame.DLC == 1) && frame.EID == WB_BL_ENTER)
 8003484:	220e      	movs	r2, #14
 8003486:	4213      	tst	r3, r2
 8003488:	d1ba      	bne.n	8003400 <_Z11CanRxThreadPv+0x250>
 800348a:	23ef      	movs	r3, #239	; 0xef
 800348c:	051b      	lsls	r3, r3, #20
 800348e:	4299      	cmp	r1, r3
 8003490:	d1b6      	bne.n	8003400 <_Z11CanRxThreadPv+0x250>
            if (frame.DLC == 0 || frame.data8[0] == 0xFF || frame.data8[0] == GetConfiguration()->CanIndexOffset)
 8003492:	2220      	movs	r2, #32
 8003494:	ab06      	add	r3, sp, #24
 8003496:	189b      	adds	r3, r3, r2
 8003498:	781c      	ldrb	r4, [r3, #0]
 800349a:	2cff      	cmp	r4, #255	; 0xff
 800349c:	d004      	beq.n	80034a8 <_Z11CanRxThreadPv+0x2f8>
 800349e:	f7ff fe3f 	bl	8003120 <_Z16GetConfigurationv>
 80034a2:	7903      	ldrb	r3, [r0, #4]
 80034a4:	42a3      	cmp	r3, r4
 80034a6:	d1ab      	bne.n	8003400 <_Z11CanRxThreadPv+0x250>
    frame.EID = WB_ACK;
 80034a8:	9b07      	ldr	r3, [sp, #28]
 80034aa:	4a28      	ldr	r2, [pc, #160]	; (800354c <_Z11CanRxThreadPv+0x39c>)
 80034ac:	0f5b      	lsrs	r3, r3, #29
 80034ae:	075b      	lsls	r3, r3, #29
 80034b0:	4313      	orrs	r3, r2
 80034b2:	9307      	str	r3, [sp, #28]
    frame.DLC = 0;
 80034b4:	ab06      	add	r3, sp, #24
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	233f      	movs	r3, #63	; 0x3f
    canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &frame, TIME_INFINITE);
 80034ba:	2101      	movs	r1, #1
    frame.DLC = 0;
 80034bc:	439a      	bics	r2, r3
 80034be:	3b1f      	subs	r3, #31
 80034c0:	4313      	orrs	r3, r2
 80034c2:	aa06      	add	r2, sp, #24
    canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &frame, TIME_INFINITE);
 80034c4:	0010      	movs	r0, r2
    frame.DLC = 0;
 80034c6:	7013      	strb	r3, [r2, #0]
    canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &frame, TIME_INFINITE);
 80034c8:	4249      	negs	r1, r1
 80034ca:	f7ff fc39 	bl	8002d40 <canTransmitTimeout.constprop.0.isra.0>
                chThdSleep(50);
 80034ce:	2032      	movs	r0, #50	; 0x32
 80034d0:	f7ff fc0e 	bl	8002cf0 <chThdSleep>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034d4:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d8:	4b20      	ldr	r3, [pc, #128]	; (800355c <_Z11CanRxThreadPv+0x3ac>)
 80034da:	4a21      	ldr	r2, [pc, #132]	; (8003560 <_Z11CanRxThreadPv+0x3b0>)
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80034e2:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80034e4:	e7fd      	b.n	80034e2 <_Z11CanRxThreadPv+0x332>
  __ASM volatile ("cpsid i" : : : "memory");
 80034e6:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 80034e8:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <_Z11CanRxThreadPv+0x3a4>)
 80034ea:	6473      	str	r3, [r6, #68]	; 0x44
  while (true) {
 80034ec:	e7fe      	b.n	80034ec <_Z11CanRxThreadPv+0x33c>
            if ((frame.data8[1] & 0x1) == 0x1)
 80034ee:	2121      	movs	r1, #33	; 0x21
 80034f0:	ab06      	add	r3, sp, #24
 80034f2:	185b      	adds	r3, r3, r1
 80034f4:	4659      	mov	r1, fp
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	400b      	ands	r3, r1
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	9a05      	ldr	r2, [sp, #20]
 80034fe:	6013      	str	r3, [r2, #0]
            float vbatt = frame.data8[0] * 0.1f;
 8003500:	2220      	movs	r2, #32
 8003502:	ab06      	add	r3, sp, #24
 8003504:	189b      	adds	r3, r3, r2
 8003506:	7818      	ldrb	r0, [r3, #0]
 8003508:	f002 fccc 	bl	8005ea4 <__aeabi_i2f>
            if (vbatt < 5)
 800350c:	4915      	ldr	r1, [pc, #84]	; (8003564 <_Z11CanRxThreadPv+0x3b4>)
            float vbatt = frame.data8[0] * 0.1f;
 800350e:	1c04      	adds	r4, r0, #0
            if (vbatt < 5)
 8003510:	f7fe fb26 	bl	8001b60 <__aeabi_fcmplt>
 8003514:	2800      	cmp	r0, #0
 8003516:	d029      	beq.n	800356c <_Z11CanRxThreadPv+0x3bc>
                remoteBatteryVoltage = 14;
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <_Z11CanRxThreadPv+0x3b8>)
 800351a:	9a03      	ldr	r2, [sp, #12]
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e76f      	b.n	8003400 <_Z11CanRxThreadPv+0x250>
 8003520:	20000a2c 	.word	0x20000a2c
 8003524:	200017f8 	.word	0x200017f8
 8003528:	20000b10 	.word	0x20000b10
 800352c:	200015e0 	.word	0x200015e0
 8003530:	20000cb8 	.word	0x20000cb8
 8003534:	2000160c 	.word	0x2000160c
 8003538:	08007c00 	.word	0x08007c00
 800353c:	0ef40000 	.word	0x0ef40000
 8003540:	40022000 	.word	0x40022000
 8003544:	45670123 	.word	0x45670123
 8003548:	cdef89ab 	.word	0xcdef89ab
 800354c:	00727573 	.word	0x00727573
 8003550:	08006174 	.word	0x08006174
 8003554:	080062f0 	.word	0x080062f0
 8003558:	0ef50000 	.word	0x0ef50000
 800355c:	e000ed00 	.word	0xe000ed00
 8003560:	05fa0004 	.word	0x05fa0004
 8003564:	42480000 	.word	0x42480000
 8003568:	41600000 	.word	0x41600000
            float vbatt = frame.data8[0] * 0.1f;
 800356c:	4903      	ldr	r1, [pc, #12]	; (800357c <_Z11CanRxThreadPv+0x3cc>)
 800356e:	1c20      	adds	r0, r4, #0
 8003570:	f002 f98a 	bl	8005888 <__aeabi_fmul>
                remoteBatteryVoltage = vbatt;
 8003574:	9b03      	ldr	r3, [sp, #12]
 8003576:	6018      	str	r0, [r3, #0]
 8003578:	e742      	b.n	8003400 <_Z11CanRxThreadPv+0x250>
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	3dcccccd 	.word	0x3dcccccd

08003580 <_ZL10PumpThreadPv>:
#endif
};

static THD_WORKING_AREA(waPumpThread, 256);
static void PumpThread(void*)
{
 8003580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003582:	4647      	mov	r7, r8
 8003584:	46ce      	mov	lr, r9
 8003586:	4b26      	ldr	r3, [pc, #152]	; (8003620 <_ZL10PumpThreadPv+0xa0>)
 8003588:	4d26      	ldr	r5, [pc, #152]	; (8003624 <_ZL10PumpThreadPv+0xa4>)
 800358a:	4699      	mov	r9, r3
 800358c:	4b26      	ldr	r3, [pc, #152]	; (8003628 <_ZL10PumpThreadPv+0xa8>)
 800358e:	b580      	push	{r7, lr}
 8003590:	4698      	mov	r8, r3

            const auto& sampler = GetSampler(ch);
            const auto& heater = GetHeaterController(ch);

            // Only actuate pump when running closed loop!
            if (heater.IsRunningClosedLoop())
 8003592:	682b      	ldr	r3, [r5, #0]
 8003594:	4f25      	ldr	r7, [pc, #148]	; (800362c <_ZL10PumpThreadPv+0xac>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4e25      	ldr	r6, [pc, #148]	; (8003630 <_ZL10PumpThreadPv+0xb0>)
 800359a:	4c26      	ldr	r4, [pc, #152]	; (8003634 <_ZL10PumpThreadPv+0xb4>)
{
 800359c:	b087      	sub	sp, #28
 800359e:	42bb      	cmp	r3, r7
 80035a0:	d12e      	bne.n	8003600 <_ZL10PumpThreadPv+0x80>
            if (heater.IsRunningClosedLoop())
 80035a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d12f      	bne.n	8003608 <_ZL10PumpThreadPv+0x88>
            {
                float nernstVoltage = sampler.GetNernstDc();
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	454b      	cmp	r3, r9
 80035ae:	d133      	bne.n	8003618 <_ZL10PumpThreadPv+0x98>
    return nernstDc;
 80035b0:	6932      	ldr	r2, [r6, #16]

                float result = s.pumpPid.GetOutput(NERNST_TARGET, nernstVoltage);
 80035b2:	4921      	ldr	r1, [pc, #132]	; (8003638 <_ZL10PumpThreadPv+0xb8>)
 80035b4:	4640      	mov	r0, r8
 80035b6:	f7fe fda3 	bl	8002100 <_ZN3Pid9GetOutputEff>

                // result is in mA
                SetPumpCurrentTarget(ch, result * 1000);
 80035ba:	4920      	ldr	r1, [pc, #128]	; (800363c <_ZL10PumpThreadPv+0xbc>)
 80035bc:	f002 f964 	bl	8005888 <__aeabi_fmul>
 80035c0:	f002 fc50 	bl	8005e64 <__aeabi_f2iz>
 80035c4:	f7ff fa0c 	bl	80029e0 <_Z20SetPumpCurrentTargetil.constprop.0>
 80035c8:	b672      	cpsid	i
    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 80035ca:	2114      	movs	r1, #20
 80035cc:	68e2      	ldr	r2, [r4, #12]
 80035ce:	a801      	add	r0, sp, #4
 80035d0:	f7ff fa5e 	bl	8002a90 <chVTDoSetI.constprop.0>
    chSchGoSleepS(newstate);
 80035d4:	2008      	movs	r0, #8
 80035d6:	f7ff fb6b 	bl	8002cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80035da:	9b04      	ldr	r3, [sp, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <_ZL10PumpThreadPv+0x66>
      chVTDoResetI(&vt);
 80035e0:	a801      	add	r0, sp, #4
 80035e2:	f7fe fb05 	bl	8001bf0 <chVTDoResetI>
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	42a3      	cmp	r3, r4
 80035ea:	d004      	beq.n	80035f6 <_ZL10PumpThreadPv+0x76>
 80035ec:	68e2      	ldr	r2, [r4, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	6892      	ldr	r2, [r2, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d30c      	bcc.n	8003610 <_ZL10PumpThreadPv+0x90>
  __ASM volatile ("cpsie i" : : : "memory");
 80035f6:	b662      	cpsie	i
            if (heater.IsRunningClosedLoop())
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	42bb      	cmp	r3, r7
 80035fe:	d0d0      	beq.n	80035a2 <_ZL10PumpThreadPv+0x22>
 8003600:	0028      	movs	r0, r5
 8003602:	4798      	blx	r3
 8003604:	2800      	cmp	r0, #0
 8003606:	d1cf      	bne.n	80035a8 <_ZL10PumpThreadPv+0x28>
            }
            else
            {
                // Otherwise set zero pump current to avoid damaging the sensor
                SetPumpCurrentTarget(ch, 0);
 8003608:	2000      	movs	r0, #0
 800360a:	f7ff f9e9 	bl	80029e0 <_Z20SetPumpCurrentTargetil.constprop.0>
        for (int ch = 0; ch < AFR_CHANNELS; ch++)
 800360e:	e7db      	b.n	80035c8 <_ZL10PumpThreadPv+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8003610:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <_ZL10PumpThreadPv+0xc0>)
 8003614:	6463      	str	r3, [r4, #68]	; 0x44
  while (true) {
 8003616:	e7fe      	b.n	8003616 <_ZL10PumpThreadPv+0x96>
                float nernstVoltage = sampler.GetNernstDc();
 8003618:	0030      	movs	r0, r6
 800361a:	4798      	blx	r3
 800361c:	1c02      	adds	r2, r0, #0
 800361e:	e7c8      	b.n	80035b2 <_ZL10PumpThreadPv+0x32>
 8003620:	080021a1 	.word	0x080021a1
 8003624:	20001930 	.word	0x20001930
 8003628:	200015e4 	.word	0x200015e4
 800362c:	08002411 	.word	0x08002411
 8003630:	20001728 	.word	0x20001728
 8003634:	200017f8 	.word	0x200017f8
 8003638:	3ee66666 	.word	0x3ee66666
 800363c:	447a0000 	.word	0x447a0000
 8003640:	08006244 	.word	0x08006244
	...

08003650 <_Z12AuxOutThreadPv>:
}

/* TODO: merge with some other communication thread? */
static THD_WORKING_AREA(waAuxOutThread, 256);
void AuxOutThread(void*)
{
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	46de      	mov	lr, fp
 8003654:	4657      	mov	r7, sl
 8003656:	464e      	mov	r6, r9
 8003658:	4645      	mov	r5, r8
 800365a:	b5e0      	push	{r5, r6, r7, lr}
 800365c:	b093      	sub	sp, #76	; 0x4c
    const auto cfg = GetConfiguration();
 800365e:	f7ff fd5f 	bl	8003120 <_Z16GetConfigurationv>
 8003662:	1d43      	adds	r3, r0, #5
 8003664:	469b      	mov	fp, r3
 8003666:	2345      	movs	r3, #69	; 0x45
 8003668:	469a      	mov	sl, r3
 800366a:	4b72      	ldr	r3, [pc, #456]	; (8003834 <_Z12AuxOutThreadPv+0x1e4>)
 800366c:	0004      	movs	r4, r0

    while(1)
    {
        for (int ch = 0; ch < AFR_CHANNELS; ch++)
        {
            float input = AuxGetInputSignal(cfg->auxOutputSource[ch]);
 800366e:	4698      	mov	r8, r3
 8003670:	2385      	movs	r3, #133	; 0x85
 8003672:	5ce3      	ldrb	r3, [r4, r3]
    switch (sel)
 8003674:	4e70      	ldr	r6, [pc, #448]	; (8003838 <_Z12AuxOutThreadPv+0x1e8>)
 8003676:	4482      	add	sl, r0
 8003678:	2b02      	cmp	r3, #2
 800367a:	d100      	bne.n	800367e <_Z12AuxOutThreadPv+0x2e>
 800367c:	e0c2      	b.n	8003804 <_Z12AuxOutThreadPv+0x1b4>
 800367e:	2b02      	cmp	r3, #2
 8003680:	d84e      	bhi.n	8003720 <_Z12AuxOutThreadPv+0xd0>
 8003682:	2b00      	cmp	r3, #0
 8003684:	d100      	bne.n	8003688 <_Z12AuxOutThreadPv+0x38>
 8003686:	e0c6      	b.n	8003816 <_Z12AuxOutThreadPv+0x1c6>
            return 14.7f * GetLambda(1);
 8003688:	2001      	movs	r0, #1
 800368a:	f7fe ff59 	bl	8002540 <_Z9GetLambdai>
 800368e:	496b      	ldr	r1, [pc, #428]	; (800383c <_Z12AuxOutThreadPv+0x1ec>)
 8003690:	f002 f8fa 	bl	8005888 <__aeabi_fmul>
 8003694:	1c05      	adds	r5, r0, #0
            float voltage = interpolate2d(input, cfg->auxOutBins[ch], cfg->auxOutValues[ch]);
 8003696:	2220      	movs	r2, #32
 8003698:	4659      	mov	r1, fp
 800369a:	a802      	add	r0, sp, #8
 800369c:	f001 fd20 	bl	80050e0 <memcpy>
 80036a0:	2220      	movs	r2, #32
 80036a2:	4651      	mov	r1, sl
 80036a4:	a80a      	add	r0, sp, #40	; 0x28
 80036a6:	f001 fd1b 	bl	80050e0 <memcpy>
	if (cisnan(value)) {
 80036aa:	4b65      	ldr	r3, [pc, #404]	; (8003840 <_Z12AuxOutThreadPv+0x1f0>)
 80036ac:	429d      	cmp	r5, r3
 80036ae:	d149      	bne.n	8003744 <_Z12AuxOutThreadPv+0xf4>
		return { 0, 0.0f };
 80036b0:	2300      	movs	r3, #0
 80036b2:	2700      	movs	r7, #0
 80036b4:	4699      	mov	r9, r3
 80036b6:	2501      	movs	r5, #1
	return high * frac + low * (1 - frac);
 80036b8:	2320      	movs	r3, #32
 80036ba:	aa02      	add	r2, sp, #8
 80036bc:	18d2      	adds	r2, r2, r3
	float high = static_cast<float>(values[b.Idx + 1]);
 80036be:	00ad      	lsls	r5, r5, #2
	return high * frac + low * (1 - frac);
 80036c0:	5951      	ldr	r1, [r2, r5]
 80036c2:	1c38      	adds	r0, r7, #0
 80036c4:	f002 f8e0 	bl	8005888 <__aeabi_fmul>
 80036c8:	1c05      	adds	r5, r0, #0
 80036ca:	20fe      	movs	r0, #254	; 0xfe
 80036cc:	1c39      	adds	r1, r7, #0
 80036ce:	0580      	lsls	r0, r0, #22
 80036d0:	f002 fa28 	bl	8005b24 <__aeabi_fsub>
 80036d4:	2320      	movs	r3, #32
 80036d6:	4649      	mov	r1, r9
 80036d8:	aa02      	add	r2, sp, #8
 80036da:	18d3      	adds	r3, r2, r3
 80036dc:	5859      	ldr	r1, [r3, r1]
 80036de:	f002 f8d3 	bl	8005888 <__aeabi_fmul>
 80036e2:	1c01      	adds	r1, r0, #0
 80036e4:	1c28      	adds	r0, r5, #0
 80036e6:	f001 fd65 	bl	80051b4 <__aeabi_fadd>
    voltage = voltage / AUXOUT_GAIN;
 80036ea:	4956      	ldr	r1, [pc, #344]	; (8003844 <_Z12AuxOutThreadPv+0x1f4>)
 80036ec:	f002 f8cc 	bl	8005888 <__aeabi_fmul>
 80036f0:	4955      	ldr	r1, [pc, #340]	; (8003848 <_Z12AuxOutThreadPv+0x1f8>)
 80036f2:	1c05      	adds	r5, r0, #0
 80036f4:	f7fe fa3e 	bl	8001b74 <__aeabi_fcmple>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d100      	bne.n	80036fe <_Z12AuxOutThreadPv+0xae>
 80036fc:	4d52      	ldr	r5, [pc, #328]	; (8003848 <_Z12AuxOutThreadPv+0x1f8>)
 80036fe:	2100      	movs	r1, #0
 8003700:	1c28      	adds	r0, r5, #0
 8003702:	f7fe fa4b 	bl	8001b9c <__aeabi_fcmpge>
 8003706:	2800      	cmp	r0, #0
 8003708:	d100      	bne.n	800370c <_Z12AuxOutThreadPv+0xbc>
 800370a:	2500      	movs	r5, #0
    dacStart(m_driver, &config);
}

void Dac::SetVoltage(int channel, float voltage) {
    voltage = clampF(0, voltage, VCC_VOLTS);
    m_voltageFloat[channel] = voltage;
 800370c:	4643      	mov	r3, r8

    dacPutChannelX(m_driver, channel, voltage / VCC_VOLTS * ((1 << 12) - 1));
 800370e:	681f      	ldr	r7, [r3, #0]
    m_voltageFloat[channel] = voltage;
 8003710:	605d      	str	r5, [r3, #4]
 * @xclass
 */
void dacPutChannelX(DACDriver *dacp, dacchannel_t channel, dacsample_t sample) {

  osalDbgCheck(channel < (dacchannel_t)DAC_MAX_CHANNELS);
  osalDbgAssert(dacp->state == DAC_READY, "invalid state");
 8003712:	783b      	ldrb	r3, [r7, #0]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d04d      	beq.n	80037b4 <_Z12AuxOutThreadPv+0x164>
 8003718:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 800371a:	4b4c      	ldr	r3, [pc, #304]	; (800384c <_Z12AuxOutThreadPv+0x1fc>)
 800371c:	6473      	str	r3, [r6, #68]	; 0x44
  while (true) {
 800371e:	e7fe      	b.n	800371e <_Z12AuxOutThreadPv+0xce>
    switch (sel)
 8003720:	2b03      	cmp	r3, #3
 8003722:	d104      	bne.n	800372e <_Z12AuxOutThreadPv+0xde>
            return GetLambda(1);
 8003724:	2001      	movs	r0, #1
 8003726:	f7fe ff0b 	bl	8002540 <_Z9GetLambdai>
 800372a:	1c05      	adds	r5, r0, #0
 800372c:	e7b3      	b.n	8003696 <_Z12AuxOutThreadPv+0x46>
            float voltage = interpolate2d(input, cfg->auxOutBins[ch], cfg->auxOutValues[ch]);
 800372e:	2220      	movs	r2, #32
 8003730:	4659      	mov	r1, fp
 8003732:	a802      	add	r0, sp, #8
 8003734:	f001 fcd4 	bl	80050e0 <memcpy>
 8003738:	2220      	movs	r2, #32
 800373a:	4651      	mov	r1, sl
 800373c:	a80a      	add	r0, sp, #40	; 0x28
 800373e:	f001 fccf 	bl	80050e0 <memcpy>
 8003742:	2500      	movs	r5, #0
	if (value <= bins[0]) {
 8003744:	9802      	ldr	r0, [sp, #8]
 8003746:	1c29      	adds	r1, r5, #0
 8003748:	f7fe fa28 	bl	8001b9c <__aeabi_fcmpge>
 800374c:	2800      	cmp	r0, #0
 800374e:	d1af      	bne.n	80036b0 <_Z12AuxOutThreadPv+0x60>
	if (value >= bins[TSize - 1]) {
 8003750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003752:	1c29      	adds	r1, r5, #0
 8003754:	f7fe fa0e 	bl	8001b74 <__aeabi_fcmple>
 8003758:	2800      	cmp	r0, #0
 800375a:	d164      	bne.n	8003826 <_Z12AuxOutThreadPv+0x1d6>
 800375c:	ab02      	add	r3, sp, #8
 800375e:	4699      	mov	r9, r3
	for (idx = 0; idx < TSize - 1; idx++) {
 8003760:	0007      	movs	r7, r0
		if (bins[idx + 1] > value) {
 8003762:	464b      	mov	r3, r9
 8003764:	1c29      	adds	r1, r5, #0
 8003766:	6858      	ldr	r0, [r3, #4]
 8003768:	9700      	str	r7, [sp, #0]
 800376a:	3701      	adds	r7, #1
 800376c:	f7fe fa0c 	bl	8001b88 <__aeabi_fcmpgt>
 8003770:	2800      	cmp	r0, #0
 8003772:	d106      	bne.n	8003782 <_Z12AuxOutThreadPv+0x132>
	for (idx = 0; idx < TSize - 1; idx++) {
 8003774:	2304      	movs	r3, #4
 8003776:	469c      	mov	ip, r3
 8003778:	44e1      	add	r9, ip
 800377a:	2f07      	cmp	r7, #7
 800377c:	d1f1      	bne.n	8003762 <_Z12AuxOutThreadPv+0x112>
 800377e:	3303      	adds	r3, #3
 8003780:	9300      	str	r3, [sp, #0]
	float low = bins[idx];
 8003782:	9b00      	ldr	r3, [sp, #0]
	float fraction = (value - low) / (high - low);
 8003784:	1c28      	adds	r0, r5, #0
	float low = bins[idx];
 8003786:	009a      	lsls	r2, r3, #2
 8003788:	4691      	mov	r9, r2
 800378a:	4649      	mov	r1, r9
 800378c:	aa02      	add	r2, sp, #8
 800378e:	5857      	ldr	r7, [r2, r1]
	float fraction = (value - low) / (high - low);
 8003790:	1c39      	adds	r1, r7, #0
 8003792:	f002 f9c7 	bl	8005b24 <__aeabi_fsub>
	float high = bins[idx + 1];
 8003796:	9b00      	ldr	r3, [sp, #0]
	float fraction = (value - low) / (high - low);
 8003798:	aa02      	add	r2, sp, #8
	float high = bins[idx + 1];
 800379a:	1c5d      	adds	r5, r3, #1
 800379c:	00ab      	lsls	r3, r5, #2
	float fraction = (value - low) / (high - low);
 800379e:	1c39      	adds	r1, r7, #0
 80037a0:	9001      	str	r0, [sp, #4]
 80037a2:	58d0      	ldr	r0, [r2, r3]
 80037a4:	f002 f9be 	bl	8005b24 <__aeabi_fsub>
 80037a8:	1c01      	adds	r1, r0, #0
 80037aa:	9801      	ldr	r0, [sp, #4]
 80037ac:	f001 fea2 	bl	80054f4 <__aeabi_fdiv>
 80037b0:	1c07      	adds	r7, r0, #0
 80037b2:	e781      	b.n	80036b8 <_Z12AuxOutThreadPv+0x68>
    dacPutChannelX(m_driver, channel, voltage / VCC_VOLTS * ((1 << 12) - 1));
 80037b4:	4926      	ldr	r1, [pc, #152]	; (8003850 <_Z12AuxOutThreadPv+0x200>)
 80037b6:	1c28      	adds	r0, r5, #0
 80037b8:	f002 f866 	bl	8005888 <__aeabi_fmul>
 80037bc:	f001 fce2 	bl	8005184 <__aeabi_f2uiz>

  dac_lld_put_channel(dacp, channel, sample);
 80037c0:	2100      	movs	r1, #0
 80037c2:	b282      	uxth	r2, r0
 80037c4:	0038      	movs	r0, r7
 80037c6:	f7fe fc23 	bl	8002010 <dac_lld_put_channel>
 80037ca:	b672      	cpsid	i
    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 80037cc:	2164      	movs	r1, #100	; 0x64
 80037ce:	68f2      	ldr	r2, [r6, #12]
 80037d0:	a80a      	add	r0, sp, #40	; 0x28
 80037d2:	f7ff f95d 	bl	8002a90 <chVTDoSetI.constprop.0>
    chSchGoSleepS(newstate);
 80037d6:	2008      	movs	r0, #8
 80037d8:	f7ff fa6a 	bl	8002cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80037dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <_Z12AuxOutThreadPv+0x198>
      chVTDoResetI(&vt);
 80037e2:	a80a      	add	r0, sp, #40	; 0x28
 80037e4:	f7fe fa04 	bl	8001bf0 <chVTDoResetI>
 80037e8:	6833      	ldr	r3, [r6, #0]
 80037ea:	42b3      	cmp	r3, r6
 80037ec:	d004      	beq.n	80037f8 <_Z12AuxOutThreadPv+0x1a8>
 80037ee:	68f2      	ldr	r2, [r6, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	6892      	ldr	r2, [r2, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d30a      	bcc.n	800380e <_Z12AuxOutThreadPv+0x1be>
  __ASM volatile ("cpsie i" : : : "memory");
 80037f8:	b662      	cpsie	i
            float input = AuxGetInputSignal(cfg->auxOutputSource[ch]);
 80037fa:	2385      	movs	r3, #133	; 0x85
 80037fc:	5ce3      	ldrb	r3, [r4, r3]
    switch (sel)
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d000      	beq.n	8003804 <_Z12AuxOutThreadPv+0x1b4>
 8003802:	e73c      	b.n	800367e <_Z12AuxOutThreadPv+0x2e>
            return GetLambda(0);
 8003804:	2000      	movs	r0, #0
 8003806:	f7fe fe9b 	bl	8002540 <_Z9GetLambdai>
 800380a:	1c05      	adds	r5, r0, #0
 800380c:	e743      	b.n	8003696 <_Z12AuxOutThreadPv+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 800380e:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <_Z12AuxOutThreadPv+0x204>)
 8003812:	6473      	str	r3, [r6, #68]	; 0x44
  while (true) {
 8003814:	e7fe      	b.n	8003814 <_Z12AuxOutThreadPv+0x1c4>
            return 14.7f * GetLambda(0);
 8003816:	2000      	movs	r0, #0
 8003818:	f7fe fe92 	bl	8002540 <_Z9GetLambdai>
 800381c:	4907      	ldr	r1, [pc, #28]	; (800383c <_Z12AuxOutThreadPv+0x1ec>)
 800381e:	f002 f833 	bl	8005888 <__aeabi_fmul>
 8003822:	1c05      	adds	r5, r0, #0
 8003824:	e737      	b.n	8003696 <_Z12AuxOutThreadPv+0x46>
		return { TSize - 2, 1.0f };
 8003826:	27fe      	movs	r7, #254	; 0xfe
 8003828:	2318      	movs	r3, #24
 800382a:	2507      	movs	r5, #7
 800382c:	4699      	mov	r9, r3
 800382e:	05bf      	lsls	r7, r7, #22
 8003830:	e742      	b.n	80036b8 <_Z12AuxOutThreadPv+0x68>
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	20001600 	.word	0x20001600
 8003838:	200017f8 	.word	0x200017f8
 800383c:	416b3333 	.word	0x416b3333
 8003840:	7fc00000 	.word	0x7fc00000
 8003844:	3f294196 	.word	0x3f294196
 8003848:	40533333 	.word	0x40533333
 800384c:	080062c0 	.word	0x080062c0
 8003850:	449b1d18 	.word	0x449b1d18
 8003854:	08006244 	.word	0x08006244
	...

08003860 <_ZL14SamplingThreadPv>:
}

static THD_WORKING_AREA(waSamplingThread, 256);

static void SamplingThread(void*)
{
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	46de      	mov	lr, fp
 8003864:	4657      	mov	r7, sl
 8003866:	464e      	mov	r6, r9
 8003868:	4645      	mov	r5, r8
 800386a:	b5e0      	push	{r5, r6, r7, lr}
    chRegSetThreadName("Sampling");

    SetupESRDriver(GetSensorType());

    /* GD32: Insert 20us delay after ADC enable */
    chThdSleepMilliseconds(1);
 800386c:	200a      	movs	r0, #10
{
 800386e:	b085      	sub	sp, #20
    chThdSleepMilliseconds(1);
 8003870:	f7ff fa3e 	bl	8002cf0 <chThdSleep>
 8003874:	b672      	cpsid	i
                 adcsample_t *samples,
                 size_t depth) {
  msg_t msg;

  osalSysLock();
  osalDbgAssert(adcp->thread == NULL, "already waiting");
 8003876:	4c60      	ldr	r4, [pc, #384]	; (80039f8 <_ZL14SamplingThreadPv+0x198>)
 8003878:	4e60      	ldr	r6, [pc, #384]	; (80039fc <_ZL14SamplingThreadPv+0x19c>)
 800387a:	6963      	ldr	r3, [r4, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <_ZL14SamplingThreadPv+0x28>
 8003880:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8003882:	4b5f      	ldr	r3, [pc, #380]	; (8003a00 <_ZL14SamplingThreadPv+0x1a0>)
 8003884:	6473      	str	r3, [r6, #68]	; 0x44
  while (true) {
 8003886:	e7fe      	b.n	8003886 <_ZL14SamplingThreadPv+0x26>
 8003888:	4b5e      	ldr	r3, [pc, #376]	; (8003a04 <_ZL14SamplingThreadPv+0x1a4>)
 800388a:	4f5f      	ldr	r7, [pc, #380]	; (8003a08 <_ZL14SamplingThreadPv+0x1a8>)
 800388c:	4698      	mov	r8, r3
 800388e:	4b5f      	ldr	r3, [pc, #380]	; (8003a0c <_ZL14SamplingThreadPv+0x1ac>)
 8003890:	4699      	mov	r9, r3
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <_ZL14SamplingThreadPv+0x1b0>)
 8003894:	469a      	mov	sl, r3
 8003896:	4b5f      	ldr	r3, [pc, #380]	; (8003a14 <_ZL14SamplingThreadPv+0x1b4>)
 8003898:	469b      	mov	fp, r3
  osalDbgAssert((adcp->state == ADC_READY) ||
 800389a:	7823      	ldrb	r3, [r4, #0]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d005      	beq.n	80038ac <_ZL14SamplingThreadPv+0x4c>
 80038a0:	2b05      	cmp	r3, #5
 80038a2:	d003      	beq.n	80038ac <_ZL14SamplingThreadPv+0x4c>
 80038a4:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 80038a6:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <_ZL14SamplingThreadPv+0x1b8>)
 80038a8:	6473      	str	r3, [r6, #68]	; 0x44
  while (true) {
 80038aa:	e7fe      	b.n	80038aa <_ZL14SamplingThreadPv+0x4a>
  adcp->samples  = samples;
 80038ac:	4643      	mov	r3, r8
 80038ae:	60a3      	str	r3, [r4, #8]
  adcp->depth    = depth;
 80038b0:	2318      	movs	r3, #24
 80038b2:	60e3      	str	r3, [r4, #12]
  adcp->grpp     = grpp;
 80038b4:	464b      	mov	r3, r9
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80038b6:	4641      	mov	r1, r8
 80038b8:	6123      	str	r3, [r4, #16]
 80038ba:	69e3      	ldr	r3, [r4, #28]
  mode  = adcp->dmamode;
 80038bc:	6a22      	ldr	r2, [r4, #32]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80038be:	685b      	ldr	r3, [r3, #4]
  adcp->state    = ADC_ACTIVE;
 80038c0:	2003      	movs	r0, #3
 80038c2:	60d9      	str	r1, [r3, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 80038c4:	2148      	movs	r1, #72	; 0x48
 80038c6:	7020      	strb	r0, [r4, #0]
 80038c8:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
 80038ca:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(adcp->dmastp);
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	3947      	subs	r1, #71	; 0x47
 80038d0:	430a      	orrs	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
  adcp->adc->ISR    = adcp->adc->ISR;
 80038d4:	69a3      	ldr	r3, [r4, #24]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	601a      	str	r2, [r3, #0]
  adcp->adc->IER    = ADC_IER_OVRIE | ADC_IER_AWD1IE;
 80038da:	2290      	movs	r2, #144	; 0x90
 80038dc:	605a      	str	r2, [r3, #4]
  adcp->adc->TR1    = grpp->tr;
 80038de:	2200      	movs	r2, #0
 80038e0:	621a      	str	r2, [r3, #32]
  adcp->adc->CHSELR = grpp->chselr;
 80038e2:	320d      	adds	r2, #13
  adcp->adc->SMPR   = grpp->smpr;
 80038e4:	6159      	str	r1, [r3, #20]
  adcp->adc->CHSELR = grpp->chselr;
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
  adcp->adc->CFGR1  = cfgr1;
 80038e8:	4a4c      	ldr	r2, [pc, #304]	; (8003a1c <_ZL14SamplingThreadPv+0x1bc>)
 80038ea:	60da      	str	r2, [r3, #12]
  adcp->adc->CR |= ADC_CR_ADSTART;
 80038ec:	2204      	movs	r2, #4
 80038ee:	6899      	ldr	r1, [r3, #8]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]
  tp->u.wttrp = trp;
 80038f4:	0022      	movs	r2, r4
 80038f6:	68f3      	ldr	r3, [r6, #12]
 80038f8:	3214      	adds	r2, #20
  *trp = tp;
 80038fa:	6163      	str	r3, [r4, #20]
  tp->u.wttrp = trp;
 80038fc:	619a      	str	r2, [r3, #24]
    chSchGoSleepS(newstate);
 80038fe:	f7ff f9d7 	bl	8002cb0 <chSchGoSleepS>
 8003902:	6833      	ldr	r3, [r6, #0]
 8003904:	42b3      	cmp	r3, r6
 8003906:	d004      	beq.n	8003912 <_ZL14SamplingThreadPv+0xb2>
 8003908:	68f2      	ldr	r2, [r6, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	6892      	ldr	r2, [r2, #8]
 800390e:	429a      	cmp	r2, r3
 8003910:	d36d      	bcc.n	80039ee <_ZL14SamplingThreadPv+0x18e>
  __ASM volatile ("cpsie i" : : : "memory");
 8003912:	b662      	cpsie	i
    for (size_t i = 0; i < ADC_OVERSAMPLE; i++)
 8003914:	4641      	mov	r1, r8
 8003916:	4643      	mov	r3, r8
    uint32_t sum = 0;
 8003918:	2000      	movs	r0, #0
 800391a:	3190      	adds	r1, #144	; 0x90
        sum += buffer[idx];
 800391c:	881a      	ldrh	r2, [r3, #0]
    for (size_t i = 0; i < ADC_OVERSAMPLE; i++)
 800391e:	3306      	adds	r3, #6
        sum += buffer[idx];
 8003920:	1880      	adds	r0, r0, r2
    for (size_t i = 0; i < ADC_OVERSAMPLE; i++)
 8003922:	4299      	cmp	r1, r3
 8003924:	d1fa      	bne.n	800391c <_ZL14SamplingThreadPv+0xbc>
    return (float)sum * scale;
 8003926:	f002 fb0f 	bl	8005f48 <__aeabi_ui2f>
                .NernstVoltage = AverageSamples(adcBuffer, 0) * NERNST_INPUT_GAIN,
 800392a:	493d      	ldr	r1, [pc, #244]	; (8003a20 <_ZL14SamplingThreadPv+0x1c0>)
 800392c:	f001 ffac 	bl	8005888 <__aeabi_fmul>
 8003930:	4641      	mov	r1, r8
 8003932:	9000      	str	r0, [sp, #0]
    for (size_t i = 0; i < ADC_OVERSAMPLE; i++)
 8003934:	4653      	mov	r3, sl
    uint32_t sum = 0;
 8003936:	2000      	movs	r0, #0
 8003938:	3192      	adds	r1, #146	; 0x92
        sum += buffer[idx];
 800393a:	881a      	ldrh	r2, [r3, #0]
    for (size_t i = 0; i < ADC_OVERSAMPLE; i++)
 800393c:	3306      	adds	r3, #6
        sum += buffer[idx];
 800393e:	1880      	adds	r0, r0, r2
    for (size_t i = 0; i < ADC_OVERSAMPLE; i++)
 8003940:	4299      	cmp	r1, r3
 8003942:	d1fa      	bne.n	800393a <_ZL14SamplingThreadPv+0xda>
    return (float)sum * scale;
 8003944:	f002 fb00 	bl	8005f48 <__aeabi_ui2f>
 8003948:	4641      	mov	r1, r8
 800394a:	465b      	mov	r3, fp
    uint32_t sum = 0;
 800394c:	2500      	movs	r5, #0
    return (float)sum * scale;
 800394e:	9002      	str	r0, [sp, #8]
    for (size_t i = 0; i < ADC_OVERSAMPLE; i++)
 8003950:	3194      	adds	r1, #148	; 0x94
        sum += buffer[idx];
 8003952:	881a      	ldrh	r2, [r3, #0]
    for (size_t i = 0; i < ADC_OVERSAMPLE; i++)
 8003954:	3306      	adds	r3, #6
        sum += buffer[idx];
 8003956:	18ad      	adds	r5, r5, r2
    for (size_t i = 0; i < ADC_OVERSAMPLE; i++)
 8003958:	4299      	cmp	r1, r3
 800395a:	d1fa      	bne.n	8003952 <_ZL14SamplingThreadPv+0xf2>
    return 22000;
}

void ToggleESRDriver(SensorType)
{
    palTogglePad(NERNST_49_ESR_DRIVER_PORT, NERNST_49_ESR_DRIVER_PIN);
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	4a31      	ldr	r2, [pc, #196]	; (8003a24 <_ZL14SamplingThreadPv+0x1c4>)
    // r2_opposite_phase estimates where the previous sample would be had we not been toggling
    // AKA the absolute value of the difference between r2_opposite_phase and r2 is the amplitude
    // of the AC component on the nernst voltage.  We have to pull this trick so as to use the past 3
    // samples to cancel out any slope in the DC (aka actual nernst cell output) from the AC measurement
    // See firmware/sampling.png for a drawing of what's going on here
    float r2_opposite_phase = (r_1 + r_3) / 2;
 8003960:	9800      	ldr	r0, [sp, #0]
 8003962:	6951      	ldr	r1, [r2, #20]
 8003964:	404b      	eors	r3, r1
 8003966:	6153      	str	r3, [r2, #20]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	f001 fc23 	bl	80051b4 <__aeabi_fadd>
 800396e:	21fc      	movs	r1, #252	; 0xfc
 8003970:	0589      	lsls	r1, r1, #22
 8003972:	f001 ff89 	bl	8005888 <__aeabi_fmul>

    // Compute AC (difference) and DC (average) components
    float nernstAcLocal = f_abs(r2_opposite_phase - r_2);
 8003976:	687b      	ldr	r3, [r7, #4]
    nernstDc = (r2_opposite_phase + r_2) / 2;
 8003978:	9003      	str	r0, [sp, #12]
 800397a:	1c19      	adds	r1, r3, #0
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	f001 fc19 	bl	80051b4 <__aeabi_fadd>
 8003982:	21fc      	movs	r1, #252	; 0xfc
 8003984:	0589      	lsls	r1, r1, #22
 8003986:	f001 ff7f 	bl	8005888 <__aeabi_fmul>
    float nernstAcLocal = f_abs(r2_opposite_phase - r_2);
 800398a:	9901      	ldr	r1, [sp, #4]
    nernstDc = (r2_opposite_phase + r_2) / 2;
 800398c:	6138      	str	r0, [r7, #16]
    float nernstAcLocal = f_abs(r2_opposite_phase - r_2);
 800398e:	9803      	ldr	r0, [sp, #12]
 8003990:	f002 f8c8 	bl	8005b24 <__aeabi_fsub>
    return x > 0 ? x : -x;
 8003994:	0040      	lsls	r0, r0, #1

    nernstAc =
        (1 - ESR_SENSE_ALPHA) * nernstAc +
        ESR_SENSE_ALPHA * nernstAcLocal;
 8003996:	4924      	ldr	r1, [pc, #144]	; (8003a28 <_ZL14SamplingThreadPv+0x1c8>)
    return x > 0 ? x : -x;
 8003998:	0840      	lsrs	r0, r0, #1
        ESR_SENSE_ALPHA * nernstAcLocal;
 800399a:	f001 ff75 	bl	8005888 <__aeabi_fmul>
        (1 - ESR_SENSE_ALPHA) * nernstAc +
 800399e:	4923      	ldr	r1, [pc, #140]	; (8003a2c <_ZL14SamplingThreadPv+0x1cc>)
        ESR_SENSE_ALPHA * nernstAcLocal;
 80039a0:	9003      	str	r0, [sp, #12]
        (1 - ESR_SENSE_ALPHA) * nernstAc +
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f001 ff70 	bl	8005888 <__aeabi_fmul>
 80039a8:	1c01      	adds	r1, r0, #0
 80039aa:	9803      	ldr	r0, [sp, #12]
 80039ac:	f001 fc02 	bl	80051b4 <__aeabi_fadd>
    nernstAc =
 80039b0:	60f8      	str	r0, [r7, #12]
    return (float)sum * scale;
 80039b2:	0028      	movs	r0, r5
 80039b4:	f002 fac8 	bl	8005f48 <__aeabi_ui2f>
 80039b8:	1c01      	adds	r1, r0, #0

    // Exponential moving average (aka first order lpf)
    pumpCurrentSenseVoltage =
        (1 - PUMP_FILTER_ALPHA) * pumpCurrentSenseVoltage +
        PUMP_FILTER_ALPHA * (result.PumpCurrentVoltage - virtualGroundVoltageInt);
 80039ba:	9802      	ldr	r0, [sp, #8]
 80039bc:	f002 f8b2 	bl	8005b24 <__aeabi_fsub>
 80039c0:	491b      	ldr	r1, [pc, #108]	; (8003a30 <_ZL14SamplingThreadPv+0x1d0>)
 80039c2:	f001 ff61 	bl	8005888 <__aeabi_fmul>
        (1 - PUMP_FILTER_ALPHA) * pumpCurrentSenseVoltage +
 80039c6:	491b      	ldr	r1, [pc, #108]	; (8003a34 <_ZL14SamplingThreadPv+0x1d4>)
        PUMP_FILTER_ALPHA * (result.PumpCurrentVoltage - virtualGroundVoltageInt);
 80039c8:	1c05      	adds	r5, r0, #0
        (1 - PUMP_FILTER_ALPHA) * pumpCurrentSenseVoltage +
 80039ca:	6978      	ldr	r0, [r7, #20]
 80039cc:	f001 ff5c 	bl	8005888 <__aeabi_fmul>
 80039d0:	1c01      	adds	r1, r0, #0
 80039d2:	1c28      	adds	r0, r5, #0
 80039d4:	f001 fbee 	bl	80051b4 <__aeabi_fadd>
#ifdef BATTERY_INPUT_DIVIDER
    internalBatteryVoltage = result.BatteryVoltage;
#endif

    // Shift history over by one
    r_3 = r_2;
 80039d8:	9b01      	ldr	r3, [sp, #4]
    pumpCurrentSenseVoltage =
 80039da:	6178      	str	r0, [r7, #20]
    r_3 = r_2;
 80039dc:	60bb      	str	r3, [r7, #8]
    r_2 = r_1;
 80039de:	9b00      	ldr	r3, [sp, #0]
 80039e0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80039e2:	b672      	cpsid	i
  osalDbgAssert(adcp->thread == NULL, "already waiting");
 80039e4:	6963      	ldr	r3, [r4, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d000      	beq.n	80039ec <_ZL14SamplingThreadPv+0x18c>
 80039ea:	e749      	b.n	8003880 <_ZL14SamplingThreadPv+0x20>
 80039ec:	e755      	b.n	800389a <_ZL14SamplingThreadPv+0x3a>
 80039ee:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <_ZL14SamplingThreadPv+0x1d8>)
 80039f2:	6473      	str	r3, [r6, #68]	; 0x44
  while (true) {
 80039f4:	e7fe      	b.n	80039f4 <_ZL14SamplingThreadPv+0x194>
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	20000a08 	.word	0x20000a08
 80039fc:	200017f8 	.word	0x200017f8
 8003a00:	08006168 	.word	0x08006168
 8003a04:	20001748 	.word	0x20001748
 8003a08:	20001728 	.word	0x20001728
 8003a0c:	08006110 	.word	0x08006110
 8003a10:	2000174a 	.word	0x2000174a
 8003a14:	2000174c 	.word	0x2000174c
 8003a18:	08006294 	.word	0x08006294
 8003a1c:	00002001 	.word	0x00002001
 8003a20:	3750a4be 	.word	0x3750a4be
 8003a24:	48000400 	.word	0x48000400
 8003a28:	3b03126f 	.word	0x3b03126f
 8003a2c:	3f7f7cee 	.word	0x3f7f7cee
 8003a30:	3534449c 	.word	0x3534449c
 8003a34:	3f7ae148 	.word	0x3f7ae148
 8003a38:	080062b4 	.word	0x080062b4
 8003a3c:	00000000 	.word	0x00000000

08003a40 <_ZL12HeaterThreadPv>:
    return heaterControllers[ch];
}

static THD_WORKING_AREA(waHeaterThread, 256);
static void HeaterThread(void*)
{
 8003a40:	b5f0      	push	{r4, r5, r6, r7, lr}

    chRegSetThreadName("Heater");

    // Wait for temperature sensing to stabilize so we don't
    // immediately think we overshot the target temperature
    chThdSleepMilliseconds(1000);
 8003a42:	481d      	ldr	r0, [pc, #116]	; (8003ab8 <_ZL12HeaterThreadPv+0x78>)
{
 8003a44:	b087      	sub	sp, #28
    chThdSleepMilliseconds(1000);
 8003a46:	f7ff f953 	bl	8002cf0 <chThdSleep>
    m_targetTempC = targetTempC;
 8003a4a:	4d1c      	ldr	r5, [pc, #112]	; (8003abc <_ZL12HeaterThreadPv+0x7c>)
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <_ZL12HeaterThreadPv+0x80>)
    m_preheatTimer.reset();
 8003a4e:	0028      	movs	r0, r5
    m_targetTempC = targetTempC;
 8003a50:	632b      	str	r3, [r5, #48]	; 0x30
    m_targetEsr = targetEsr;
 8003a52:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <_ZL12HeaterThreadPv+0x84>)
    m_preheatTimer.reset();
 8003a54:	3048      	adds	r0, #72	; 0x48
    m_targetEsr = targetEsr;
 8003a56:	62eb      	str	r3, [r5, #44]	; 0x2c
    m_preheatTimer.reset();
 8003a58:	f7fe fcf2 	bl	8002440 <_ZN5Timer5resetEv>
    m_warmupTimer.reset();
 8003a5c:	0028      	movs	r0, r5
 8003a5e:	3050      	adds	r0, #80	; 0x50
 8003a60:	f7fe fcee 	bl	8002440 <_ZN5Timer5resetEv>
    m_batteryStableTimer.reset();
 8003a64:	0028      	movs	r0, r5
 8003a66:	3040      	adds	r0, #64	; 0x40
 8003a68:	f7fe fcea 	bl	8002440 <_ZN5Timer5resetEv>

    // Configure heater controllers for sensor type
    for (i = 0; i < AFR_CHANNELS; i++) {
 8003a6c:	4f16      	ldr	r7, [pc, #88]	; (8003ac8 <_ZL12HeaterThreadPv+0x88>)
 8003a6e:	4e17      	ldr	r6, [pc, #92]	; (8003acc <_ZL12HeaterThreadPv+0x8c>)
 8003a70:	4c17      	ldr	r4, [pc, #92]	; (8003ad0 <_ZL12HeaterThreadPv+0x90>)

        for (i = 0; i < AFR_CHANNELS; i++) {
            const auto& sampler = GetSampler(i);
            auto& heater = heaterControllers[i];

            heater.Update(sampler, heaterAllowState);
 8003a72:	0031      	movs	r1, r6
 8003a74:	0028      	movs	r0, r5
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	f7fe fe12 	bl	80026a0 <_ZN20HeaterControllerBase6UpdateERK8ISampler11HeaterAllow>
 8003a7c:	b672      	cpsid	i
    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8003a7e:	21fa      	movs	r1, #250	; 0xfa
 8003a80:	68e2      	ldr	r2, [r4, #12]
 8003a82:	0049      	lsls	r1, r1, #1
 8003a84:	a801      	add	r0, sp, #4
 8003a86:	f7ff f803 	bl	8002a90 <chVTDoSetI.constprop.0>
    chSchGoSleepS(newstate);
 8003a8a:	2008      	movs	r0, #8
 8003a8c:	f7ff f910 	bl	8002cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8003a90:	9b04      	ldr	r3, [sp, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <_ZL12HeaterThreadPv+0x5c>
      chVTDoResetI(&vt);
 8003a96:	a801      	add	r0, sp, #4
 8003a98:	f7fe f8aa 	bl	8001bf0 <chVTDoResetI>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	42a3      	cmp	r3, r4
 8003aa0:	d004      	beq.n	8003aac <_ZL12HeaterThreadPv+0x6c>
 8003aa2:	68e2      	ldr	r2, [r4, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	6892      	ldr	r2, [r2, #8]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d301      	bcc.n	8003ab0 <_ZL12HeaterThreadPv+0x70>
  __ASM volatile ("cpsie i" : : : "memory");
 8003aac:	b662      	cpsie	i
              (currcore->rlist.current->prio >= currcore->rlist.queue.next->prio),
              "priority order violation");

  port_unlock();
}
 8003aae:	e7e0      	b.n	8003a72 <_ZL12HeaterThreadPv+0x32>
  __ASM volatile ("cpsid i" : : : "memory");
 8003ab0:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <_ZL12HeaterThreadPv+0x94>)
 8003ab4:	6463      	str	r3, [r4, #68]	; 0x44
  while (true) {
 8003ab6:	e7fe      	b.n	8003ab6 <_ZL12HeaterThreadPv+0x76>
 8003ab8:	00002710 	.word	0x00002710
 8003abc:	20001930 	.word	0x20001930
 8003ac0:	44430000 	.word	0x44430000
 8003ac4:	43960000 	.word	0x43960000
 8003ac8:	20000b10 	.word	0x20000b10
 8003acc:	20001728 	.word	0x20001728
 8003ad0:	200017f8 	.word	0x200017f8
 8003ad4:	08006244 	.word	0x08006244
	...

08003ae0 <_Z11CanTxThreadPv>:
{
 8003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae2:	4657      	mov	r7, sl
 8003ae4:	464e      	mov	r6, r9
 8003ae6:	46de      	mov	lr, fp
 8003ae8:	4645      	mov	r5, r8
 8003aea:	b5e0      	push	{r5, r6, r7, lr}
 8003aec:	4f73      	ldr	r7, [pc, #460]	; (8003cbc <_Z11CanTxThreadPv+0x1dc>)
 8003aee:	4b74      	ldr	r3, [pc, #464]	; (8003cc0 <_Z11CanTxThreadPv+0x1e0>)
CanTxMessage::CanTxMessage(uint32_t eid, uint8_t dlc, bool isExtended) {
    m_frame.IDE = isExtended ? CAN_IDE_EXT : CAN_IDE_STD;
    m_frame.EID = eid;
    m_frame.RTR = CAN_RTR_DATA;
    m_frame.DLC = dlc;
    memset(m_frame.data8, 0, sizeof(m_frame.data8));
 8003af0:	46b9      	mov	r9, r7
 8003af2:	469b      	mov	fp, r3
 8003af4:	4b73      	ldr	r3, [pc, #460]	; (8003cc4 <_Z11CanTxThreadPv+0x1e4>)
 8003af6:	b08d      	sub	sp, #52	; 0x34
 8003af8:	9305      	str	r3, [sp, #20]
 8003afa:	4b73      	ldr	r3, [pc, #460]	; (8003cc8 <_Z11CanTxThreadPv+0x1e8>)
 8003afc:	4e73      	ldr	r6, [pc, #460]	; (8003ccc <_Z11CanTxThreadPv+0x1ec>)
 8003afe:	469a      	mov	sl, r3
 8003b00:	4b73      	ldr	r3, [pc, #460]	; (8003cd0 <_Z11CanTxThreadPv+0x1f0>)
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	4b73      	ldr	r3, [pc, #460]	; (8003cd4 <_Z11CanTxThreadPv+0x1f4>)
 8003b06:	9302      	str	r3, [sp, #8]
 8003b08:	4b73      	ldr	r3, [pc, #460]	; (8003cd8 <_Z11CanTxThreadPv+0x1f8>)
 8003b0a:	4698      	mov	r8, r3
 8003b0c:	4b73      	ldr	r3, [pc, #460]	; (8003cdc <_Z11CanTxThreadPv+0x1fc>)
 8003b0e:	9303      	str	r3, [sp, #12]
 8003b10:	4b73      	ldr	r3, [pc, #460]	; (8003ce0 <_Z11CanTxThreadPv+0x200>)
 8003b12:	9304      	str	r3, [sp, #16]
    chThdCreateStatic(waCanRxThread, sizeof(waCanRxThread), NORMALPRIO - 4, CanRxThread, nullptr);
}

void SendRusefiFormat(uint8_t ch)
{
    auto baseAddress = WB_DATA_BASE_ADDR + 2 * (ch + configuration->CanIndexOffset);
 8003b14:	465b      	mov	r3, fp
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	9a05      	ldr	r2, [sp, #20]
 8003b1a:	791c      	ldrb	r4, [r3, #4]

    const auto& sampler = GetSampler(ch);
    const auto& heater = GetHeaterController(ch);

    float nernstDc = sampler.GetNernstDc();
 8003b1c:	6833      	ldr	r3, [r6, #0]
    auto baseAddress = WB_DATA_BASE_ADDR + 2 * (ch + configuration->CanIndexOffset);
 8003b1e:	34c8      	adds	r4, #200	; 0xc8
    float nernstDc = sampler.GetNernstDc();
 8003b20:	681b      	ldr	r3, [r3, #0]
    auto baseAddress = WB_DATA_BASE_ADDR + 2 * (ch + configuration->CanIndexOffset);
 8003b22:	0064      	lsls	r4, r4, #1
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d000      	beq.n	8003b2a <_Z11CanTxThreadPv+0x4a>
 8003b28:	e0c3      	b.n	8003cb2 <_Z11CanTxThreadPv+0x1d2>
    return nernstDc;
 8003b2a:	6937      	ldr	r7, [r6, #16]
    m_frame.IDE = isExtended ? CAN_IDE_EXT : CAN_IDE_STD;
 8003b2c:	ab06      	add	r3, sp, #24
 8003b2e:	781a      	ldrb	r2, [r3, #0]
    m_frame.EID = eid;
 8003b30:	9b07      	ldr	r3, [sp, #28]
        CanTxTyped<wbo::StandardData> frame(baseAddress + 0);

        // The same header is imported by the ECU and checked against this data in the frame
        frame.get().Version = RUSEFI_WIDEBAND_VERSION;

        uint16_t lambda = GetLambda(ch) * 10000;
 8003b32:	2000      	movs	r0, #0
 8003b34:	0f5b      	lsrs	r3, r3, #29
 8003b36:	075b      	lsls	r3, r3, #29
 8003b38:	4323      	orrs	r3, r4
 8003b3a:	9307      	str	r3, [sp, #28]
    m_frame.DLC = dlc;
 8003b3c:	23c0      	movs	r3, #192	; 0xc0
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2208      	movs	r2, #8
 8003b42:	4313      	orrs	r3, r2
 8003b44:	aa06      	add	r2, sp, #24
 8003b46:	7013      	strb	r3, [r2, #0]
    memset(m_frame.data8, 0, sizeof(m_frame.data8));
 8003b48:	0013      	movs	r3, r2
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	81da      	strh	r2, [r3, #14]
        frame.get().Version = RUSEFI_WIDEBAND_VERSION;
 8003b4e:	23a0      	movs	r3, #160	; 0xa0
 8003b50:	aa06      	add	r2, sp, #24
 8003b52:	7213      	strb	r3, [r2, #8]
        uint16_t lambda = GetLambda(ch) * 10000;
 8003b54:	f7fe fcf4 	bl	8002540 <_Z9GetLambdai>
 8003b58:	4962      	ldr	r1, [pc, #392]	; (8003ce4 <_Z11CanTxThreadPv+0x204>)
 8003b5a:	f001 fe95 	bl	8005888 <__aeabi_fmul>
 8003b5e:	f001 fb11 	bl	8005184 <__aeabi_f2uiz>
        frame.get().Lambda = lambda;
 8003b62:	ab06      	add	r3, sp, #24
 8003b64:	8158      	strh	r0, [r3, #10]
        frame.get().TemperatureC = sampler.GetSensorTemperature();
 8003b66:	6833      	ldr	r3, [r6, #0]
 8003b68:	0030      	movs	r0, r6
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	4798      	blx	r3
 8003b6e:	f001 fb09 	bl	8005184 <__aeabi_f2uiz>
 8003b72:	ab06      	add	r3, sp, #24
 8003b74:	8198      	strh	r0, [r3, #12]
        bool heaterClosedLoop = heater.IsRunningClosedLoop();
 8003b76:	4653      	mov	r3, sl
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	9a01      	ldr	r2, [sp, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d000      	beq.n	8003b84 <_Z11CanTxThreadPv+0xa4>
 8003b82:	e092      	b.n	8003caa <_Z11CanTxThreadPv+0x1ca>
    return heaterState == HeaterState::ClosedLoop;
 8003b84:	4653      	mov	r3, sl
 8003b86:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8003b88:	3d02      	subs	r5, #2
 8003b8a:	426b      	negs	r3, r5
 8003b8c:	415d      	adcs	r5, r3
 8003b8e:	b2ed      	uxtb	r5, r5
        bool nernstValid = nernstDc > (NERNST_TARGET - 0.1f) && nernstDc < (NERNST_TARGET + 0.1f);
 8003b90:	4955      	ldr	r1, [pc, #340]	; (8003ce8 <_Z11CanTxThreadPv+0x208>)
 8003b92:	1c38      	adds	r0, r7, #0
 8003b94:	f7fd fff8 	bl	8001b88 <__aeabi_fcmpgt>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	d07c      	beq.n	8003c96 <_Z11CanTxThreadPv+0x1b6>
 8003b9c:	4953      	ldr	r1, [pc, #332]	; (8003cec <_Z11CanTxThreadPv+0x20c>)
 8003b9e:	1c38      	adds	r0, r7, #0
 8003ba0:	f7fd ffde 	bl	8001b60 <__aeabi_fcmplt>
        frame.get().Valid = (heaterClosedLoop && nernstValid) ? 0x01 : 0x00;
 8003ba4:	1e43      	subs	r3, r0, #1
 8003ba6:	4198      	sbcs	r0, r3
 8003ba8:	4240      	negs	r0, r0
 8003baa:	4005      	ands	r5, r0
}

CanTxMessage::~CanTxMessage() {
    // 100 ms timeout
    canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, TIME_MS2I(100));
 8003bac:	21fa      	movs	r1, #250	; 0xfa
 8003bae:	ab06      	add	r3, sp, #24
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	725d      	strb	r5, [r3, #9]
 8003bb4:	0089      	lsls	r1, r1, #2
 8003bb6:	f7ff f8c3 	bl	8002d40 <canTransmitTimeout.constprop.0.isra.0>
    }

    {
        auto esr = sampler.GetSensorInternalResistance();
 8003bba:	6833      	ldr	r3, [r6, #0]
 8003bbc:	9a02      	ldr	r2, [sp, #8]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d16f      	bne.n	8003ca4 <_Z11CanTxThreadPv+0x1c4>
    float totalEsr = GetESRSupplyR() / (VCC_VOLTS / GetNernstAc() - 1);
 8003bc4:	68f1      	ldr	r1, [r6, #12]
 8003bc6:	484a      	ldr	r0, [pc, #296]	; (8003cf0 <_Z11CanTxThreadPv+0x210>)
 8003bc8:	f001 fc94 	bl	80054f4 <__aeabi_fdiv>
 8003bcc:	21fe      	movs	r1, #254	; 0xfe
 8003bce:	0589      	lsls	r1, r1, #22
 8003bd0:	f001 ffa8 	bl	8005b24 <__aeabi_fsub>
 8003bd4:	1c01      	adds	r1, r0, #0
 8003bd6:	4847      	ldr	r0, [pc, #284]	; (8003cf4 <_Z11CanTxThreadPv+0x214>)
 8003bd8:	f001 fc8c 	bl	80054f4 <__aeabi_fdiv>
    return totalEsr - VM_RESISTOR_VALUE;
 8003bdc:	4946      	ldr	r1, [pc, #280]	; (8003cf8 <_Z11CanTxThreadPv+0x218>)
 8003bde:	f001 ffa1 	bl	8005b24 <__aeabi_fsub>
    m_frame.IDE = isExtended ? CAN_IDE_EXT : CAN_IDE_STD;
 8003be2:	ab06      	add	r3, sp, #24
 8003be4:	781a      	ldrb	r2, [r3, #0]
    m_frame.EID = eid;
 8003be6:	9b07      	ldr	r3, [sp, #28]
 8003be8:	3401      	adds	r4, #1
 8003bea:	0f5b      	lsrs	r3, r3, #29
 8003bec:	075b      	lsls	r3, r3, #29
 8003bee:	431c      	orrs	r4, r3
    m_frame.DLC = dlc;
 8003bf0:	23c0      	movs	r3, #192	; 0xc0
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	ab06      	add	r3, sp, #24
    m_frame.EID = eid;
 8003bfa:	9407      	str	r4, [sp, #28]
    m_frame.DLC = dlc;
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	73da      	strb	r2, [r3, #15]

        CanTxTyped<wbo::DiagData> frame(baseAddress + 1);

        frame.get().Esr = esr;
 8003c02:	f001 fabf 	bl	8005184 <__aeabi_f2uiz>
 8003c06:	ab06      	add	r3, sp, #24
 8003c08:	8118      	strh	r0, [r3, #8]
        frame.get().NernstDc = nernstDc * 1000;
 8003c0a:	493c      	ldr	r1, [pc, #240]	; (8003cfc <_Z11CanTxThreadPv+0x21c>)
 8003c0c:	1c38      	adds	r0, r7, #0
 8003c0e:	f001 fe3b 	bl	8005888 <__aeabi_fmul>
 8003c12:	f001 fab7 	bl	8005184 <__aeabi_f2uiz>
 8003c16:	ab06      	add	r3, sp, #24
 8003c18:	8158      	strh	r0, [r3, #10]
        frame.get().PumpDuty = GetPumpOutputDuty(ch) * 255;
 8003c1a:	4643      	mov	r3, r8
 8003c1c:	4938      	ldr	r1, [pc, #224]	; (8003d00 <_Z11CanTxThreadPv+0x220>)
 8003c1e:	68d8      	ldr	r0, [r3, #12]
 8003c20:	f001 fe32 	bl	8005888 <__aeabi_fmul>
 8003c24:	f001 faae 	bl	8005184 <__aeabi_f2uiz>
 8003c28:	ab06      	add	r3, sp, #24
 8003c2a:	7318      	strb	r0, [r3, #12]
        frame.get().Status = GetCurrentFault(ch);
 8003c2c:	9b03      	ldr	r3, [sp, #12]
 8003c2e:	aa06      	add	r2, sp, #24
 8003c30:	781b      	ldrb	r3, [r3, #0]
        frame.get().HeaterDuty = GetHeaterDuty(ch) * 255;
 8003c32:	4933      	ldr	r1, [pc, #204]	; (8003d00 <_Z11CanTxThreadPv+0x220>)
        frame.get().Status = GetCurrentFault(ch);
 8003c34:	7353      	strb	r3, [r2, #13]
    chThdCreateStatic(waHeaterThread, sizeof(waHeaterThread), NORMALPRIO + 1, HeaterThread, nullptr);
}

float GetHeaterDuty(int ch)
{
    return heaterPwm.GetLastDuty(heaterControllers[ch].pwm_ch);
 8003c36:	4652      	mov	r2, sl
 8003c38:	2358      	movs	r3, #88	; 0x58
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]

float Pwm::GetLastDuty(int channel)
{
    return m_dutyFloat[channel];
 8003c3c:	9a04      	ldr	r2, [sp, #16]
 8003c3e:	3302      	adds	r3, #2
 8003c40:	4694      	mov	ip, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4463      	add	r3, ip
        frame.get().HeaterDuty = GetHeaterDuty(ch) * 255;
 8003c46:	6858      	ldr	r0, [r3, #4]
 8003c48:	f001 fe1e 	bl	8005888 <__aeabi_fmul>
 8003c4c:	f001 fa9a 	bl	8005184 <__aeabi_f2uiz>
    canTransmitTimeout(&CAND1, CAN_ANY_MAILBOX, &m_frame, TIME_MS2I(100));
 8003c50:	21fa      	movs	r1, #250	; 0xfa
 8003c52:	ab06      	add	r3, sp, #24
 8003c54:	7398      	strb	r0, [r3, #14]
 8003c56:	0089      	lsls	r1, r1, #2
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f7ff f871 	bl	8002d40 <canTransmitTimeout.constprop.0.isra.0>
 8003c5e:	b672      	cpsid	i
    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8003c60:	464b      	mov	r3, r9
 8003c62:	2164      	movs	r1, #100	; 0x64
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	a806      	add	r0, sp, #24
 8003c68:	f7fe ff12 	bl	8002a90 <chVTDoSetI.constprop.0>
    chSchGoSleepS(newstate);
 8003c6c:	2008      	movs	r0, #8
 8003c6e:	f7ff f81f 	bl	8002cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8003c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <_Z11CanTxThreadPv+0x19e>
      chVTDoResetI(&vt);
 8003c78:	a806      	add	r0, sp, #24
 8003c7a:	f7fd ffb9 	bl	8001bf0 <chVTDoResetI>
  chDbgAssert((currcore->rlist.queue.next == (thread_t *)&currcore->rlist.queue) ||
 8003c7e:	464b      	mov	r3, r9
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	454b      	cmp	r3, r9
 8003c84:	d005      	beq.n	8003c92 <_Z11CanTxThreadPv+0x1b2>
 8003c86:	464a      	mov	r2, r9
 8003c88:	68d2      	ldr	r2, [r2, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	6892      	ldr	r2, [r2, #8]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d303      	bcc.n	8003c9a <_Z11CanTxThreadPv+0x1ba>
  __ASM volatile ("cpsie i" : : : "memory");
 8003c92:	b662      	cpsie	i
}
 8003c94:	e73e      	b.n	8003b14 <_Z11CanTxThreadPv+0x34>
        frame.get().Valid = (heaterClosedLoop && nernstValid) ? 0x01 : 0x00;
 8003c96:	2500      	movs	r5, #0
 8003c98:	e788      	b.n	8003bac <_Z11CanTxThreadPv+0xcc>
  __ASM volatile ("cpsid i" : : : "memory");
 8003c9a:	464f      	mov	r7, r9
 8003c9c:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8003c9e:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <_Z11CanTxThreadPv+0x224>)
 8003ca0:	647b      	str	r3, [r7, #68]	; 0x44
  while (true) {
 8003ca2:	e7fe      	b.n	8003ca2 <_Z11CanTxThreadPv+0x1c2>
        auto esr = sampler.GetSensorInternalResistance();
 8003ca4:	0030      	movs	r0, r6
 8003ca6:	4798      	blx	r3
 8003ca8:	e79b      	b.n	8003be2 <_Z11CanTxThreadPv+0x102>
        bool heaterClosedLoop = heater.IsRunningClosedLoop();
 8003caa:	4650      	mov	r0, sl
 8003cac:	4798      	blx	r3
 8003cae:	0005      	movs	r5, r0
 8003cb0:	e76e      	b.n	8003b90 <_Z11CanTxThreadPv+0xb0>
    float nernstDc = sampler.GetNernstDc();
 8003cb2:	0030      	movs	r0, r6
 8003cb4:	4798      	blx	r3
 8003cb6:	1c07      	adds	r7, r0, #0
 8003cb8:	e738      	b.n	8003b2c <_Z11CanTxThreadPv+0x4c>
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	200017f8 	.word	0x200017f8
 8003cc0:	20000cb8 	.word	0x20000cb8
 8003cc4:	080021a1 	.word	0x080021a1
 8003cc8:	20001930 	.word	0x20001930
 8003ccc:	20001728 	.word	0x20001728
 8003cd0:	08002411 	.word	0x08002411
 8003cd4:	08002261 	.word	0x08002261
 8003cd8:	2000170c 	.word	0x2000170c
 8003cdc:	20000b14 	.word	0x20000b14
 8003ce0:	200017d8 	.word	0x200017d8
 8003ce4:	461c4000 	.word	0x461c4000
 8003ce8:	3eb33333 	.word	0x3eb33333
 8003cec:	3f0ccccd 	.word	0x3f0ccccd
 8003cf0:	40533333 	.word	0x40533333
 8003cf4:	46abe000 	.word	0x46abe000
 8003cf8:	41200000 	.word	0x41200000
 8003cfc:	447a0000 	.word	0x447a0000
 8003d00:	437f0000 	.word	0x437f0000
 8003d04:	08006244 	.word	0x08006244
	...

08003d10 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
 8003d10:	b570      	push	{r4, r5, r6, lr}
  os_instance_t *oip = currcore;
  thread_t *otp = __sch_get_currthread(oip);
 8003d12:	4c16      	ldr	r4, [pc, #88]	; (8003d6c <chSchDoPreemption+0x5c>)
  thread_t *tp = tqp->next;
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	68e1      	ldr	r1, [r4, #12]
  tqp->next             = tp->queue.next;
 8003d18:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003d1a:	605c      	str	r4, [r3, #4]
  tqp->next             = tp->queue.next;
 8003d1c:	6023      	str	r3, [r4, #0]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = queue_fifo_remove(&oip->rlist.queue);
  ntp->state = CH_STATE_CURRENT;
 8003d1e:	2301      	movs	r3, #1
  __sch_set_currthread(oip, ntp);
 8003d20:	60e0      	str	r0, [r4, #12]
  ntp->state = CH_STATE_CURRENT;
 8003d22:	7503      	strb	r3, [r0, #20]
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8003d24:	7d0b      	ldrb	r3, [r1, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d017      	beq.n	8003d5a <chSchDoPreemption+0x4a>
 8003d2a:	2b0f      	cmp	r3, #15
 8003d2c:	d015      	beq.n	8003d5a <chSchDoPreemption+0x4a>
  tp->state = CH_STATE_READY;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	750b      	strb	r3, [r1, #20]
  cp = (thread_t *)&oip->rlist.queue;
 8003d32:	0023      	movs	r3, r4
  } while (cp->prio > tp->prio);
 8003d34:	688d      	ldr	r5, [r1, #8]
    cp = cp->queue.next;
 8003d36:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	42aa      	cmp	r2, r5
 8003d3c:	d8fb      	bhi.n	8003d36 <chSchDoPreemption+0x26>
  tp->queue.prev             = cp->queue.prev;
 8003d3e:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8003d40:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8003d42:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8003d44:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8003d46:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003d48:	f3ef 8309 	mrs	r3, PSP
     ahead of its peers.*/
  otp = __sch_ready_ahead(oip, otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8003d4c:	690a      	ldr	r2, [r1, #16]
 8003d4e:	3b24      	subs	r3, #36	; 0x24
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d806      	bhi.n	8003d62 <chSchDoPreemption+0x52>
 8003d54:	f7fd fe28 	bl	80019a8 <__port_switch>
}
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8003d5a:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <chSchDoPreemption+0x60>)
 8003d5e:	6463      	str	r3, [r4, #68]	; 0x44
  while (true) {
 8003d60:	e7fe      	b.n	8003d60 <chSchDoPreemption+0x50>
 8003d62:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <chSchDoPreemption+0x64>)
 8003d66:	6463      	str	r3, [r4, #68]	; 0x44
  while (true) {
 8003d68:	e7fe      	b.n	8003d68 <chSchDoPreemption+0x58>
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	200017f8 	.word	0x200017f8
 8003d70:	0800619c 	.word	0x0800619c
 8003d74:	08005fe4 	.word	0x08005fe4
	...

08003d80 <chThdExit>:
void chThdExit(msg_t msg) {
 8003d80:	b510      	push	{r4, lr}
 8003d82:	b672      	cpsid	i
 8003d84:	4c04      	ldr	r4, [pc, #16]	; (8003d98 <chThdExit+0x18>)
  currtp->u.exitcode = msg;
 8003d86:	68e3      	ldr	r3, [r4, #12]
 8003d88:	6198      	str	r0, [r3, #24]
  chSchGoSleepS(CH_STATE_FINAL);
 8003d8a:	200f      	movs	r0, #15
 8003d8c:	f7fe ff90 	bl	8002cb0 <chSchGoSleepS>
 8003d90:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8003d92:	4b02      	ldr	r3, [pc, #8]	; (8003d9c <chThdExit+0x1c>)
 8003d94:	6463      	str	r3, [r4, #68]	; 0x44
  while (true) {
 8003d96:	e7fe      	b.n	8003d96 <chThdExit+0x16>
 8003d98:	200017f8 	.word	0x200017f8
 8003d9c:	08006314 	.word	0x08006314

08003da0 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8003da0:	4770      	bx	lr
 8003da2:	46c0      	nop			; (mov r8, r8)
	...

08003db0 <__late_init>:
 8003db0:	4770      	bx	lr
 8003db2:	46c0      	nop			; (mov r8, r8)
	...

08003dc0 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8003dc0:	e7fe      	b.n	8003dc0 <__default_exit>
 8003dc2:	46c0      	nop			; (mov r8, r8)
	...

08003dd0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8003dd2:	4c13      	ldr	r4, [pc, #76]	; (8003e20 <__init_ram_areas+0x50>)
void __init_ram_areas(void) {
 8003dd4:	4f13      	ldr	r7, [pc, #76]	; (8003e24 <__init_ram_areas+0x54>)
 8003dd6:	0025      	movs	r5, r4
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <__init_ram_areas+0x58>)
 8003dda:	4814      	ldr	r0, [pc, #80]	; (8003e2c <__init_ram_areas+0x5c>)
 8003ddc:	4914      	ldr	r1, [pc, #80]	; (8003e30 <__init_ram_areas+0x60>)
 8003dde:	3580      	adds	r5, #128	; 0x80
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8003de0:	4282      	cmp	r2, r0
 8003de2:	d90a      	bls.n	8003dfa <__init_ram_areas+0x2a>
 8003de4:	0003      	movs	r3, r0
      *p = *tp;
 8003de6:	c940      	ldmia	r1!, {r6}
 8003de8:	c340      	stmia	r3!, {r6}
    while (p < rap->clear_area) {
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d8fb      	bhi.n	8003de6 <__init_ram_areas+0x16>
      p++;
 8003dee:	3a01      	subs	r2, #1
 8003df0:	1a13      	subs	r3, r2, r0
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	3301      	adds	r3, #1
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	18c0      	adds	r0, r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8003dfa:	4287      	cmp	r7, r0
 8003dfc:	d907      	bls.n	8003e0e <__init_ram_areas+0x3e>
      *p = 0;
 8003dfe:	3f01      	subs	r7, #1
 8003e00:	1a3a      	subs	r2, r7, r0
 8003e02:	0892      	lsrs	r2, r2, #2
 8003e04:	3201      	adds	r2, #1
 8003e06:	2100      	movs	r1, #0
 8003e08:	0092      	lsls	r2, r2, #2
 8003e0a:	f001 f915 	bl	8005038 <memset>
      p++;
    }
    rap++;
 8003e0e:	3410      	adds	r4, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8003e10:	42ac      	cmp	r4, r5
 8003e12:	d004      	beq.n	8003e1e <__init_ram_areas+0x4e>
    uint32_t *tp = rap->init_text_area;
 8003e14:	6821      	ldr	r1, [r4, #0]
    uint32_t *p = rap->init_area;
 8003e16:	6860      	ldr	r0, [r4, #4]
    while (p < rap->clear_area) {
 8003e18:	68a2      	ldr	r2, [r4, #8]
    while (p < rap->no_init_area) {
 8003e1a:	68e7      	ldr	r7, [r4, #12]
 8003e1c:	e7e0      	b.n	8003de0 <__init_ram_areas+0x10>
#endif
}
 8003e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e20:	080063ec 	.word	0x080063ec
 8003e24:	20001990 	.word	0x20001990
 8003e28:	20001990 	.word	0x20001990
 8003e2c:	20001990 	.word	0x20001990
 8003e30:	080064f4 	.word	0x080064f4
	...

08003e40 <VectorAC>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8003e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e42:	4647      	mov	r7, r8

  /* Reading and clearing status.*/
  isr = u->ISR;
  u->ICR = isr;

  if (isr & (USART_ISR_LBDF | USART_ISR_ORE | USART_ISR_NE |
 8003e44:	2310      	movs	r3, #16
 8003e46:	b480      	push	{r7}
  USART_TypeDef *u = uartp->usart;
 8003e48:	4f2f      	ldr	r7, [pc, #188]	; (8003f08 <VectorAC+0xc8>)
  if (isr & (USART_ISR_LBDF | USART_ISR_ORE | USART_ISR_NE |
 8003e4a:	33ff      	adds	r3, #255	; 0xff
  USART_TypeDef *u = uartp->usart;
 8003e4c:	68be      	ldr	r6, [r7, #8]

  OSAL_IRQ_PROLOGUE();
 8003e4e:	46f0      	mov	r8, lr
  uint32_t cr1 = u->CR1;
 8003e50:	6835      	ldr	r5, [r6, #0]
  isr = u->ISR;
 8003e52:	69f4      	ldr	r4, [r6, #28]
  u->ICR = isr;
 8003e54:	6234      	str	r4, [r6, #32]
  if (isr & (USART_ISR_LBDF | USART_ISR_ORE | USART_ISR_NE |
 8003e56:	421c      	tst	r4, r3
 8003e58:	d019      	beq.n	8003e8e <VectorAC+0x4e>
             USART_ISR_FE   | USART_ISR_PE)) {
    _uart_rx_error_isr_code(uartp, translate_errors(isr));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d015      	beq.n	8003e8e <VectorAC+0x4e>
  if (isr & USART_ISR_ORE)
 8003e62:	2201      	movs	r2, #1
 8003e64:	08e1      	lsrs	r1, r4, #3
 8003e66:	4011      	ands	r1, r2
 8003e68:	0109      	lsls	r1, r1, #4
  if (isr & USART_ISR_PE)
 8003e6a:	4222      	tst	r2, r4
 8003e6c:	d001      	beq.n	8003e72 <VectorAC+0x32>
    sts |= UART_PARITY_ERROR;
 8003e6e:	3203      	adds	r2, #3
 8003e70:	4311      	orrs	r1, r2
  if (isr & USART_ISR_FE)
 8003e72:	07a2      	lsls	r2, r4, #30
 8003e74:	d501      	bpl.n	8003e7a <VectorAC+0x3a>
    sts |= UART_FRAMING_ERROR;
 8003e76:	2208      	movs	r2, #8
 8003e78:	4311      	orrs	r1, r2
  if (isr & USART_ISR_NE)
 8003e7a:	0762      	lsls	r2, r4, #29
 8003e7c:	d501      	bpl.n	8003e82 <VectorAC+0x42>
    sts |= UART_NOISE_ERROR;
 8003e7e:	2220      	movs	r2, #32
 8003e80:	4311      	orrs	r1, r2
  if (isr & USART_ISR_LBDF)
 8003e82:	05e2      	lsls	r2, r4, #23
 8003e84:	d501      	bpl.n	8003e8a <VectorAC+0x4a>
    sts |= UART_BREAK_DETECTED;
 8003e86:	2240      	movs	r2, #64	; 0x40
 8003e88:	4311      	orrs	r1, r2
    _uart_rx_error_isr_code(uartp, translate_errors(isr));
 8003e8a:	0038      	movs	r0, r7
 8003e8c:	4798      	blx	r3
  }

  if ((isr & USART_ISR_TC) && (cr1 & USART_CR1_TCIE)) {
 8003e8e:	2340      	movs	r3, #64	; 0x40
 8003e90:	4223      	tst	r3, r4
 8003e92:	d001      	beq.n	8003e98 <VectorAC+0x58>
 8003e94:	422b      	tst	r3, r5
 8003e96:	d12a      	bne.n	8003eee <VectorAC+0xae>
    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
  }

  /* Timeout interrupt sources are only checked if enabled in CR1.*/
  if (((cr1 & USART_CR1_IDLEIE) && (isr & USART_ISR_IDLE)) ||
 8003e98:	2310      	movs	r3, #16
 8003e9a:	422b      	tst	r3, r5
 8003e9c:	d00d      	beq.n	8003eba <VectorAC+0x7a>
 8003e9e:	4223      	tst	r3, r4
 8003ea0:	d00b      	beq.n	8003eba <VectorAC+0x7a>
      ((cr1 & USART_CR1_RTOIE) && (isr & USART_ISR_RTOF))) {
    _uart_timeout_isr_code(uartp);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <VectorAC+0x6e>
 8003eaa:	0038      	movs	r0, r7
 8003eac:	4798      	blx	r3
 *
 * @param[in] lr        value of the @p LR register on ISR entry
 */
void __port_irq_epilogue(uint32_t lr) {

  if (lr != 0xFFFFFFF1U) {
 8003eae:	4643      	mov	r3, r8
 8003eb0:	330f      	adds	r3, #15
 8003eb2:	d109      	bne.n	8003ec8 <VectorAC+0x88>
  uart_lld_serve_interrupt(&UARTD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	46b8      	mov	r8, r7
 8003eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((cr1 & USART_CR1_IDLEIE) && (isr & USART_ISR_IDLE)) ||
 8003eba:	016d      	lsls	r5, r5, #5
 8003ebc:	d5f7      	bpl.n	8003eae <VectorAC+0x6e>
      ((cr1 & USART_CR1_RTOIE) && (isr & USART_ISR_RTOF))) {
 8003ebe:	0524      	lsls	r4, r4, #20
 8003ec0:	d4ef      	bmi.n	8003ea2 <VectorAC+0x62>
 8003ec2:	4643      	mov	r3, r8
 8003ec4:	330f      	adds	r3, #15
 8003ec6:	d0f5      	beq.n	8003eb4 <VectorAC+0x74>
 8003ec8:	b672      	cpsid	i
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003eca:	f3ef 8309 	mrs	r3, PSP
    /* The extctx structure is pointed by the PSP register.*/
    ectxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ectxp--;
 8003ece:	3b20      	subs	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003ed0:	f383 8809 	msr	PSP, r3

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ectxp);

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8003ed4:	2280      	movs	r2, #128	; 0x80
 8003ed6:	0452      	lsls	r2, r2, #17
 8003ed8:	61da      	str	r2, [r3, #28]
  tprio_t p1 = firstprio(&oip->rlist.queue);
 8003eda:	4a0c      	ldr	r2, [pc, #48]	; (8003f0c <VectorAC+0xcc>)
 8003edc:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->prio;
 8003ede:	68d2      	ldr	r2, [r2, #12]

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8003ee0:	6889      	ldr	r1, [r1, #8]
 8003ee2:	6892      	ldr	r2, [r2, #8]
 8003ee4:	4291      	cmp	r1, r2
 8003ee6:	d90c      	bls.n	8003f02 <VectorAC+0xc2>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003ee8:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <VectorAC+0xd0>)
 8003eea:	619a      	str	r2, [r3, #24]
 8003eec:	e7e2      	b.n	8003eb4 <VectorAC+0x74>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8003eee:	002a      	movs	r2, r5
 8003ef0:	439a      	bics	r2, r3
    _uart_tx2_isr_code(uartp);
 8003ef2:	687b      	ldr	r3, [r7, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8003ef4:	6032      	str	r2, [r6, #0]
    _uart_tx2_isr_code(uartp);
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0cd      	beq.n	8003e98 <VectorAC+0x58>
 8003efc:	0038      	movs	r0, r7
 8003efe:	4798      	blx	r3
 8003f00:	e7ca      	b.n	8003e98 <VectorAC+0x58>
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003f02:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <VectorAC+0xd4>)
 8003f04:	619a      	str	r2, [r3, #24]
 8003f06:	e7d5      	b.n	8003eb4 <VectorAC+0x74>
 8003f08:	20000aec 	.word	0x20000aec
 8003f0c:	200017f8 	.word	0x200017f8
 8003f10:	080019d7 	.word	0x080019d7
 8003f14:	080019da 	.word	0x080019da
	...

08003f20 <VectorB0>:
  if (lr != 0xFFFFFFF1U) {
 8003f20:	4673      	mov	r3, lr
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8003f22:	b500      	push	{lr}
 8003f24:	330f      	adds	r3, #15
 8003f26:	d100      	bne.n	8003f2a <VectorB0+0xa>
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8003f28:	bd00      	pop	{pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8003f2a:	b672      	cpsid	i
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003f2c:	f3ef 8309 	mrs	r3, PSP
    ectxp--;
 8003f30:	3b20      	subs	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003f32:	f383 8809 	msr	PSP, r3
    ectxp->xpsr = 0x01000000U;
 8003f36:	2280      	movs	r2, #128	; 0x80
 8003f38:	0452      	lsls	r2, r2, #17
 8003f3a:	61da      	str	r2, [r3, #28]
  tprio_t p1 = firstprio(&oip->rlist.queue);
 8003f3c:	4a06      	ldr	r2, [pc, #24]	; (8003f58 <VectorB0+0x38>)
 8003f3e:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->prio;
 8003f40:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003f42:	6889      	ldr	r1, [r1, #8]
 8003f44:	6892      	ldr	r2, [r2, #8]
 8003f46:	4291      	cmp	r1, r2
 8003f48:	d902      	bls.n	8003f50 <VectorB0+0x30>
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003f4a:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <VectorB0+0x3c>)
 8003f4c:	619a      	str	r2, [r3, #24]
 8003f4e:	e7eb      	b.n	8003f28 <VectorB0+0x8>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003f50:	4a03      	ldr	r2, [pc, #12]	; (8003f60 <VectorB0+0x40>)
 8003f52:	619a      	str	r2, [r3, #24]
 8003f54:	e7e8      	b.n	8003f28 <VectorB0+0x8>
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	200017f8 	.word	0x200017f8
 8003f5c:	080019d7 	.word	0x080019d7
 8003f60:	080019da 	.word	0x080019da
	...

08003f70 <VectorB4>:
 8003f70:	4673      	mov	r3, lr
 8003f72:	b500      	push	{lr}
 8003f74:	330f      	adds	r3, #15
 8003f76:	d100      	bne.n	8003f7a <VectorB4+0xa>
 8003f78:	bd00      	pop	{pc}
 8003f7a:	b672      	cpsid	i
 8003f7c:	f3ef 8309 	mrs	r3, PSP
 8003f80:	3b20      	subs	r3, #32
 8003f82:	f383 8809 	msr	PSP, r3
 8003f86:	2280      	movs	r2, #128	; 0x80
 8003f88:	0452      	lsls	r2, r2, #17
 8003f8a:	61da      	str	r2, [r3, #28]
 8003f8c:	4a06      	ldr	r2, [pc, #24]	; (8003fa8 <VectorB4+0x38>)
 8003f8e:	6811      	ldr	r1, [r2, #0]
 8003f90:	68d2      	ldr	r2, [r2, #12]
 8003f92:	6889      	ldr	r1, [r1, #8]
 8003f94:	6892      	ldr	r2, [r2, #8]
 8003f96:	4291      	cmp	r1, r2
 8003f98:	d902      	bls.n	8003fa0 <VectorB4+0x30>
 8003f9a:	4a04      	ldr	r2, [pc, #16]	; (8003fac <VectorB4+0x3c>)
 8003f9c:	619a      	str	r2, [r3, #24]
 8003f9e:	e7eb      	b.n	8003f78 <VectorB4+0x8>
 8003fa0:	4a03      	ldr	r2, [pc, #12]	; (8003fb0 <VectorB4+0x40>)
 8003fa2:	619a      	str	r2, [r3, #24]
 8003fa4:	e7e8      	b.n	8003f78 <VectorB4+0x8>
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	200017f8 	.word	0x200017f8
 8003fac:	080019d7 	.word	0x080019d7
 8003fb0:	080019da 	.word	0x080019da
	...

08003fc0 <Vector68>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH23_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  /* Check on channel 2.*/
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8003fc0:	4817      	ldr	r0, [pc, #92]	; (8004020 <Vector68+0x60>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH23_HANDLER) {
 8003fc2:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8003fc4:	3010      	adds	r0, #16
  OSAL_IRQ_PROLOGUE();
 8003fc6:	4674      	mov	r4, lr
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8003fc8:	f7fe f802 	bl	8001fd0 <dmaServeInterrupt>
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8003fcc:	210e      	movs	r1, #14
 8003fce:	4a15      	ldr	r2, [pc, #84]	; (8004024 <Vector68+0x64>)
 8003fd0:	6813      	ldr	r3, [r2, #0]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	4019      	ands	r1, r3
  if (flags & dmastp->channel->CCR) {
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <Vector68+0x68>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	420b      	tst	r3, r1
 8003fdc:	d007      	beq.n	8003fee <Vector68+0x2e>
    dmastp->dma->IFCR = flags << dmastp->shift;
 8003fde:	020b      	lsls	r3, r1, #8
 8003fe0:	6053      	str	r3, [r2, #4]
    if (dma.streams[selfindex].func) {
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <Vector68+0x6c>)
 8003fe4:	6993      	ldr	r3, [r2, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <Vector68+0x2e>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8003fea:	69d0      	ldr	r0, [r2, #28]
 8003fec:	4798      	blx	r3
  if (lr != 0xFFFFFFF1U) {
 8003fee:	340f      	adds	r4, #15
 8003ff0:	d100      	bne.n	8003ff4 <Vector68+0x34>

  /* Check on channel 3.*/
  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
}
 8003ff2:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8003ff4:	b672      	cpsid	i
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003ff6:	f3ef 8309 	mrs	r3, PSP
    ectxp--;
 8003ffa:	3b20      	subs	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003ffc:	f383 8809 	msr	PSP, r3
    ectxp->xpsr = 0x01000000U;
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	0452      	lsls	r2, r2, #17
 8004004:	61da      	str	r2, [r3, #28]
  tprio_t p1 = firstprio(&oip->rlist.queue);
 8004006:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <Vector68+0x70>)
 8004008:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->prio;
 800400a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800400c:	6889      	ldr	r1, [r1, #8]
 800400e:	6892      	ldr	r2, [r2, #8]
 8004010:	4291      	cmp	r1, r2
 8004012:	d902      	bls.n	800401a <Vector68+0x5a>
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8004014:	4a07      	ldr	r2, [pc, #28]	; (8004034 <Vector68+0x74>)
 8004016:	619a      	str	r2, [r3, #24]
 8004018:	e7eb      	b.n	8003ff2 <Vector68+0x32>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 800401a:	4a07      	ldr	r2, [pc, #28]	; (8004038 <Vector68+0x78>)
 800401c:	619a      	str	r2, [r3, #24]
 800401e:	e7e8      	b.n	8003ff2 <Vector68+0x32>
 8004020:	08006344 	.word	0x08006344
 8004024:	40020000 	.word	0x40020000
 8004028:	40020030 	.word	0x40020030
 800402c:	200018f0 	.word	0x200018f0
 8004030:	200017f8 	.word	0x200017f8
 8004034:	080019d7 	.word	0x080019d7
 8004038:	080019da 	.word	0x080019da
 800403c:	00000000 	.word	0x00000000

08004040 <Vector6C>:
/**
 * @brief   DMA1 streams 4, 5, 6 and 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4567_HANDLER) {
 8004040:	b570      	push	{r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  /* Check on channel 4.*/
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8004042:	4c15      	ldr	r4, [pc, #84]	; (8004098 <Vector6C+0x58>)
 8004044:	4675      	mov	r5, lr
 8004046:	0020      	movs	r0, r4
 8004048:	3030      	adds	r0, #48	; 0x30
 800404a:	f7fd ffc1 	bl	8001fd0 <dmaServeInterrupt>

  /* Check on channel 5.*/
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 800404e:	0020      	movs	r0, r4
 8004050:	3040      	adds	r0, #64	; 0x40
 8004052:	f7fd ffbd 	bl	8001fd0 <dmaServeInterrupt>

#if STM32_DMA1_NUM_CHANNELS > 5
  /* Check on channel 6.*/
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8004056:	0020      	movs	r0, r4
 8004058:	3050      	adds	r0, #80	; 0x50
 800405a:	f7fd ffb9 	bl	8001fd0 <dmaServeInterrupt>
#endif

#if STM32_DMA1_NUM_CHANNELS > 6
  /* Check on channel 7.*/
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 800405e:	0020      	movs	r0, r4
 8004060:	3060      	adds	r0, #96	; 0x60
 8004062:	f7fd ffb5 	bl	8001fd0 <dmaServeInterrupt>
  if (lr != 0xFFFFFFF1U) {
 8004066:	350f      	adds	r5, #15
 8004068:	d100      	bne.n	800406c <Vector6C+0x2c>
#endif

  OSAL_IRQ_EPILOGUE();
}
 800406a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800406c:	b672      	cpsid	i
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800406e:	f3ef 8309 	mrs	r3, PSP
    ectxp--;
 8004072:	3b20      	subs	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004074:	f383 8809 	msr	PSP, r3
    ectxp->xpsr = 0x01000000U;
 8004078:	2280      	movs	r2, #128	; 0x80
 800407a:	0452      	lsls	r2, r2, #17
 800407c:	61da      	str	r2, [r3, #28]
  tprio_t p1 = firstprio(&oip->rlist.queue);
 800407e:	4a07      	ldr	r2, [pc, #28]	; (800409c <Vector6C+0x5c>)
 8004080:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->prio;
 8004082:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8004084:	6889      	ldr	r1, [r1, #8]
 8004086:	6892      	ldr	r2, [r2, #8]
 8004088:	4291      	cmp	r1, r2
 800408a:	d902      	bls.n	8004092 <Vector6C+0x52>
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800408c:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <Vector6C+0x60>)
 800408e:	619a      	str	r2, [r3, #24]
 8004090:	e7eb      	b.n	800406a <Vector6C+0x2a>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8004092:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <Vector6C+0x64>)
 8004094:	619a      	str	r2, [r3, #24]
 8004096:	e7e8      	b.n	800406a <Vector6C+0x2a>
 8004098:	08006344 	.word	0x08006344
 800409c:	200017f8 	.word	0x200017f8
 80040a0:	080019d7 	.word	0x080019d7
 80040a4:	080019da 	.word	0x080019da
	...

080040b0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_ADC1_HANDLER) {
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @notapi
 */
void adc_lld_serve_interrupt(ADCDriver *adcp) {
  uint32_t isr;

  isr = adcp->adc->ISR;
 80040b2:	4c33      	ldr	r4, [pc, #204]	; (8004180 <Vector70+0xd0>)
  OSAL_IRQ_PROLOGUE();
 80040b4:	4676      	mov	r6, lr
  isr = adcp->adc->ISR;
 80040b6:	69a0      	ldr	r0, [r4, #24]
  adcp->adc->ISR = isr;

  /* It could be a spurious interrupt caused by overflows after DMA disabling,
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
 80040b8:	6927      	ldr	r7, [r4, #16]
  isr = adcp->adc->ISR;
 80040ba:	6805      	ldr	r5, [r0, #0]
  adcp->adc->ISR = isr;
 80040bc:	6005      	str	r5, [r0, #0]
  if (adcp->grpp != NULL) {
 80040be:	2f00      	cmp	r7, #0
 80040c0:	d008      	beq.n	80040d4 <Vector70+0x24>
    /* Note, an overflow may occur after the conversion ended before the driver
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
 80040c2:	06eb      	lsls	r3, r5, #27
 80040c4:	d504      	bpl.n	80040d0 <Vector70+0x20>
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
 80040c6:	69e1      	ldr	r1, [r4, #28]
 80040c8:	684b      	ldr	r3, [r1, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
    if ((isr & ADC_ISR_OVR) &&
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d134      	bne.n	800413a <Vector70+0x8a>
      /* ADC overflow condition, this could happen only if the DMA is unable
         to read data fast enough.*/
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
    }
    if (isr & ADC_ISR_AWD1) {
 80040d0:	062d      	lsls	r5, r5, #24
 80040d2:	d402      	bmi.n	80040da <Vector70+0x2a>
  if (lr != 0xFFFFFFF1U) {
 80040d4:	360f      	adds	r6, #15
 80040d6:	d11a      	bne.n	800410e <Vector70+0x5e>
}
 80040d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD);
 80040da:	69e1      	ldr	r1, [r4, #28]
 80040dc:	69a0      	ldr	r0, [r4, #24]
 80040de:	f7fe fd67 	bl	8002bb0 <adc_lld_stop_conversion.isra.0>
 80040e2:	6923      	ldr	r3, [r4, #16]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d03f      	beq.n	800416a <Vector70+0xba>
 80040ea:	2205      	movs	r2, #5
 80040ec:	2102      	movs	r1, #2
 80040ee:	0020      	movs	r0, r4
 80040f0:	7022      	strb	r2, [r4, #0]
 80040f2:	4798      	blx	r3
 80040f4:	7823      	ldrb	r3, [r4, #0]
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d037      	beq.n	800416a <Vector70+0xba>
  __ASM volatile ("cpsid i" : : : "memory");
 80040fa:	b672      	cpsid	i
  chThdResumeI(trp, msg);
 80040fc:	2101      	movs	r1, #1
 80040fe:	0020      	movs	r0, r4
 8004100:	4249      	negs	r1, r1
 8004102:	3014      	adds	r0, #20
 8004104:	f7fd fdfc 	bl	8001d00 <chThdResumeI>
  __ASM volatile ("cpsie i" : : : "memory");
 8004108:	b662      	cpsie	i
 800410a:	360f      	adds	r6, #15
 800410c:	d0e4      	beq.n	80040d8 <Vector70+0x28>
  __ASM volatile ("cpsid i" : : : "memory");
 800410e:	b672      	cpsid	i
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004110:	f3ef 8309 	mrs	r3, PSP
    ectxp--;
 8004114:	3b20      	subs	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004116:	f383 8809 	msr	PSP, r3
    ectxp->xpsr = 0x01000000U;
 800411a:	2280      	movs	r2, #128	; 0x80
 800411c:	0452      	lsls	r2, r2, #17
 800411e:	61da      	str	r2, [r3, #28]
  tprio_t p1 = firstprio(&oip->rlist.queue);
 8004120:	4a18      	ldr	r2, [pc, #96]	; (8004184 <Vector70+0xd4>)
 8004122:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->prio;
 8004124:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8004126:	6889      	ldr	r1, [r1, #8]
 8004128:	6892      	ldr	r2, [r2, #8]
 800412a:	4291      	cmp	r1, r2
 800412c:	d902      	bls.n	8004134 <Vector70+0x84>
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <Vector70+0xd8>)
 8004130:	619a      	str	r2, [r3, #24]
 8004132:	e7d1      	b.n	80040d8 <Vector70+0x28>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <Vector70+0xdc>)
 8004136:	619a      	str	r2, [r3, #24]
}
 8004138:	e7ce      	b.n	80040d8 <Vector70+0x28>
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
 800413a:	f7fe fd39 	bl	8002bb0 <adc_lld_stop_conversion.isra.0>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d017      	beq.n	8004174 <Vector70+0xc4>
 8004144:	2205      	movs	r2, #5
 8004146:	2101      	movs	r1, #1
 8004148:	0020      	movs	r0, r4
 800414a:	7022      	strb	r2, [r4, #0]
 800414c:	4798      	blx	r3
 800414e:	7823      	ldrb	r3, [r4, #0]
 8004150:	2b05      	cmp	r3, #5
 8004152:	d00f      	beq.n	8004174 <Vector70+0xc4>
  __ASM volatile ("cpsid i" : : : "memory");
 8004154:	b672      	cpsid	i
 8004156:	2101      	movs	r1, #1
 8004158:	0020      	movs	r0, r4
 800415a:	4249      	negs	r1, r1
 800415c:	3014      	adds	r0, #20
 800415e:	f7fd fdcf 	bl	8001d00 <chThdResumeI>
  __ASM volatile ("cpsie i" : : : "memory");
 8004162:	b662      	cpsie	i
    if (isr & ADC_ISR_AWD1) {
 8004164:	062d      	lsls	r5, r5, #24
 8004166:	d5b5      	bpl.n	80040d4 <Vector70+0x24>
 8004168:	e7b7      	b.n	80040da <Vector70+0x2a>
      _adc_isr_error_code(adcp, ADC_ERR_AWD);
 800416a:	2302      	movs	r3, #2
 800416c:	7023      	strb	r3, [r4, #0]
 800416e:	2300      	movs	r3, #0
 8004170:	6123      	str	r3, [r4, #16]
 8004172:	e7c2      	b.n	80040fa <Vector70+0x4a>
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
 8004174:	2302      	movs	r3, #2
 8004176:	7023      	strb	r3, [r4, #0]
 8004178:	2300      	movs	r3, #0
 800417a:	6123      	str	r3, [r4, #16]
 800417c:	e7ea      	b.n	8004154 <Vector70+0xa4>
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	20000a08 	.word	0x20000a08
 8004184:	200017f8 	.word	0x200017f8
 8004188:	080019d7 	.word	0x080019d7
 800418c:	080019da 	.word	0x080019da

08004190 <VectorB8>:
OSAL_IRQ_HANDLER(STM32_CAN1_UNIFIED_HANDLER) {
 8004190:	b570      	push	{r4, r5, r6, lr}
  tsr = canp->can->TSR;
 8004192:	4c61      	ldr	r4, [pc, #388]	; (8004318 <VectorB8+0x188>)
  OSAL_IRQ_PROLOGUE();
 8004194:	4676      	mov	r6, lr
  tsr = canp->can->TSR;
 8004196:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004198:	6893      	ldr	r3, [r2, #8]
  canp->can->TSR = tsr;
 800419a:	6093      	str	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 800419c:	2201      	movs	r2, #1
 800419e:	0015      	movs	r5, r2
 80041a0:	401d      	ands	r5, r3
 80041a2:	421a      	tst	r2, r3
 80041a4:	d002      	beq.n	80041ac <VectorB8+0x1c>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 80041a6:	320b      	adds	r2, #11
 80041a8:	421a      	tst	r2, r3
 80041aa:	d14f      	bne.n	800424c <VectorB8+0xbc>
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 80041ac:	05da      	lsls	r2, r3, #23
 80041ae:	d506      	bpl.n	80041be <VectorB8+0x2e>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 80041b0:	22c0      	movs	r2, #192	; 0xc0
 80041b2:	0112      	lsls	r2, r2, #4
 80041b4:	4213      	tst	r3, r2
 80041b6:	d046      	beq.n	8004246 <VectorB8+0xb6>
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 80041b8:	2280      	movs	r2, #128	; 0x80
 80041ba:	0292      	lsls	r2, r2, #10
 80041bc:	4315      	orrs	r5, r2
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 80041be:	03da      	lsls	r2, r3, #15
 80041c0:	d506      	bpl.n	80041d0 <VectorB8+0x40>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 80041c2:	22c0      	movs	r2, #192	; 0xc0
 80041c4:	0312      	lsls	r2, r2, #12
 80041c6:	4213      	tst	r3, r2
 80041c8:	d03a      	beq.n	8004240 <VectorB8+0xb0>
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	02db      	lsls	r3, r3, #11
 80041ce:	431d      	orrs	r5, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80041d0:	b672      	cpsid	i
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 80041d2:	0020      	movs	r0, r4
 80041d4:	3008      	adds	r0, #8
 80041d6:	f7fe fc33 	bl	8002a40 <chThdDequeueAllI.constprop.0>
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  osalDbgCheck(esp != NULL);

  esp->flags |= flags;
 80041da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041dc:	431d      	orrs	r5, r3
  if (esp->cb != NULL) {
 80041de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  esp->flags |= flags;
 80041e0:	6265      	str	r5, [r4, #36]	; 0x24
  if (esp->cb != NULL) {
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <VectorB8+0x5c>
    esp->cb(esp);
 80041e6:	0020      	movs	r0, r4
 80041e8:	3024      	adds	r0, #36	; 0x24
 80041ea:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
 80041ec:	b662      	cpsie	i
  rf0r = canp->can->RF0R;
 80041ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041f0:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 80041f2:	07aa      	lsls	r2, r5, #30
 80041f4:	d000      	beq.n	80041f8 <VectorB8+0x68>
 80041f6:	e065      	b.n	80042c4 <VectorB8+0x134>
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 80041f8:	2210      	movs	r2, #16
 80041fa:	422a      	tst	r2, r5
 80041fc:	d000      	beq.n	8004200 <VectorB8+0x70>
 80041fe:	e07a      	b.n	80042f6 <VectorB8+0x166>
  rf1r = canp->can->RF1R;
 8004200:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8004202:	07aa      	lsls	r2, r5, #30
 8004204:	d125      	bne.n	8004252 <VectorB8+0xc2>
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8004206:	2210      	movs	r2, #16
 8004208:	422a      	tst	r2, r5
 800420a:	d13a      	bne.n	8004282 <VectorB8+0xf2>
  msr = canp->can->MSR;
 800420c:	685a      	ldr	r2, [r3, #4]
  canp->can->MSR = msr;
 800420e:	605a      	str	r2, [r3, #4]
  if (msr & CAN_MSR_ERRI) {
 8004210:	0752      	lsls	r2, r2, #29
 8004212:	d447      	bmi.n	80042a4 <VectorB8+0x114>
  if (lr != 0xFFFFFFF1U) {
 8004214:	360f      	adds	r6, #15
 8004216:	d100      	bne.n	800421a <VectorB8+0x8a>
}
 8004218:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800421a:	b672      	cpsid	i
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800421c:	f3ef 8309 	mrs	r3, PSP
    ectxp--;
 8004220:	3b20      	subs	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004222:	f383 8809 	msr	PSP, r3
    ectxp->xpsr = 0x01000000U;
 8004226:	2280      	movs	r2, #128	; 0x80
 8004228:	0452      	lsls	r2, r2, #17
 800422a:	61da      	str	r2, [r3, #28]
  tprio_t p1 = firstprio(&oip->rlist.queue);
 800422c:	4a3b      	ldr	r2, [pc, #236]	; (800431c <VectorB8+0x18c>)
 800422e:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->prio;
 8004230:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8004232:	6889      	ldr	r1, [r1, #8]
 8004234:	6892      	ldr	r2, [r2, #8]
 8004236:	4291      	cmp	r1, r2
 8004238:	d96b      	bls.n	8004312 <VectorB8+0x182>
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800423a:	4a39      	ldr	r2, [pc, #228]	; (8004320 <VectorB8+0x190>)
 800423c:	619a      	str	r2, [r3, #24]
 800423e:	e7eb      	b.n	8004218 <VectorB8+0x88>
      flags |= CAN_MAILBOX_TO_MASK(3U);
 8004240:	2304      	movs	r3, #4
 8004242:	431d      	orrs	r5, r3
 8004244:	e7c4      	b.n	80041d0 <VectorB8+0x40>
      flags |= CAN_MAILBOX_TO_MASK(2U);
 8004246:	2202      	movs	r2, #2
 8004248:	4315      	orrs	r5, r2
 800424a:	e7b8      	b.n	80041be <VectorB8+0x2e>
      flags |= CAN_MAILBOX_TO_MASK(1U) << 16U;
 800424c:	2580      	movs	r5, #128	; 0x80
 800424e:	026d      	lsls	r5, r5, #9
 8004250:	e7ac      	b.n	80041ac <VectorB8+0x1c>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8004252:	2110      	movs	r1, #16
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	438a      	bics	r2, r1
 8004258:	615a      	str	r2, [r3, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800425a:	b672      	cpsid	i
  chThdDequeueAllI(tqp, msg);
 800425c:	0020      	movs	r0, r4
 800425e:	3010      	adds	r0, #16
 8004260:	f7fe fbee 	bl	8002a40 <chThdDequeueAllI.constprop.0>
  esp->flags |= flags;
 8004264:	2202      	movs	r2, #2
 8004266:	69a3      	ldr	r3, [r4, #24]
 8004268:	4313      	orrs	r3, r2
 800426a:	61a3      	str	r3, [r4, #24]
  if (esp->cb != NULL) {
 800426c:	69e3      	ldr	r3, [r4, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <VectorB8+0xe8>
    esp->cb(esp);
 8004272:	0020      	movs	r0, r4
 8004274:	3018      	adds	r0, #24
 8004276:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
 8004278:	b662      	cpsie	i
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800427a:	2210      	movs	r2, #16
    canp->can->RF1R = CAN_RF1R_FOVR1;
 800427c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800427e:	422a      	tst	r2, r5
 8004280:	d0c4      	beq.n	800420c <VectorB8+0x7c>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8004282:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004284:	b672      	cpsid	i
  esp->flags |= flags;
 8004286:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004288:	4313      	orrs	r3, r2
 800428a:	6323      	str	r3, [r4, #48]	; 0x30
  if (esp->cb != NULL) {
 800428c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <VectorB8+0x108>
    esp->cb(esp);
 8004292:	0020      	movs	r0, r4
 8004294:	3030      	adds	r0, #48	; 0x30
 8004296:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
 8004298:	b662      	cpsie	i
  msr = canp->can->MSR;
 800429a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800429c:	685a      	ldr	r2, [r3, #4]
  canp->can->MSR = msr;
 800429e:	605a      	str	r2, [r3, #4]
  if (msr & CAN_MSR_ERRI) {
 80042a0:	0752      	lsls	r2, r2, #29
 80042a2:	d5b7      	bpl.n	8004214 <VectorB8+0x84>
    uint32_t esr = canp->can->ESR;
 80042a4:	699b      	ldr	r3, [r3, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80042a6:	b672      	cpsid	i
  esp->flags |= flags;
 80042a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	4313      	orrs	r3, r2
 80042ae:	6323      	str	r3, [r4, #48]	; 0x30
  if (esp->cb != NULL) {
 80042b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <VectorB8+0x12c>
    esp->cb(esp);
 80042b6:	0020      	movs	r0, r4
 80042b8:	3030      	adds	r0, #48	; 0x30
 80042ba:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
 80042bc:	b662      	cpsie	i
  if (lr != 0xFFFFFFF1U) {
 80042be:	360f      	adds	r6, #15
 80042c0:	d0aa      	beq.n	8004218 <VectorB8+0x88>
 80042c2:	e7aa      	b.n	800421a <VectorB8+0x8a>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 80042c4:	2102      	movs	r1, #2
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	438a      	bics	r2, r1
 80042ca:	615a      	str	r2, [r3, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80042cc:	b672      	cpsid	i
  chThdDequeueAllI(tqp, msg);
 80042ce:	0020      	movs	r0, r4
 80042d0:	3010      	adds	r0, #16
 80042d2:	f7fe fbb5 	bl	8002a40 <chThdDequeueAllI.constprop.0>
  esp->flags |= flags;
 80042d6:	2201      	movs	r2, #1
 80042d8:	69a3      	ldr	r3, [r4, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61a3      	str	r3, [r4, #24]
  if (esp->cb != NULL) {
 80042de:	69e3      	ldr	r3, [r4, #28]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <VectorB8+0x15a>
    esp->cb(esp);
 80042e4:	0020      	movs	r0, r4
 80042e6:	3018      	adds	r0, #24
 80042e8:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
 80042ea:	b662      	cpsie	i
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 80042ec:	2210      	movs	r2, #16
    canp->can->RF0R = CAN_RF0R_FOVR0;
 80042ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 80042f0:	422a      	tst	r2, r5
 80042f2:	d100      	bne.n	80042f6 <VectorB8+0x166>
 80042f4:	e784      	b.n	8004200 <VectorB8+0x70>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 80042f6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80042f8:	b672      	cpsid	i
  esp->flags |= flags;
 80042fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042fc:	4313      	orrs	r3, r2
 80042fe:	6323      	str	r3, [r4, #48]	; 0x30
  if (esp->cb != NULL) {
 8004300:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <VectorB8+0x17c>
    esp->cb(esp);
 8004306:	0020      	movs	r0, r4
 8004308:	3030      	adds	r0, #48	; 0x30
 800430a:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
 800430c:	b662      	cpsie	i
  rf1r = canp->can->RF1R;
 800430e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
}
 8004310:	e776      	b.n	8004200 <VectorB8+0x70>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8004312:	4a04      	ldr	r2, [pc, #16]	; (8004324 <VectorB8+0x194>)
 8004314:	619a      	str	r2, [r3, #24]
}
 8004316:	e77f      	b.n	8004218 <VectorB8+0x88>
 8004318:	20000a2c 	.word	0x20000a2c
 800431c:	200017f8 	.word	0x200017f8
 8004320:	080019d7 	.word	0x080019d7
 8004324:	080019da 	.word	0x080019da
	...

08004330 <Vector64>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8004330:	210e      	movs	r1, #14
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <Vector64+0x54>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8004334:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8004336:	681a      	ldr	r2, [r3, #0]
  OSAL_IRQ_PROLOGUE();
 8004338:	4674      	mov	r4, lr
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 800433a:	4011      	ands	r1, r2
  if (flags & dmastp->channel->CCR) {
 800433c:	4a12      	ldr	r2, [pc, #72]	; (8004388 <Vector64+0x58>)
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	420a      	tst	r2, r1
 8004342:	d006      	beq.n	8004352 <Vector64+0x22>
    if (dma.streams[selfindex].func) {
 8004344:	4a11      	ldr	r2, [pc, #68]	; (800438c <Vector64+0x5c>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8004346:	6059      	str	r1, [r3, #4]
    if (dma.streams[selfindex].func) {
 8004348:	6893      	ldr	r3, [r2, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <Vector64+0x22>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800434e:	68d0      	ldr	r0, [r2, #12]
 8004350:	4798      	blx	r3
  if (lr != 0xFFFFFFF1U) {
 8004352:	340f      	adds	r4, #15
 8004354:	d100      	bne.n	8004358 <Vector64+0x28>
}
 8004356:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8004358:	b672      	cpsid	i
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800435a:	f3ef 8309 	mrs	r3, PSP
    ectxp--;
 800435e:	3b20      	subs	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004360:	f383 8809 	msr	PSP, r3
    ectxp->xpsr = 0x01000000U;
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	0452      	lsls	r2, r2, #17
 8004368:	61da      	str	r2, [r3, #28]
  tprio_t p1 = firstprio(&oip->rlist.queue);
 800436a:	4a09      	ldr	r2, [pc, #36]	; (8004390 <Vector64+0x60>)
 800436c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->prio;
 800436e:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8004370:	6889      	ldr	r1, [r1, #8]
 8004372:	6892      	ldr	r2, [r2, #8]
 8004374:	4291      	cmp	r1, r2
 8004376:	d902      	bls.n	800437e <Vector64+0x4e>
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8004378:	4a06      	ldr	r2, [pc, #24]	; (8004394 <Vector64+0x64>)
 800437a:	619a      	str	r2, [r3, #24]
 800437c:	e7eb      	b.n	8004356 <Vector64+0x26>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 800437e:	4a06      	ldr	r2, [pc, #24]	; (8004398 <Vector64+0x68>)
 8004380:	619a      	str	r2, [r3, #24]
 8004382:	e7e8      	b.n	8004356 <Vector64+0x26>
 8004384:	40020000 	.word	0x40020000
 8004388:	40020008 	.word	0x40020008
 800438c:	200018f0 	.word	0x200018f0
 8004390:	200017f8 	.word	0x200017f8
 8004394:	080019d7 	.word	0x080019d7
 8004398:	080019da 	.word	0x080019da
 800439c:	00000000 	.word	0x00000000

080043a0 <Vector7C>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 80043a2:	2380      	movs	r3, #128	; 0x80
 80043a4:	05db      	lsls	r3, r3, #23
 80043a6:	691a      	ldr	r2, [r3, #16]
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80043a8:	4646      	mov	r6, r8
  sr  = timp->SR;
 80043aa:	4698      	mov	r8, r3
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80043ac:	68db      	ldr	r3, [r3, #12]
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80043ae:	464f      	mov	r7, r9
 80043b0:	4013      	ands	r3, r2
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80043b2:	22ff      	movs	r2, #255	; 0xff
 80043b4:	401a      	ands	r2, r3
  timp->SR = ~sr;
 80043b6:	43d2      	mvns	r2, r2
 80043b8:	4641      	mov	r1, r8
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80043ba:	b4c0      	push	{r6, r7}
  OSAL_IRQ_PROLOGUE();
 80043bc:	46f1      	mov	r9, lr
  timp->SR = ~sr;
 80043be:	610a      	str	r2, [r1, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
 80043c0:	079b      	lsls	r3, r3, #30
 80043c2:	d419      	bmi.n	80043f8 <Vector7C+0x58>
  if (lr != 0xFFFFFFF1U) {
 80043c4:	464b      	mov	r3, r9
 80043c6:	330f      	adds	r3, #15
 80043c8:	d103      	bne.n	80043d2 <Vector7C+0x32>
}
 80043ca:	bcc0      	pop	{r6, r7}
 80043cc:	46b9      	mov	r9, r7
 80043ce:	46b0      	mov	r8, r6
 80043d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80043d2:	b672      	cpsid	i
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80043d4:	f3ef 8309 	mrs	r3, PSP
    ectxp--;
 80043d8:	3b20      	subs	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80043da:	f383 8809 	msr	PSP, r3
    ectxp->xpsr = 0x01000000U;
 80043de:	2280      	movs	r2, #128	; 0x80
 80043e0:	0452      	lsls	r2, r2, #17
 80043e2:	61da      	str	r2, [r3, #28]
  tprio_t p1 = firstprio(&oip->rlist.queue);
 80043e4:	4a2c      	ldr	r2, [pc, #176]	; (8004498 <Vector7C+0xf8>)
 80043e6:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->prio;
 80043e8:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80043ea:	6889      	ldr	r1, [r1, #8]
 80043ec:	6892      	ldr	r2, [r2, #8]
 80043ee:	4291      	cmp	r1, r2
 80043f0:	d949      	bls.n	8004486 <Vector7C+0xe6>
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80043f2:	4a2a      	ldr	r2, [pc, #168]	; (800449c <Vector7C+0xfc>)
 80043f4:	619a      	str	r2, [r3, #24]
 80043f6:	e7e8      	b.n	80043ca <Vector7C+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80043f8:	b672      	cpsid	i
  vtp = vtlp->next;
 80043fa:	4c27      	ldr	r4, [pc, #156]	; (8004498 <Vector7C+0xf8>)
  return (systime_t)STM32_ST_TIM->CNT;
 80043fc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80043fe:	6923      	ldr	r3, [r4, #16]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8004400:	69e2      	ldr	r2, [r4, #28]
    if (nowdelta < vtp->delta) {
 8004402:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8004404:	1a85      	subs	r5, r0, r2
 8004406:	428d      	cmp	r5, r1
 8004408:	d31f      	bcc.n	800444a <Vector7C+0xaa>
      vtp->next->prev = (virtual_timer_t *)vtlp;
 800440a:	0026      	movs	r6, r4
 800440c:	3610      	adds	r6, #16
      vtp->func = NULL;
 800440e:	2700      	movs	r7, #0
 8004410:	e008      	b.n	8004424 <Vector7C+0x84>
  __ASM volatile ("cpsie i" : : : "memory");
 8004412:	b662      	cpsie	i
      fn(vtp->par);
 8004414:	6918      	ldr	r0, [r3, #16]
 8004416:	4788      	blx	r1
  __ASM volatile ("cpsid i" : : : "memory");
 8004418:	b672      	cpsid	i
      vtp = vtlp->next;
 800441a:	6923      	ldr	r3, [r4, #16]
    while (vtp->delta <= nowdelta);
 800441c:	6899      	ldr	r1, [r3, #8]
 800441e:	428d      	cmp	r5, r1
 8004420:	d30d      	bcc.n	800443e <Vector7C+0x9e>
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8004422:	69e2      	ldr	r2, [r4, #28]
      vtlp->lasttime += vtp->delta;
 8004424:	188a      	adds	r2, r1, r2
 8004426:	61e2      	str	r2, [r4, #28]
      vtp->next->prev = (virtual_timer_t *)vtlp;
 8004428:	681a      	ldr	r2, [r3, #0]
      nowdelta -= vtp->delta;
 800442a:	1a6d      	subs	r5, r5, r1
      vtp->next->prev = (virtual_timer_t *)vtlp;
 800442c:	6056      	str	r6, [r2, #4]
      fn = vtp->func;
 800442e:	68d9      	ldr	r1, [r3, #12]
      vtlp->next = vtp->next;
 8004430:	6122      	str	r2, [r4, #16]
      vtp->func = NULL;
 8004432:	60df      	str	r7, [r3, #12]
      if (is_vtlist_empty(vtlp)) {
 8004434:	42b2      	cmp	r2, r6
 8004436:	d1ec      	bne.n	8004412 <Vector7C+0x72>
  STM32_ST_TIM->DIER = 0U;
 8004438:	4642      	mov	r2, r8
 800443a:	60d7      	str	r7, [r2, #12]
}
 800443c:	e7e9      	b.n	8004412 <Vector7C+0x72>
  return (systime_t)STM32_ST_TIM->CNT;
 800443e:	4642      	mov	r2, r8
 8004440:	6a50      	ldr	r0, [r2, #36]	; 0x24
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8004442:	69e2      	ldr	r2, [r4, #28]
 8004444:	1a85      	subs	r5, r0, r2
    if (nowdelta < vtp->delta) {
 8004446:	428d      	cmp	r5, r1
 8004448:	d2e1      	bcs.n	800440e <Vector7C+0x6e>
  if (is_vtlist_empty(vtlp)) {
 800444a:	0021      	movs	r1, r4
 800444c:	3110      	adds	r1, #16
 800444e:	428b      	cmp	r3, r1
 8004450:	d01c      	beq.n	800448c <Vector7C+0xec>
  vtlp->next->delta -= nowdelta;
 8004452:	6899      	ldr	r1, [r3, #8]
  vtlp->lasttime += nowdelta;
 8004454:	61e0      	str	r0, [r4, #28]
  vtlp->next->delta -= nowdelta;
 8004456:	1a09      	subs	r1, r1, r0
 8004458:	188a      	adds	r2, r1, r2
 800445a:	609a      	str	r2, [r3, #8]
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	05db      	lsls	r3, r3, #23
 8004460:	68db      	ldr	r3, [r3, #12]
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8004462:	079b      	lsls	r3, r3, #30
 8004464:	d514      	bpl.n	8004490 <Vector7C+0xf0>
 8004466:	0013      	movs	r3, r2
 8004468:	2a04      	cmp	r2, #4
 800446a:	d200      	bcs.n	800446e <Vector7C+0xce>
 800446c:	2304      	movs	r3, #4
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800446e:	2280      	movs	r2, #128	; 0x80
  return systime + (systime_t)interval;
 8004470:	18c1      	adds	r1, r0, r3
 8004472:	05d2      	lsls	r2, r2, #23
 8004474:	6351      	str	r1, [r2, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8004476:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8004478:	1a12      	subs	r2, r2, r0
  chDbgAssert(chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX()) <=
 800447a:	4293      	cmp	r3, r2
 800447c:	d206      	bcs.n	800448c <Vector7C+0xec>
 800447e:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <Vector7C+0x100>)
 8004482:	6463      	str	r3, [r4, #68]	; 0x44
  while (true) {
 8004484:	e7fe      	b.n	8004484 <Vector7C+0xe4>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8004486:	4a07      	ldr	r2, [pc, #28]	; (80044a4 <Vector7C+0x104>)
 8004488:	619a      	str	r2, [r3, #24]
 800448a:	e79e      	b.n	80043ca <Vector7C+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 800448c:	b662      	cpsie	i
 800448e:	e799      	b.n	80043c4 <Vector7C+0x24>
  __ASM volatile ("cpsid i" : : : "memory");
 8004490:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <Vector7C+0x108>)
 8004494:	6463      	str	r3, [r4, #68]	; 0x44
  while (true) {
 8004496:	e7fe      	b.n	8004496 <Vector7C+0xf6>
 8004498:	200017f8 	.word	0x200017f8
 800449c:	080019d7 	.word	0x080019d7
 80044a0:	08006204 	.word	0x08006204
 80044a4:	080019da 	.word	0x080019da
 80044a8:	080061e4 	.word	0x080061e4
 80044ac:	00000000 	.word	0x00000000

080044b0 <Vector74>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 80044b0:	b510      	push	{r4, lr}
 80044b2:	4674      	mov	r4, lr
  pwm_lld_serve_interrupt(&PWMD1);
 80044b4:	480d      	ldr	r0, [pc, #52]	; (80044ec <Vector74+0x3c>)
 80044b6:	f7fd fdeb 	bl	8002090 <pwm_lld_serve_interrupt>
  if (lr != 0xFFFFFFF1U) {
 80044ba:	340f      	adds	r4, #15
 80044bc:	d100      	bne.n	80044c0 <Vector74+0x10>
}
 80044be:	bd10      	pop	{r4, pc}
 80044c0:	b672      	cpsid	i
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80044c2:	f3ef 8309 	mrs	r3, PSP
    ectxp--;
 80044c6:	3b20      	subs	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80044c8:	f383 8809 	msr	PSP, r3
    ectxp->xpsr = 0x01000000U;
 80044cc:	2280      	movs	r2, #128	; 0x80
 80044ce:	0452      	lsls	r2, r2, #17
 80044d0:	61da      	str	r2, [r3, #28]
  tprio_t p1 = firstprio(&oip->rlist.queue);
 80044d2:	4a07      	ldr	r2, [pc, #28]	; (80044f0 <Vector74+0x40>)
 80044d4:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->prio;
 80044d6:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80044d8:	6889      	ldr	r1, [r1, #8]
 80044da:	6892      	ldr	r2, [r2, #8]
 80044dc:	4291      	cmp	r1, r2
 80044de:	d902      	bls.n	80044e6 <Vector74+0x36>
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80044e0:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <Vector74+0x44>)
 80044e2:	619a      	str	r2, [r3, #24]
 80044e4:	e7eb      	b.n	80044be <Vector74+0xe>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80044e6:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <Vector74+0x48>)
 80044e8:	619a      	str	r2, [r3, #24]
 80044ea:	e7e8      	b.n	80044be <Vector74+0xe>
 80044ec:	20000ab4 	.word	0x20000ab4
 80044f0:	200017f8 	.word	0x200017f8
 80044f4:	080019d7 	.word	0x080019d7
 80044f8:	080019da 	.word	0x080019da
 80044fc:	00000000 	.word	0x00000000

08004500 <Vector78>:
 8004500:	b510      	push	{r4, lr}
 8004502:	4674      	mov	r4, lr
 8004504:	480d      	ldr	r0, [pc, #52]	; (800453c <Vector78+0x3c>)
 8004506:	f7fd fdc3 	bl	8002090 <pwm_lld_serve_interrupt>
 800450a:	340f      	adds	r4, #15
 800450c:	d100      	bne.n	8004510 <Vector78+0x10>
 800450e:	bd10      	pop	{r4, pc}
 8004510:	b672      	cpsid	i
 8004512:	f3ef 8309 	mrs	r3, PSP
 8004516:	3b20      	subs	r3, #32
 8004518:	f383 8809 	msr	PSP, r3
 800451c:	2280      	movs	r2, #128	; 0x80
 800451e:	0452      	lsls	r2, r2, #17
 8004520:	61da      	str	r2, [r3, #28]
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <Vector78+0x40>)
 8004524:	6811      	ldr	r1, [r2, #0]
 8004526:	68d2      	ldr	r2, [r2, #12]
 8004528:	6889      	ldr	r1, [r1, #8]
 800452a:	6892      	ldr	r2, [r2, #8]
 800452c:	4291      	cmp	r1, r2
 800452e:	d902      	bls.n	8004536 <Vector78+0x36>
 8004530:	4a04      	ldr	r2, [pc, #16]	; (8004544 <Vector78+0x44>)
 8004532:	619a      	str	r2, [r3, #24]
 8004534:	e7eb      	b.n	800450e <Vector78+0xe>
 8004536:	4a04      	ldr	r2, [pc, #16]	; (8004548 <Vector78+0x48>)
 8004538:	619a      	str	r2, [r3, #24]
 800453a:	e7e8      	b.n	800450e <Vector78+0xe>
 800453c:	20000ab4 	.word	0x20000ab4
 8004540:	200017f8 	.word	0x200017f8
 8004544:	080019d7 	.word	0x080019d7
 8004548:	080019da 	.word	0x080019da
 800454c:	00000000 	.word	0x00000000

08004550 <Vector80>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8004550:	b510      	push	{r4, lr}
 8004552:	4674      	mov	r4, lr
  pwm_lld_serve_interrupt(&PWMD3);
 8004554:	480d      	ldr	r0, [pc, #52]	; (800458c <Vector80+0x3c>)
 8004556:	f7fd fd9b 	bl	8002090 <pwm_lld_serve_interrupt>
  if (lr != 0xFFFFFFF1U) {
 800455a:	340f      	adds	r4, #15
 800455c:	d100      	bne.n	8004560 <Vector80+0x10>
}
 800455e:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8004560:	b672      	cpsid	i
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004562:	f3ef 8309 	mrs	r3, PSP
    ectxp--;
 8004566:	3b20      	subs	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004568:	f383 8809 	msr	PSP, r3
    ectxp->xpsr = 0x01000000U;
 800456c:	2280      	movs	r2, #128	; 0x80
 800456e:	0452      	lsls	r2, r2, #17
 8004570:	61da      	str	r2, [r3, #28]
  tprio_t p1 = firstprio(&oip->rlist.queue);
 8004572:	4a07      	ldr	r2, [pc, #28]	; (8004590 <Vector80+0x40>)
 8004574:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->prio;
 8004576:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8004578:	6889      	ldr	r1, [r1, #8]
 800457a:	6892      	ldr	r2, [r2, #8]
 800457c:	4291      	cmp	r1, r2
 800457e:	d902      	bls.n	8004586 <Vector80+0x36>
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8004580:	4a04      	ldr	r2, [pc, #16]	; (8004594 <Vector80+0x44>)
 8004582:	619a      	str	r2, [r3, #24]
 8004584:	e7eb      	b.n	800455e <Vector80+0xe>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8004586:	4a04      	ldr	r2, [pc, #16]	; (8004598 <Vector80+0x48>)
 8004588:	619a      	str	r2, [r3, #24]
 800458a:	e7e8      	b.n	800455e <Vector80+0xe>
 800458c:	20000ad0 	.word	0x20000ad0
 8004590:	200017f8 	.word	0x200017f8
 8004594:	080019d7 	.word	0x080019d7
 8004598:	080019da 	.word	0x080019da
 800459c:	00000000 	.word	0x00000000

080045a0 <NMI_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80045a0:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 80045a4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80045a6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80045aa:	b662      	cpsie	i
}
 80045ac:	4770      	bx	lr
 80045ae:	46c0      	nop			; (mov r8, r8)

080045b0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 80045b0:	22fc      	movs	r2, #252	; 0xfc
 80045b2:	4b46      	ldr	r3, [pc, #280]	; (80046cc <__early_init+0x11c>)
 80045b4:	03d2      	lsls	r2, r2, #15
 80045b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80045b8:	b510      	push	{r4, lr}
  rccResetAHB(STM32_GPIO_EN_MASK);
 80045ba:	4311      	orrs	r1, r2
 80045bc:	6299      	str	r1, [r3, #40]	; 0x28
 80045be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80045c0:	4843      	ldr	r0, [pc, #268]	; (80046d0 <__early_init+0x120>)
  gpiop->MODER   = config->moder;
 80045c2:	24a8      	movs	r4, #168	; 0xa8
  rccResetAHB(STM32_GPIO_EN_MASK);
 80045c4:	4001      	ands	r1, r0
 80045c6:	6299      	str	r1, [r3, #40]	; 0x28
 80045c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 80045ca:	6959      	ldr	r1, [r3, #20]
  gpiop->OSPEEDR = config->ospeedr;
 80045cc:	4841      	ldr	r0, [pc, #260]	; (80046d4 <__early_init+0x124>)
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 80045ce:	430a      	orrs	r2, r1
 80045d0:	615a      	str	r2, [r3, #20]
  gpiop->OTYPER  = config->otyper;
 80045d2:	2190      	movs	r1, #144	; 0x90
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 80045d4:	695a      	ldr	r2, [r3, #20]
  gpiop->OTYPER  = config->otyper;
 80045d6:	2200      	movs	r2, #0
 80045d8:	05c9      	lsls	r1, r1, #23
 80045da:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80045dc:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80045de:	483e      	ldr	r0, [pc, #248]	; (80046d8 <__early_init+0x128>)
  gpiop->MODER   = config->moder;
 80045e0:	01e4      	lsls	r4, r4, #7
  gpiop->PUPDR   = config->pupdr;
 80045e2:	60c8      	str	r0, [r1, #12]
  gpiop->AFRL    = config->afrl;
 80045e4:	2084      	movs	r0, #132	; 0x84
 80045e6:	0580      	lsls	r0, r0, #22
  gpiop->ODR     = config->odr;
 80045e8:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80045ea:	6208      	str	r0, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80045ec:	483b      	ldr	r0, [pc, #236]	; (80046dc <__early_init+0x12c>)
 80045ee:	6248      	str	r0, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80045f0:	483b      	ldr	r0, [pc, #236]	; (80046e0 <__early_init+0x130>)
 80045f2:	6008      	str	r0, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 80045f4:	493b      	ldr	r1, [pc, #236]	; (80046e4 <__early_init+0x134>)
  gpiop->OSPEEDR = config->ospeedr;
 80045f6:	483c      	ldr	r0, [pc, #240]	; (80046e8 <__early_init+0x138>)
  gpiop->OTYPER  = config->otyper;
 80045f8:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80045fa:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80045fc:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 80045fe:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004600:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004602:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004604:	600c      	str	r4, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8004606:	4939      	ldr	r1, [pc, #228]	; (80046ec <__early_init+0x13c>)
  gpiop->ODR     = config->odr;
 8004608:	4c39      	ldr	r4, [pc, #228]	; (80046f0 <__early_init+0x140>)
  gpiop->OTYPER  = config->otyper;
 800460a:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800460c:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800460e:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 8004610:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004612:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004614:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004616:	600a      	str	r2, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8004618:	4936      	ldr	r1, [pc, #216]	; (80046f4 <__early_init+0x144>)
 800461a:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800461c:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800461e:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 8004620:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004622:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004624:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004626:	600a      	str	r2, [r1, #0]
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004628:	2101      	movs	r1, #1
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004630:	3101      	adds	r1, #1
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4211      	tst	r1, r2
 8004636:	d0fc      	beq.n	8004632 <__early_init+0x82>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8004638:	2103      	movs	r1, #3
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	438a      	bics	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004640:	220c      	movs	r2, #12
 8004642:	4922      	ldr	r1, [pc, #136]	; (80046cc <__early_init+0x11c>)
 8004644:	0010      	movs	r0, r2
 8004646:	684b      	ldr	r3, [r1, #4]
 8004648:	4018      	ands	r0, r3
 800464a:	421a      	tst	r2, r3
 800464c:	d1fa      	bne.n	8004644 <__early_init+0x94>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800464e:	23f9      	movs	r3, #249	; 0xf9
 8004650:	680a      	ldr	r2, [r1, #0]
 8004652:	4013      	ands	r3, r2
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_HSI14_ENABLED
  /* HSI14 activation.*/
  RCC->CR2 |= RCC_CR2_HSI14ON;
 8004654:	2201      	movs	r2, #1
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004656:	600b      	str	r3, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8004658:	6048      	str	r0, [r1, #4]
  RCC->CR2 |= RCC_CR2_HSI14ON;
 800465a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800465c:	4313      	orrs	r3, r2
 800465e:	634b      	str	r3, [r1, #52]	; 0x34
  while (!(RCC->CR2 & RCC_CR2_HSI14RDY))
 8004660:	2102      	movs	r1, #2
 8004662:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <__early_init+0x11c>)
 8004664:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004666:	4219      	tst	r1, r3
 8004668:	d0fc      	beq.n	8004664 <__early_init+0xb4>
    ;                                       /* Waits until HSI48 is stable. */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800466a:	2101      	movs	r1, #1
 800466c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800466e:	430b      	orrs	r3, r1
 8004670:	6253      	str	r3, [r2, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004672:	4a16      	ldr	r2, [pc, #88]	; (80046cc <__early_init+0x11c>)
 8004674:	3101      	adds	r1, #1
 8004676:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004678:	4219      	tst	r1, r3
 800467a:	d0fc      	beq.n	8004676 <__early_init+0xc6>
#endif

  /* Clock settings.*/
  /* CFGR2 must be configured first since CFGR value could change CFGR2 */
  RCC->CFGR2 = STM32_PREDIV;
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 800467c:	2184      	movs	r1, #132	; 0x84
  RCC->CFGR2 = STM32_PREDIV;
 800467e:	2300      	movs	r3, #0
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 8004680:	0349      	lsls	r1, r1, #13
  RCC->CFGR2 = STM32_PREDIV;
 8004682:	62d3      	str	r3, [r2, #44]	; 0x2c
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 8004684:	6051      	str	r1, [r2, #4]
               STM32_PLLSRC   | STM32_PPRE   | STM32_HPRE |
               ((STM32_PREDIV & STM32_PLLXTPRE_MASK) << STM32_PLLXTPRE_OFFSET);
#if STM32_CECSW == STM32_CECSW_OFF
  RCC->CFGR3 = STM32_USBSW  | STM32_I2C1SW | STM32_USART1SW;
#else
  RCC->CFGR3 = STM32_USBSW  | STM32_CECSW  | STM32_I2C1SW | STM32_USART1SW;
 8004686:	6313      	str	r3, [r2, #48]	; 0x30
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	6811      	ldr	r1, [r2, #0]
 800468c:	045b      	lsls	r3, r3, #17
 800468e:	430b      	orrs	r3, r1
 8004690:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	490d      	ldr	r1, [pc, #52]	; (80046cc <__early_init+0x11c>)
 8004696:	0492      	lsls	r2, r2, #18
 8004698:	680b      	ldr	r3, [r1, #0]
 800469a:	4213      	tst	r3, r2
 800469c:	d0fc      	beq.n	8004698 <__early_init+0xe8>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800469e:	2311      	movs	r3, #17
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 80046a0:	2101      	movs	r1, #1
  FLASH->ACR = STM32_FLASHBITS;
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <__early_init+0x148>)
 80046a4:	6013      	str	r3, [r2, #0]
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	4219      	tst	r1, r3
 80046aa:	d0fc      	beq.n	80046a6 <__early_init+0xf6>
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80046ac:	2102      	movs	r1, #2
 80046ae:	4a07      	ldr	r2, [pc, #28]	; (80046cc <__early_init+0x11c>)
 80046b0:	6853      	ldr	r3, [r2, #4]
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80046b6:	310a      	adds	r1, #10
 80046b8:	6853      	ldr	r3, [r2, #4]
 80046ba:	400b      	ands	r3, r1
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d1fb      	bne.n	80046b8 <__early_init+0x108>
    ;                                       /* Waits selection complete.    */
#endif

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80046c0:	2101      	movs	r1, #1
 80046c2:	6993      	ldr	r3, [r2, #24]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	6193      	str	r3, [r2, #24]
 80046c8:	6993      	ldr	r3, [r2, #24]
  stm32_gpio_init();
  stm32_clock_init();
}
 80046ca:	bd10      	pop	{r4, pc}
 80046cc:	40021000 	.word	0x40021000
 80046d0:	ff81ffff 	.word	0xff81ffff
 80046d4:	7ffd5555 	.word	0x7ffd5555
 80046d8:	25555555 	.word	0x25555555
 80046dc:	00044011 	.word	0x00044011
 80046e0:	aaa8af3f 	.word	0xaaa8af3f
 80046e4:	48000400 	.word	0x48000400
 80046e8:	55555555 	.word	0x55555555
 80046ec:	48000800 	.word	0x48000800
 80046f0:	0000ffff 	.word	0x0000ffff
 80046f4:	48001400 	.word	0x48001400
 80046f8:	40022000 	.word	0x40022000
 80046fc:	00000000 	.word	0x00000000

08004700 <main>:
  rccResetAHB(~STM32_GPIO_EN_MASK);
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <main+0xb0>)
using namespace wbo;

/*
 * Application entry point.
 */
int main() {
 8004702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004704:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004706:	46de      	mov	lr, fp
 8004708:	4657      	mov	r7, sl
 800470a:	464e      	mov	r6, r9
 800470c:	4645      	mov	r5, r8
 800470e:	4a29      	ldr	r2, [pc, #164]	; (80047b4 <main+0xb4>)
 8004710:	b5e0      	push	{r5, r6, r7, lr}
 8004712:	430a      	orrs	r2, r1
 8004714:	21fc      	movs	r1, #252	; 0xfc
 8004716:	629a      	str	r2, [r3, #40]	; 0x28
 8004718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471a:	03c9      	lsls	r1, r1, #15
 800471c:	400a      	ands	r2, r1
 800471e:	629a      	str	r2, [r3, #40]	; 0x28
 8004720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	2201      	movs	r2, #1
 8004726:	2000      	movs	r0, #0
 8004728:	4252      	negs	r2, r2
 800472a:	611a      	str	r2, [r3, #16]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	6118      	str	r0, [r3, #16]
 8004730:	691a      	ldr	r2, [r3, #16]
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 8004732:	68d9      	ldr	r1, [r3, #12]
 8004734:	4a20      	ldr	r2, [pc, #128]	; (80047b8 <main+0xb8>)
 8004736:	b08d      	sub	sp, #52	; 0x34
 8004738:	430a      	orrs	r2, r1
 800473a:	2180      	movs	r1, #128	; 0x80
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	03c9      	lsls	r1, r1, #15
 8004742:	400a      	ands	r2, r1
 8004744:	60da      	str	r2, [r3, #12]
 8004746:	68da      	ldr	r2, [r3, #12]
  rccEnablePWRInterface(true);
 8004748:	2280      	movs	r2, #128	; 0x80
 800474a:	69d9      	ldr	r1, [r3, #28]
 800474c:	0552      	lsls	r2, r2, #21
 800474e:	430a      	orrs	r2, r1
 8004750:	61da      	str	r2, [r3, #28]
 8004752:	69da      	ldr	r2, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8004754:	2280      	movs	r2, #128	; 0x80
 8004756:	4919      	ldr	r1, [pc, #100]	; (80047bc <main+0xbc>)
 8004758:	0052      	lsls	r2, r2, #1
 800475a:	680c      	ldr	r4, [r1, #0]
 800475c:	4322      	orrs	r2, r4
 800475e:	600a      	str	r2, [r1, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8004760:	21c0      	movs	r1, #192	; 0xc0
 8004762:	6a1a      	ldr	r2, [r3, #32]
 8004764:	0089      	lsls	r1, r1, #2
 8004766:	400a      	ands	r2, r1
 8004768:	3901      	subs	r1, #1
 800476a:	39ff      	subs	r1, #255	; 0xff
 800476c:	428a      	cmp	r2, r1
 800476e:	d003      	beq.n	8004778 <main+0x78>
    RCC->BDCR = RCC_BDCR_BDRST;
 8004770:	2280      	movs	r2, #128	; 0x80
 8004772:	0252      	lsls	r2, r2, #9
 8004774:	621a      	str	r2, [r3, #32]
    RCC->BDCR = 0;
 8004776:	6218      	str	r0, [r3, #32]
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <main+0xb0>)
 800477c:	0212      	lsls	r2, r2, #8
 800477e:	6a19      	ldr	r1, [r3, #32]
 8004780:	4211      	tst	r1, r2
 8004782:	d107      	bne.n	8004794 <main+0x94>
    RCC->BDCR |= STM32_RTCSEL;
 8004784:	2180      	movs	r1, #128	; 0x80
 8004786:	6a18      	ldr	r0, [r3, #32]
 8004788:	0089      	lsls	r1, r1, #2
 800478a:	4301      	orrs	r1, r0
 800478c:	6219      	str	r1, [r3, #32]
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800478e:	6a19      	ldr	r1, [r3, #32]
 8004790:	430a      	orrs	r2, r1
 8004792:	621a      	str	r2, [r3, #32]
  dma.allocated_mask = 0U;
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <main+0xc0>)
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8004796:	2400      	movs	r4, #0
  dma.allocated_mask = 0U;
 8004798:	001a      	movs	r2, r3
 800479a:	9303      	str	r3, [sp, #12]
 800479c:	2300      	movs	r3, #0
 800479e:	6013      	str	r3, [r2, #0]
  dma.isr_mask       = 0U;
 80047a0:	6053      	str	r3, [r2, #4]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <main+0xc4>)
  dma.isr_mask       = 0U;
 80047a4:	4908      	ldr	r1, [pc, #32]	; (80047c8 <main+0xc8>)
 80047a6:	0018      	movs	r0, r3
 80047a8:	9304      	str	r3, [sp, #16]
 80047aa:	3070      	adds	r0, #112	; 0x70
 80047ac:	e00f      	b.n	80047ce <main+0xce>
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	40021000 	.word	0x40021000
 80047b4:	ff81ffff 	.word	0xff81ffff
 80047b8:	ffbfffff 	.word	0xffbfffff
 80047bc:	40007000 	.word	0x40007000
 80047c0:	200018f0 	.word	0x200018f0
 80047c4:	08006344 	.word	0x08006344
 80047c8:	40020008 	.word	0x40020008
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80047cc:	6859      	ldr	r1, [r3, #4]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80047ce:	3310      	adds	r3, #16
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80047d0:	600c      	str	r4, [r1, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80047d2:	3208      	adds	r2, #8
    dma.streams[i].func = NULL;
 80047d4:	6014      	str	r4, [r2, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80047d6:	4283      	cmp	r3, r0
 80047d8:	d1f8      	bne.n	80047cc <main+0xcc>
  DMA1->IFCR = 0xFFFFFFFFU;
 80047da:	2201      	movs	r2, #1
 80047dc:	4be8      	ldr	r3, [pc, #928]	; (8004b80 <main+0x480>)
 80047de:	4252      	negs	r2, r2
 80047e0:	605a      	str	r2, [r3, #4]
 * @notapi
 */
void irqInit(void) {

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_1_IRQn, STM32_IRQ_EXTI0_1_PRIORITY);
 80047e2:	2103      	movs	r1, #3
 80047e4:	2005      	movs	r0, #5
 80047e6:	f7fd faab 	bl	8001d40 <nvicEnableVector>
  nvicEnableVector(EXTI2_3_IRQn, STM32_IRQ_EXTI2_3_PRIORITY);
 80047ea:	2103      	movs	r1, #3
 80047ec:	2006      	movs	r0, #6
 80047ee:	f7fd faa7 	bl	8001d40 <nvicEnableVector>
  nvicEnableVector(EXTI4_15_IRQn, STM32_IRQ_EXTI4_15_PRIORITY);
 80047f2:	2103      	movs	r1, #3
 80047f4:	2007      	movs	r0, #7
 80047f6:	f7fd faa3 	bl	8001d40 <nvicEnableVector>
#endif

#if HAL_USE_SERIAL || HAL_USE_UART
  nvicEnableVector(STM32_USART1_NUMBER, STM32_IRQ_USART1_PRIORITY);
 80047fa:	2103      	movs	r1, #3
 80047fc:	201b      	movs	r0, #27
 80047fe:	f7fd fa9f 	bl	8001d40 <nvicEnableVector>
  nvicEnableVector(STM32_USART2_NUMBER, STM32_IRQ_USART2_PRIORITY);
 8004802:	2103      	movs	r1, #3
 8004804:	201c      	movs	r0, #28
 8004806:	f7fd fa9b 	bl	8001d40 <nvicEnableVector>
  nvicEnableVector(STM32_USART3_8_NUMBER, STM32_IRQ_USART3_8_PRIORITY);
 800480a:	2103      	movs	r1, #3
 800480c:	201d      	movs	r0, #29
 800480e:	f7fd fa97 	bl	8001d40 <nvicEnableVector>
  adcp->state    = ADC_STOP;
 8004812:	4bdc      	ldr	r3, [pc, #880]	; (8004b84 <main+0x484>)
  ADCD1.adc     = ADC1;
 8004814:	4ddc      	ldr	r5, [pc, #880]	; (8004b88 <main+0x488>)
 8004816:	4699      	mov	r9, r3
 8004818:	2301      	movs	r3, #1
 800481a:	464a      	mov	r2, r9
 800481c:	7013      	strb	r3, [r2, #0]
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 800481e:	4bdb      	ldr	r3, [pc, #876]	; (8004b8c <main+0x48c>)
  nvicEnableVector(12, STM32_ADC_ADC1_IRQ_PRIORITY);
 8004820:	2102      	movs	r1, #2
 8004822:	200c      	movs	r0, #12
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8004824:	6213      	str	r3, [r2, #32]
  adcp->config   = NULL;
 8004826:	6054      	str	r4, [r2, #4]
  adcp->samples  = NULL;
 8004828:	6094      	str	r4, [r2, #8]
  adcp->depth    = 0;
 800482a:	60d4      	str	r4, [r2, #12]
  adcp->grpp     = NULL;
 800482c:	6114      	str	r4, [r2, #16]
  adcp->thread   = NULL;
 800482e:	6154      	str	r4, [r2, #20]
  ADCD1.adc     = ADC1;
 8004830:	6195      	str	r5, [r2, #24]
  ADCD1.dmastp  = NULL;
 8004832:	61d4      	str	r4, [r2, #28]
  nvicEnableVector(12, STM32_ADC_ADC1_IRQ_PRIORITY);
 8004834:	f7fd fa84 	bl	8001d40 <nvicEnableVector>
  rccEnableADC1(true);
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	4bd5      	ldr	r3, [pc, #852]	; (8004b90 <main+0x490>)
 800483c:	0092      	lsls	r2, r2, #2
 800483e:	6999      	ldr	r1, [r3, #24]
 8004840:	430a      	orrs	r2, r1
 8004842:	619a      	str	r2, [r3, #24]
 8004844:	699b      	ldr	r3, [r3, #24]
  ADC->CCR = 0;
 8004846:	4bd3      	ldr	r3, [pc, #844]	; (8004b94 <main+0x494>)
 8004848:	601c      	str	r4, [r3, #0]
  adc_lld_vreg_on(ADC1);
 800484a:	f7fe f9a1 	bl	8002b90 <adc_lld_vreg_on.constprop.0>
  ADC1->CR |= ADC_CR_ADCAL;
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	68aa      	ldr	r2, [r5, #8]
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	4313      	orrs	r3, r2
 8004856:	60ab      	str	r3, [r5, #8]
  while (ADC1->CR & ADC_CR_ADCAL)
 8004858:	68ab      	ldr	r3, [r5, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	dbfc      	blt.n	8004858 <main+0x158>
  ADC1->CR = 0;
 800485e:	2400      	movs	r4, #0
  rccDisableADC1();
 8004860:	4bcb      	ldr	r3, [pc, #812]	; (8004b90 <main+0x490>)
  ADC1->CR = 0;
 8004862:	60ac      	str	r4, [r5, #8]
  rccDisableADC1();
 8004864:	4698      	mov	r8, r3
 8004866:	4acc      	ldr	r2, [pc, #816]	; (8004b98 <main+0x498>)
 8004868:	699b      	ldr	r3, [r3, #24]
  canp->state       = CAN_STOP;
 800486a:	4ecc      	ldr	r6, [pc, #816]	; (8004b9c <main+0x49c>)
 800486c:	4013      	ands	r3, r2
 800486e:	4642      	mov	r2, r8
 8004870:	6193      	str	r3, [r2, #24]
 8004872:	4643      	mov	r3, r8
 8004874:	699b      	ldr	r3, [r3, #24]
  tqp->next = (thread_t *)tqp;
 8004876:	0033      	movs	r3, r6
 8004878:	3308      	adds	r3, #8
 800487a:	60b3      	str	r3, [r6, #8]
  tqp->prev = (thread_t *)tqp;
 800487c:	60f3      	str	r3, [r6, #12]
  tqp->next = (thread_t *)tqp;
 800487e:	0033      	movs	r3, r6
 8004880:	2701      	movs	r7, #1
  CAND1.can = CAN1;
 8004882:	4dc7      	ldr	r5, [pc, #796]	; (8004ba0 <main+0x4a0>)
 8004884:	3310      	adds	r3, #16
  esp->flags = (eventflags_t)0;
 8004886:	61b4      	str	r4, [r6, #24]
 8004888:	6133      	str	r3, [r6, #16]
  tqp->prev = (thread_t *)tqp;
 800488a:	6173      	str	r3, [r6, #20]
 800488c:	6274      	str	r4, [r6, #36]	; 0x24
    nvicEnableVector(STM32_CAN1_UNIFIED_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800488e:	2103      	movs	r1, #3
 8004890:	201e      	movs	r0, #30
  esp->cb    = NULL;
 8004892:	61f4      	str	r4, [r6, #28]
  esp->param = NULL;
 8004894:	6234      	str	r4, [r6, #32]
  esp->cb    = NULL;
 8004896:	62b4      	str	r4, [r6, #40]	; 0x28
  esp->param = NULL;
 8004898:	62f4      	str	r4, [r6, #44]	; 0x2c
  esp->flags = (eventflags_t)0;
 800489a:	6334      	str	r4, [r6, #48]	; 0x30
  esp->cb    = NULL;
 800489c:	6374      	str	r4, [r6, #52]	; 0x34
  esp->param = NULL;
 800489e:	63b4      	str	r4, [r6, #56]	; 0x38
  CAND1.can = CAN1;
 80048a0:	63f5      	str	r5, [r6, #60]	; 0x3c
 80048a2:	7037      	strb	r7, [r6, #0]
  canp->config      = NULL;
 80048a4:	6074      	str	r4, [r6, #4]
    nvicEnableVector(STM32_CAN1_UNIFIED_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 80048a6:	f7fd fa4b 	bl	8001d40 <nvicEnableVector>
    rccEnableCAN1(true);
 80048aa:	4643      	mov	r3, r8
 80048ac:	69da      	ldr	r2, [r3, #28]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	049b      	lsls	r3, r3, #18
 80048b2:	4313      	orrs	r3, r2
 80048b4:	4642      	mov	r2, r8
 80048b6:	61d3      	str	r3, [r2, #28]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 80048b8:	2280      	movs	r2, #128	; 0x80
    rccEnableCAN1(true);
 80048ba:	4643      	mov	r3, r8
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 80048bc:	0092      	lsls	r2, r2, #2
    rccEnableCAN1(true);
 80048be:	69db      	ldr	r3, [r3, #28]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 80048c0:	58ab      	ldr	r3, [r5, r2]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 80048c2:	49b8      	ldr	r1, [pc, #736]	; (8004ba4 <main+0x4a4>)
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	433b      	orrs	r3, r7
 80048ca:	50ab      	str	r3, [r5, r2]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 80048cc:	58ab      	ldr	r3, [r5, r2]
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80048ce:	200f      	movs	r0, #15
 80048d0:	0c1b      	lsrs	r3, r3, #16
 80048d2:	041b      	lsls	r3, r3, #16
 80048d4:	430b      	orrs	r3, r1
 80048d6:	50ab      	str	r3, [r5, r2]
    canp->can->sFilterRegister[0].FR1 = 0;
 80048d8:	2390      	movs	r3, #144	; 0x90
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	50ec      	str	r4, [r5, r3]
    canp->can->sFilterRegister[0].FR2 = 0;
 80048de:	3304      	adds	r3, #4
 80048e0:	50ec      	str	r4, [r5, r3]
    canp->can->FM1R = 0;
 80048e2:	3b40      	subs	r3, #64	; 0x40
 80048e4:	50ec      	str	r4, [r5, r3]
    canp->can->FFA1R = 0;
 80048e6:	3310      	adds	r3, #16
 80048e8:	50ec      	str	r4, [r5, r3]
    canp->can->FS1R = 1;
 80048ea:	3b08      	subs	r3, #8
 80048ec:	50ef      	str	r7, [r5, r3]
    canp->can->FA1R = 1;
 80048ee:	3310      	adds	r3, #16
 80048f0:	50ef      	str	r7, [r5, r3]
  canp->can->FMR &= ~CAN_FMR_FINIT;
 80048f2:	58ab      	ldr	r3, [r5, r2]
  PWMD1.tim = STM32_TIM1;
 80048f4:	49ac      	ldr	r1, [pc, #688]	; (8004ba8 <main+0x4a8>)
 80048f6:	43bb      	bics	r3, r7
 80048f8:	50ab      	str	r3, [r5, r2]
    rccDisableCAN1();
 80048fa:	4643      	mov	r3, r8
 80048fc:	4aab      	ldr	r2, [pc, #684]	; (8004bac <main+0x4ac>)
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	4013      	ands	r3, r2
 8004902:	4642      	mov	r2, r8
 8004904:	61d3      	str	r3, [r2, #28]
 8004906:	4643      	mov	r3, r8
  dacp->state = DAC_STOP;
 8004908:	4aa9      	ldr	r2, [pc, #676]	; (8004bb0 <main+0x4b0>)
 800490a:	69db      	ldr	r3, [r3, #28]
  DACD1.params  = &dac1_ch1_params;
 800490c:	4ba9      	ldr	r3, [pc, #676]	; (8004bb4 <main+0x4b4>)
 800490e:	9205      	str	r2, [sp, #20]
 8004910:	61d3      	str	r3, [r2, #28]
 8004912:	4ba9      	ldr	r3, [pc, #676]	; (8004bb8 <main+0x4b8>)
 8004914:	7017      	strb	r7, [r2, #0]
 8004916:	469b      	mov	fp, r3
  dacp->config = NULL;
 8004918:	6114      	str	r4, [r2, #16]
  dacp->thread = NULL;
 800491a:	6154      	str	r4, [r2, #20]
#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
 800491c:	6194      	str	r4, [r2, #24]
  DACD1.dma = NULL;
 800491e:	6214      	str	r4, [r2, #32]
  DACD2.params  = &dac1_ch2_params;
 8004920:	465a      	mov	r2, fp
  dacp->state = DAC_STOP;
 8004922:	701f      	strb	r7, [r3, #0]
  dacp->config = NULL;
 8004924:	611c      	str	r4, [r3, #16]
  dacp->thread = NULL;
 8004926:	615c      	str	r4, [r3, #20]
 8004928:	619c      	str	r4, [r3, #24]
 800492a:	4ba4      	ldr	r3, [pc, #656]	; (8004bbc <main+0x4bc>)
  DACD2.dma = NULL;
 800492c:	6214      	str	r4, [r2, #32]
  DACD2.params  = &dac1_ch2_params;
 800492e:	61d3      	str	r3, [r2, #28]
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8004930:	2204      	movs	r2, #4
  pwmp->state    = PWM_STOP;
 8004932:	4ba3      	ldr	r3, [pc, #652]	; (8004bc0 <main+0x4c0>)
 8004934:	701f      	strb	r7, [r3, #0]
  pwmp->enabled  = 0;
 8004936:	60dc      	str	r4, [r3, #12]
 8004938:	741a      	strb	r2, [r3, #16]
  pwmp->config   = NULL;
 800493a:	605c      	str	r4, [r3, #4]
  PWMD1.tim = STM32_TIM1;
 800493c:	6199      	str	r1, [r3, #24]
  pwmp->state    = PWM_STOP;
 800493e:	4ba1      	ldr	r3, [pc, #644]	; (8004bc4 <main+0x4c4>)
 8004940:	2102      	movs	r1, #2
  PWMD3.channels = STM32_TIM3_CHANNELS;
 8004942:	741a      	strb	r2, [r3, #16]
  PWMD3.tim = STM32_TIM3;
 8004944:	4aa0      	ldr	r2, [pc, #640]	; (8004bc8 <main+0x4c8>)
 8004946:	701f      	strb	r7, [r3, #0]
  pwmp->enabled  = 0;
 8004948:	60dc      	str	r4, [r3, #12]
  pwmp->config   = NULL;
 800494a:	605c      	str	r4, [r3, #4]
 800494c:	619a      	str	r2, [r3, #24]
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
 800494e:	4b9f      	ldr	r3, [pc, #636]	; (8004bcc <main+0x4cc>)
  UARTD1.usart   = USART1;
 8004950:	4a9f      	ldr	r2, [pc, #636]	; (8004bd0 <main+0x4d0>)
  UARTD1.dmatx   = NULL;
 8004952:	61dc      	str	r4, [r3, #28]
  UARTD1.usart   = USART1;
 8004954:	609a      	str	r2, [r3, #8]
  UARTD1.clock   = STM32_USART1CLK;
 8004956:	4a9f      	ldr	r2, [pc, #636]	; (8004bd4 <main+0x4d4>)
 8004958:	801f      	strh	r7, [r3, #0]
 800495a:	60da      	str	r2, [r3, #12]
  UARTD1.dmarxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 800495c:	2208      	movs	r2, #8
  uartp->txstate    = UART_TX_IDLE;
  uartp->rxstate    = UART_RX_IDLE;
 800495e:	709c      	strb	r4, [r3, #2]
 8004960:	611a      	str	r2, [r3, #16]
  UARTD1.dmatxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8004962:	615a      	str	r2, [r3, #20]
  uartp->config     = NULL;
 8004964:	605c      	str	r4, [r3, #4]
  UARTD1.dmarx   = NULL;
 8004966:	619c      	str	r4, [r3, #24]
  ST_ENABLE_CLOCK();
 8004968:	4643      	mov	r3, r8
 800496a:	4642      	mov	r2, r8
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	433b      	orrs	r3, r7
 8004970:	61d3      	str	r3, [r2, #28]
 8004972:	4643      	mov	r3, r8
  ST_ENABLE_STOP();
 8004974:	4a98      	ldr	r2, [pc, #608]	; (8004bd8 <main+0x4d8>)
  ST_ENABLE_CLOCK();
 8004976:	69db      	ldr	r3, [r3, #28]
  ST_ENABLE_STOP();
 8004978:	6893      	ldr	r3, [r2, #8]
 800497a:	433b      	orrs	r3, r7
 800497c:	6093      	str	r3, [r2, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800497e:	2380      	movs	r3, #128	; 0x80
 8004980:	05db      	lsls	r3, r3, #23
 8004982:	469a      	mov	sl, r3
 8004984:	4652      	mov	r2, sl
 8004986:	4b95      	ldr	r3, [pc, #596]	; (8004bdc <main+0x4dc>)
 8004988:	6293      	str	r3, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800498a:	2301      	movs	r3, #1
 800498c:	425b      	negs	r3, r3
 800498e:	62d3      	str	r3, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8004990:	6194      	str	r4, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8004992:	6354      	str	r4, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8004994:	60d4      	str	r4, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 8004996:	6054      	str	r4, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8004998:	6157      	str	r7, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800499a:	6017      	str	r7, [r2, #0]
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 800499c:	f7fd f9d0 	bl	8001d40 <nvicEnableVector>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049a0:	4a8f      	ldr	r2, [pc, #572]	; (8004be0 <main+0x4e0>)
 80049a2:	4990      	ldr	r1, [pc, #576]	; (8004be4 <main+0x4e4>)
 80049a4:	6a13      	ldr	r3, [r2, #32]
  oip->rlist.prio = NOPRIO;
 80049a6:	4d90      	ldr	r5, [pc, #576]	; (8004be8 <main+0x4e8>)
 80049a8:	400b      	ands	r3, r1
 80049aa:	6213      	str	r3, [r2, #32]
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {

  vtlp->next  = (virtual_timer_t *)vtlp;
  vtlp->prev  = (virtual_timer_t *)vtlp;
  vtlp->delta = (sysinterval_t)-1;
 80049ac:	2301      	movs	r3, #1
 80049ae:	425b      	negs	r3, r3
 80049b0:	61ab      	str	r3, [r5, #24]
 80049b2:	4653      	mov	r3, sl
 80049b4:	60ac      	str	r4, [r5, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 80049b6:	61ec      	str	r4, [r5, #28]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  vtlp->next  = (virtual_timer_t *)vtlp;
 80049ba:	002a      	movs	r2, r5
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  ch.vtlist.laststamp = (systimestamp_t)chVTGetSystemTimeX();
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	2300      	movs	r3, #0
  vtlp->next  = (virtual_timer_t *)vtlp;
 80049c0:	3210      	adds	r2, #16
  ch.vtlist.laststamp = (systimestamp_t)chVTGetSystemTimeX();
 80049c2:	9301      	str	r3, [sp, #4]
  vtlp->next  = (virtual_timer_t *)vtlp;
 80049c4:	612a      	str	r2, [r5, #16]
  vtlp->prev  = (virtual_timer_t *)vtlp;
 80049c6:	616a      	str	r2, [r5, #20]
  ch.vtlist.laststamp = (systimestamp_t)chVTGetSystemTimeX();
 80049c8:	9a00      	ldr	r2, [sp, #0]
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	622a      	str	r2, [r5, #32]
 80049ce:	626b      	str	r3, [r5, #36]	; 0x24
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
 80049d0:	646b      	str	r3, [r5, #68]	; 0x44
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 80049d2:	002b      	movs	r3, r5
 80049d4:	3328      	adds	r3, #40	; 0x28
 80049d6:	60eb      	str	r3, [r5, #12]
  oip->rlist.current->wabase = oicp->mainthread_base;
 80049d8:	4b84      	ldr	r3, [pc, #528]	; (8004bec <main+0x4ec>)
 80049da:	2100      	movs	r1, #0
 80049dc:	63ab      	str	r3, [r5, #56]	; 0x38
  tp->wabase = tdp->wbase;
 80049de:	4b84      	ldr	r3, [pc, #528]	; (8004bf0 <main+0x4f0>)
 80049e0:	31a0      	adds	r1, #160	; 0xa0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80049e2:	0018      	movs	r0, r3
  tp->wabase = tdp->wbase;
 80049e4:	505b      	str	r3, [r3, r1]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80049e6:	306c      	adds	r0, #108	; 0x6c
 80049e8:	3904      	subs	r1, #4
 80049ea:	5058      	str	r0, [r3, r1]
 80049ec:	4981      	ldr	r1, [pc, #516]	; (8004bf4 <main+0x4f4>)
  tp->prio      = prio;
 80049ee:	2280      	movs	r2, #128	; 0x80
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80049f0:	67d9      	str	r1, [r3, #124]	; 0x7c
 80049f2:	2100      	movs	r1, #0
 80049f4:	5099      	str	r1, [r3, r2]
 80049f6:	218c      	movs	r1, #140	; 0x8c
  tp->prio      = prio;
 80049f8:	632a      	str	r2, [r5, #48]	; 0x30
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80049fa:	4a7f      	ldr	r2, [pc, #508]	; (8004bf8 <main+0x4f8>)
  oip->rlist.current->state = CH_STATE_CURRENT;
 80049fc:	87af      	strh	r7, [r5, #60]	; 0x3c
 80049fe:	505a      	str	r2, [r3, r1]
  tp->prio      = prio;
 8004a00:	2298      	movs	r2, #152	; 0x98
 8004a02:	509f      	str	r7, [r3, r2]
  tp->state = CH_STATE_READY;
 8004a04:	320c      	adds	r2, #12
 8004a06:	529c      	strh	r4, [r3, r2]
  tp->queue.next             = cp;
 8004a08:	3a14      	subs	r2, #20
 8004a0a:	509d      	str	r5, [r3, r2]
  tp->queue.prev             = cp->queue.prev;
 8004a0c:	3204      	adds	r2, #4
 8004a0e:	509d      	str	r5, [r3, r2]
  tp->queue.prev->queue.next = tp;
 8004a10:	3390      	adds	r3, #144	; 0x90
 8004a12:	602b      	str	r3, [r5, #0]
  cp->queue.prev             = tp;
 8004a14:	606b      	str	r3, [r5, #4]
 8004a16:	b662      	cpsie	i
    m_startupTimer.reset();
 8004a18:	4878      	ldr	r0, [pc, #480]	; (8004bfc <main+0x4fc>)
 8004a1a:	3018      	adds	r0, #24
 8004a1c:	f7fd fd10 	bl	8002440 <_ZN5Timer5resetEv>
  __ASM volatile ("cpsid i" : : : "memory");
 8004a20:	b672      	cpsid	i
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
 8004a22:	464b      	mov	r3, r9
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	1e5a      	subs	r2, r3, #1
 8004a28:	2a01      	cmp	r2, #1
 8004a2a:	d900      	bls.n	8004a2e <main+0x32e>
 8004a2c:	e220      	b.n	8004e70 <main+0x770>
  adcp->config = config;
 8004a2e:	464a      	mov	r2, r9
 8004a30:	9901      	ldr	r1, [sp, #4]
 8004a32:	6051      	str	r1, [r2, #4]
  if (adcp->state == ADC_STOP) {
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d100      	bne.n	8004a3a <main+0x33a>
 8004a38:	e1d7      	b.n	8004dea <main+0x6ea>
  adcp->state = ADC_READY;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	464a      	mov	r2, r9
 8004a3e:	7013      	strb	r3, [r2, #0]
  chDbgAssert((currcore->rlist.queue.next == (thread_t *)&currcore->rlist.queue) ||
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	42ab      	cmp	r3, r5
 8004a44:	d005      	beq.n	8004a52 <main+0x352>
 8004a46:	68ea      	ldr	r2, [r5, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	6892      	ldr	r2, [r2, #8]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d200      	bcs.n	8004a52 <main+0x352>
 8004a50:	e217      	b.n	8004e82 <main+0x782>
  __ASM volatile ("cpsie i" : : : "memory");
 8004a52:	b662      	cpsie	i
    {
        samplers[i].Init();
    }

    adcStart(&ADCD1, nullptr);
    chThdCreateStatic(waSamplingThread, sizeof(waSamplingThread), NORMALPRIO + 5, SamplingThread, nullptr);
 8004a54:	21d0      	movs	r1, #208	; 0xd0
    m_counterPeriod = config.period;
 8004a56:	2480      	movs	r4, #128	; 0x80
 8004a58:	2285      	movs	r2, #133	; 0x85
 8004a5a:	4b69      	ldr	r3, [pc, #420]	; (8004c00 <main+0x500>)
 8004a5c:	4869      	ldr	r0, [pc, #420]	; (8004c04 <main+0x504>)
 8004a5e:	0049      	lsls	r1, r1, #1
 8004a60:	f7fe fa1e 	bl	8002ea0 <chThdCreateStatic.constprop.0.isra.0>
    m_counterFrequency = config.frequency;
 8004a64:	4b68      	ldr	r3, [pc, #416]	; (8004c08 <main+0x508>)
 8004a66:	4a5b      	ldr	r2, [pc, #364]	; (8004bd4 <main+0x4d4>)
    pwmStart(m_driver, &config);
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	4968      	ldr	r1, [pc, #416]	; (8004c0c <main+0x50c>)
    m_counterPeriod = config.period;
 8004a6c:	00e4      	lsls	r4, r4, #3
    m_counterFrequency = config.frequency;
 8004a6e:	605a      	str	r2, [r3, #4]
    m_counterPeriod = config.period;
 8004a70:	811c      	strh	r4, [r3, #8]
    pwmStart(m_driver, &config);
 8004a72:	f7fd f98d 	bl	8001d90 <pwmStart>
        SetPumpCurrentTarget(ch, 0);
 8004a76:	2000      	movs	r0, #0
 8004a78:	f7fd ffb2 	bl	80029e0 <_Z20SetPumpCurrentTargetil.constprop.0>
    m_counterFrequency = config.frequency;
 8004a7c:	4f64      	ldr	r7, [pc, #400]	; (8004c10 <main+0x510>)
 8004a7e:	4b65      	ldr	r3, [pc, #404]	; (8004c14 <main+0x514>)
    pwmStart(m_driver, &config);
 8004a80:	6838      	ldr	r0, [r7, #0]
 8004a82:	4965      	ldr	r1, [pc, #404]	; (8004c18 <main+0x518>)
    m_counterFrequency = config.frequency;
 8004a84:	607b      	str	r3, [r7, #4]
    m_counterPeriod = config.period;
 8004a86:	813c      	strh	r4, [r7, #8]
    pwmStart(m_driver, &config);
 8004a88:	f7fd f982 	bl	8001d90 <pwmStart>
    heaterPwm.SetDuty(heaterControllers[0].pwm_ch, 0);
 8004a8c:	2358      	movs	r3, #88	; 0x58
 8004a8e:	4c63      	ldr	r4, [pc, #396]	; (8004c1c <main+0x51c>)
 8004a90:	0038      	movs	r0, r7
 8004a92:	5ce1      	ldrb	r1, [r4, r3]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f7fd fd9b 	bl	80025d0 <_ZN3Pwm7SetDutyEif>
    chThdCreateStatic(waHeaterThread, sizeof(waHeaterThread), NORMALPRIO + 1, HeaterThread, nullptr);
 8004a9a:	21d0      	movs	r1, #208	; 0xd0
 8004a9c:	2281      	movs	r2, #129	; 0x81
 8004a9e:	4b60      	ldr	r3, [pc, #384]	; (8004c20 <main+0x520>)
 8004aa0:	4860      	ldr	r0, [pc, #384]	; (8004c24 <main+0x524>)
 8004aa2:	0049      	lsls	r1, r1, #1
 8004aa4:	f7fe f9fc 	bl	8002ea0 <chThdCreateStatic.constprop.0.isra.0>
    }
}

void StartPumpControl()
{
    chThdCreateStatic(waPumpThread, sizeof(waPumpThread), NORMALPRIO + 4, PumpThread, nullptr);
 8004aa8:	21d0      	movs	r1, #208	; 0xd0
 8004aaa:	4b5f      	ldr	r3, [pc, #380]	; (8004c28 <main+0x528>)
 8004aac:	2284      	movs	r2, #132	; 0x84
 8004aae:	485f      	ldr	r0, [pc, #380]	; (8004c2c <main+0x52c>)
 8004ab0:	0049      	lsls	r1, r1, #1
 8004ab2:	f7fe f9f5 	bl	8002ea0 <chThdCreateStatic.constprop.0.isra.0>
    dacStart(m_driver, &config);
 8004ab6:	4b5e      	ldr	r3, [pc, #376]	; (8004c30 <main+0x530>)
 8004ab8:	681f      	ldr	r7, [r3, #0]
 8004aba:	4698      	mov	r8, r3
  osalDbgCheck(dacp != NULL);
 8004abc:	2f00      	cmp	r7, #0
 8004abe:	d100      	bne.n	8004ac2 <main+0x3c2>
 8004ac0:	e18f      	b.n	8004de2 <main+0x6e2>
  __ASM volatile ("cpsid i" : : : "memory");
 8004ac2:	b672      	cpsid	i
  osalDbgAssert((dacp->state == DAC_STOP) || (dacp->state == DAC_READY),
 8004ac4:	783b      	ldrb	r3, [r7, #0]
 8004ac6:	1e5a      	subs	r2, r3, #1
 8004ac8:	2a01      	cmp	r2, #1
 8004aca:	d900      	bls.n	8004ace <main+0x3ce>
 8004acc:	e185      	b.n	8004dda <main+0x6da>
  dacp->config = config;
 8004ace:	4a59      	ldr	r2, [pc, #356]	; (8004c34 <main+0x534>)
 8004ad0:	9200      	str	r2, [sp, #0]
 8004ad2:	613a      	str	r2, [r7, #16]
  if (dacp->state == DAC_STOP) {
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d100      	bne.n	8004ada <main+0x3da>
 8004ad8:	e0ba      	b.n	8004c50 <main+0x550>
  dacp->state = DAC_READY;
 8004ada:	2302      	movs	r3, #2
 8004adc:	703b      	strb	r3, [r7, #0]
 8004ade:	682b      	ldr	r3, [r5, #0]
 8004ae0:	42ab      	cmp	r3, r5
 8004ae2:	d005      	beq.n	8004af0 <main+0x3f0>
 8004ae4:	68ea      	ldr	r2, [r5, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	6892      	ldr	r2, [r2, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d200      	bcs.n	8004af0 <main+0x3f0>
 8004aee:	e1cc      	b.n	8004e8a <main+0x78a>
  __ASM volatile ("cpsie i" : : : "memory");
 8004af0:	b662      	cpsie	i
    m_voltageFloat[channel] = voltage;
 8004af2:	4642      	mov	r2, r8
 8004af4:	2300      	movs	r3, #0
    dacPutChannelX(m_driver, channel, voltage / VCC_VOLTS * ((1 << 12) - 1));
 8004af6:	6810      	ldr	r0, [r2, #0]
    m_voltageFloat[channel] = voltage;
 8004af8:	6053      	str	r3, [r2, #4]
  osalDbgAssert(dacp->state == DAC_READY, "invalid state");
 8004afa:	7803      	ldrb	r3, [r0, #0]
 8004afc:	4698      	mov	r8, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d003      	beq.n	8004b0a <main+0x40a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004b02:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004b04:	4b4c      	ldr	r3, [pc, #304]	; (8004c38 <main+0x538>)
 8004b06:	646b      	str	r3, [r5, #68]	; 0x44
  while (true) {
 8004b08:	e7fe      	b.n	8004b08 <main+0x408>
  dac_lld_put_channel(dacp, channel, sample);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	0011      	movs	r1, r2
 8004b0e:	f7fd fa7f 	bl	8002010 <dac_lld_put_channel>
    auxDac.Start(auxDacConfig);

    SetAuxDac(0, 0.0);
#endif

    chThdCreateStatic(waAuxOutThread, sizeof(waAuxOutThread), NORMALPRIO, AuxOutThread, nullptr);
 8004b12:	21d0      	movs	r1, #208	; 0xd0
 8004b14:	2280      	movs	r2, #128	; 0x80
 8004b16:	4b49      	ldr	r3, [pc, #292]	; (8004c3c <main+0x53c>)
 8004b18:	0049      	lsls	r1, r1, #1
 8004b1a:	4849      	ldr	r0, [pc, #292]	; (8004c40 <main+0x540>)
 8004b1c:	f7fe f9c0 	bl	8002ea0 <chThdCreateStatic.constprop.0.isra.0>
    configuration = GetConfiguration();
 8004b20:	f7fe fafe 	bl	8003120 <_Z16GetConfigurationv>
 8004b24:	4b47      	ldr	r3, [pc, #284]	; (8004c44 <main+0x544>)
 8004b26:	6018      	str	r0, [r3, #0]
 8004b28:	b672      	cpsid	i
  osalDbgAssert(canp->state == CAN_STOP, "invalid state");
 8004b2a:	7837      	ldrb	r7, [r6, #0]
 8004b2c:	2f01      	cmp	r7, #1
 8004b2e:	d003      	beq.n	8004b38 <main+0x438>
 8004b30:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004b32:	4b45      	ldr	r3, [pc, #276]	; (8004c48 <main+0x548>)
 8004b34:	646b      	str	r3, [r5, #68]	; 0x44
  while (true) {
 8004b36:	e7fe      	b.n	8004b36 <main+0x436>
  canp->state = CAN_STARTING;
 8004b38:	4643      	mov	r3, r8
    rccEnableCAN1(true);
 8004b3a:	2280      	movs	r2, #128	; 0x80
 8004b3c:	7033      	strb	r3, [r6, #0]
  canp->config = config;
 8004b3e:	4b43      	ldr	r3, [pc, #268]	; (8004c4c <main+0x54c>)
 8004b40:	0492      	lsls	r2, r2, #18
 8004b42:	6073      	str	r3, [r6, #4]
 8004b44:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <main+0x490>)
 8004b46:	69d9      	ldr	r1, [r3, #28]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	61da      	str	r2, [r3, #28]
 8004b4c:	69db      	ldr	r3, [r3, #28]
  canp->can->MCR = CAN_MCR_INRQ;
 8004b4e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004b50:	601f      	str	r7, [r3, #0]
    chSchGoSleepS(newstate);
 8004b52:	2308      	movs	r3, #8
 8004b54:	4698      	mov	r8, r3
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 8004b56:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	423a      	tst	r2, r7
 8004b5c:	d000      	beq.n	8004b60 <main+0x460>
 8004b5e:	e0aa      	b.n	8004cb6 <main+0x5b6>
    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8004b60:	0039      	movs	r1, r7
 8004b62:	68ea      	ldr	r2, [r5, #12]
 8004b64:	a807      	add	r0, sp, #28
 8004b66:	f7fd ff93 	bl	8002a90 <chVTDoSetI.constprop.0>
    chSchGoSleepS(newstate);
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	f7fe f8a0 	bl	8002cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8004b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ef      	beq.n	8004b56 <main+0x456>
      chVTDoResetI(&vt);
 8004b76:	a807      	add	r0, sp, #28
 8004b78:	f7fd f83a 	bl	8001bf0 <chVTDoResetI>
  return tp->u.rdymsg;
 8004b7c:	e7eb      	b.n	8004b56 <main+0x456>
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	40020000 	.word	0x40020000
 8004b84:	20000a08 	.word	0x20000a08
 8004b88:	40012400 	.word	0x40012400
 8004b8c:	0000258a 	.word	0x0000258a
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40012708 	.word	0x40012708
 8004b98:	fffffdff 	.word	0xfffffdff
 8004b9c:	20000a2c 	.word	0x20000a2c
 8004ba0:	40006400 	.word	0x40006400
 8004ba4:	00000e01 	.word	0x00000e01
 8004ba8:	40012c00 	.word	0x40012c00
 8004bac:	fdffffff 	.word	0xfdffffff
 8004bb0:	20000a6c 	.word	0x20000a6c
 8004bb4:	080063b4 	.word	0x080063b4
 8004bb8:	20000a90 	.word	0x20000a90
 8004bbc:	080063d0 	.word	0x080063d0
 8004bc0:	20000ab4 	.word	0x20000ab4
 8004bc4:	20000ad0 	.word	0x20000ad0
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	20000aec 	.word	0x20000aec
 8004bd0:	40013800 	.word	0x40013800
 8004bd4:	02dc6c00 	.word	0x02dc6c00
 8004bd8:	40015800 	.word	0x40015800
 8004bdc:	000012bf 	.word	0x000012bf
 8004be0:	e000ed00 	.word	0xe000ed00
 8004be4:	ff00ffff 	.word	0xff00ffff
 8004be8:	200017f8 	.word	0x200017f8
 8004bec:	20000600 	.word	0x20000600
 8004bf0:	20001840 	.word	0x20001840
 8004bf4:	08001c91 	.word	0x08001c91
 8004bf8:	080019c9 	.word	0x080019c9
 8004bfc:	20001728 	.word	0x20001728
 8004c00:	08003861 	.word	0x08003861
 8004c04:	20001440 	.word	0x20001440
 8004c08:	2000170c 	.word	0x2000170c
 8004c0c:	08006060 	.word	0x08006060
 8004c10:	200017d8 	.word	0x200017d8
 8004c14:	00061a80 	.word	0x00061a80
 8004c18:	08006098 	.word	0x08006098
 8004c1c:	20001930 	.word	0x20001930
 8004c20:	08003a41 	.word	0x08003a41
 8004c24:	200012a0 	.word	0x200012a0
 8004c28:	08003581 	.word	0x08003581
 8004c2c:	20000b18 	.word	0x20000b18
 8004c30:	20001600 	.word	0x20001600
 8004c34:	20000a00 	.word	0x20000a00
 8004c38:	080062c0 	.word	0x080062c0
 8004c3c:	08003651 	.word	0x08003651
 8004c40:	20001100 	.word	0x20001100
 8004c44:	20000cb8 	.word	0x20000cb8
 8004c48:	080062fc 	.word	0x080062fc
 8004c4c:	08006018 	.word	0x08006018
    if (&DACD1 == dacp) {
 8004c50:	9905      	ldr	r1, [sp, #20]
 8004c52:	428f      	cmp	r7, r1
 8004c54:	d026      	beq.n	8004ca4 <main+0x5a4>
    dacchannel_t channel = 0;
 8004c56:	2100      	movs	r1, #0
    if (&DACD2 == dacp) {
 8004c58:	455f      	cmp	r7, fp
 8004c5a:	d109      	bne.n	8004c70 <main+0x570>
      rccEnableDAC1(true);
 8004c5c:	498d      	ldr	r1, [pc, #564]	; (8004e94 <main+0x794>)
 8004c5e:	69c8      	ldr	r0, [r1, #28]
 8004c60:	4684      	mov	ip, r0
 8004c62:	2080      	movs	r0, #128	; 0x80
 8004c64:	4662      	mov	r2, ip
 8004c66:	0580      	lsls	r0, r0, #22
 8004c68:	4310      	orrs	r0, r2
 8004c6a:	61c8      	str	r0, [r1, #28]
 8004c6c:	69c9      	ldr	r1, [r1, #28]
      channel = 1;
 8004c6e:	0019      	movs	r1, r3
      cr = dacp->params->dac->CR;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	4699      	mov	r9, r3
      cr &= dacp->params->regmask;
 8004c74:	464a      	mov	r2, r9
      cr = dacp->params->dac->CR;
 8004c76:	681b      	ldr	r3, [r3, #0]
      cr &= dacp->params->regmask;
 8004c78:	68d0      	ldr	r0, [r2, #12]
      cr = dacp->params->dac->CR;
 8004c7a:	469c      	mov	ip, r3
 8004c7c:	681b      	ldr	r3, [r3, #0]
      cr &= dacp->params->regmask;
 8004c7e:	4018      	ands	r0, r3
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 8004c80:	9b00      	ldr	r3, [sp, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	469a      	mov	sl, r3
 8004c86:	2301      	movs	r3, #1
 8004c88:	4652      	mov	r2, sl
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	464a      	mov	r2, r9
 8004c8e:	6892      	ldr	r2, [r2, #8]
 8004c90:	4093      	lsls	r3, r2
      dacp->params->dac->CR = cr;
 8004c92:	4662      	mov	r2, ip
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 8004c94:	4303      	orrs	r3, r0
      dacp->params->dac->CR = cr;
 8004c96:	6013      	str	r3, [r2, #0]
      dac_lld_put_channel(dacp, channel, dacp->config->init);
 8004c98:	9b00      	ldr	r3, [sp, #0]
 8004c9a:	0038      	movs	r0, r7
 8004c9c:	881a      	ldrh	r2, [r3, #0]
 8004c9e:	f7fd f9b7 	bl	8002010 <dac_lld_put_channel>
}
 8004ca2:	e71a      	b.n	8004ada <main+0x3da>
      rccEnableDAC1(true);
 8004ca4:	2180      	movs	r1, #128	; 0x80
 8004ca6:	4b7b      	ldr	r3, [pc, #492]	; (8004e94 <main+0x794>)
 8004ca8:	0589      	lsls	r1, r1, #22
 8004caa:	69d8      	ldr	r0, [r3, #28]
 8004cac:	4301      	orrs	r1, r0
 8004cae:	61d9      	str	r1, [r3, #28]
 8004cb0:	69db      	ldr	r3, [r3, #28]
    dacchannel_t channel = 0;
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	e7dc      	b.n	8004c70 <main+0x570>
  canp->can->BTR = canp->config->btr;
 8004cb6:	6872      	ldr	r2, [r6, #4]
 8004cb8:	6851      	ldr	r1, [r2, #4]
  canp->can->MCR = canp->config->mcr;
 8004cba:	6812      	ldr	r2, [r2, #0]
  canp->can->BTR = canp->config->btr;
 8004cbc:	61d9      	str	r1, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 8004cbe:	601a      	str	r2, [r3, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 8004cc0:	4a75      	ldr	r2, [pc, #468]	; (8004e98 <main+0x798>)
 8004cc2:	615a      	str	r2, [r3, #20]
  canp->state = CAN_READY;
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	7033      	strb	r3, [r6, #0]
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	42ab      	cmp	r3, r5
 8004ccc:	d004      	beq.n	8004cd8 <main+0x5d8>
 8004cce:	68ea      	ldr	r2, [r5, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	6892      	ldr	r2, [r2, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d331      	bcc.n	8004d3c <main+0x63c>
  __ASM volatile ("cpsie i" : : : "memory");
 8004cd8:	b662      	cpsie	i
    chThdCreateStatic(waCanTxThread, sizeof(waCanTxThread), NORMALPRIO, CanTxThread, nullptr);
 8004cda:	21d0      	movs	r1, #208	; 0xd0
 8004cdc:	2280      	movs	r2, #128	; 0x80
 8004cde:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <main+0x79c>)
 8004ce0:	486f      	ldr	r0, [pc, #444]	; (8004ea0 <main+0x7a0>)
 8004ce2:	0049      	lsls	r1, r1, #1
 8004ce4:	f7fe f8dc 	bl	8002ea0 <chThdCreateStatic.constprop.0.isra.0>
    chThdCreateStatic(waCanRxThread, sizeof(waCanRxThread), NORMALPRIO - 4, CanRxThread, nullptr);
 8004ce8:	21a8      	movs	r1, #168	; 0xa8
 8004cea:	4b6e      	ldr	r3, [pc, #440]	; (8004ea4 <main+0x7a4>)
 8004cec:	227c      	movs	r2, #124	; 0x7c
 8004cee:	486e      	ldr	r0, [pc, #440]	; (8004ea8 <main+0x7a8>)
 8004cf0:	0089      	lsls	r1, r1, #2
 8004cf2:	f7fe f8d5 	bl	8002ea0 <chThdCreateStatic.constprop.0.isra.0>
 8004cf6:	4b6d      	ldr	r3, [pc, #436]	; (8004eac <main+0x7ac>)

            // Blink out the error code
            for (int i = 0; i < 2 * static_cast<int>(fault); i++)
            {
                // Blue is blinking
                palTogglePad(LED_BLUE_PORT, LED_BLUE_PIN);
 8004cf8:	46a0      	mov	r8, r4
 8004cfa:	469b      	mov	fp, r3
 8004cfc:	4b6c      	ldr	r3, [pc, #432]	; (8004eb0 <main+0x7b0>)
 8004cfe:	9300      	str	r3, [sp, #0]
            palClearPad(LED_GREEN_PORT, LED_GREEN_PIN);
 8004d00:	2340      	movs	r3, #64	; 0x40
 8004d02:	469a      	mov	sl, r3
                palTogglePad(LED_BLUE_PORT, LED_BLUE_PIN);
 8004d04:	3b20      	subs	r3, #32
 8004d06:	4699      	mov	r9, r3
}

Fault GetCurrentFault(int ch)
{
    return currentFault[ch];
 8004d08:	465b      	mov	r3, fp
 8004d0a:	781e      	ldrb	r6, [r3, #0]
        if (fault == Fault::None)
 8004d0c:	2e00      	cmp	r6, #0
 8004d0e:	d11f      	bne.n	8004d50 <main+0x650>
            palClearPad(LED_BLUE_PORT, LED_BLUE_PIN);
 8004d10:	464a      	mov	r2, r9
            palTogglePad(LED_GREEN_PORT, LED_GREEN_PIN);
 8004d12:	4651      	mov	r1, sl
            palClearPad(LED_BLUE_PORT, LED_BLUE_PIN);
 8004d14:	4b67      	ldr	r3, [pc, #412]	; (8004eb4 <main+0x7b4>)
 8004d16:	835a      	strh	r2, [r3, #26]
            palTogglePad(LED_GREEN_PORT, LED_GREEN_PIN);
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	404a      	eors	r2, r1
 8004d1c:	615a      	str	r2, [r3, #20]
            chThdSleepMilliseconds(GetHeaterController(0).IsRunningClosedLoop() ? 700 : 50);
 8004d1e:	4643      	mov	r3, r8
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	9a00      	ldr	r2, [sp, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10c      	bne.n	8004d44 <main+0x644>
 8004d2a:	4643      	mov	r3, r8
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d00c      	beq.n	8004d4c <main+0x64c>
 8004d32:	20fa      	movs	r0, #250	; 0xfa
 8004d34:	0040      	lsls	r0, r0, #1
 8004d36:	f7fd ffdb 	bl	8002cf0 <chThdSleep>
 8004d3a:	e7e5      	b.n	8004d08 <main+0x608>
  __ASM volatile ("cpsid i" : : : "memory");
 8004d3c:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004d3e:	4b5e      	ldr	r3, [pc, #376]	; (8004eb8 <main+0x7b8>)
 8004d40:	646b      	str	r3, [r5, #68]	; 0x44
  while (true) {
 8004d42:	e7fe      	b.n	8004d42 <main+0x642>
 8004d44:	4640      	mov	r0, r8
 8004d46:	4798      	blx	r3
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d0f2      	beq.n	8004d32 <main+0x632>
 8004d4c:	485b      	ldr	r0, [pc, #364]	; (8004ebc <main+0x7bc>)
 8004d4e:	e7f2      	b.n	8004d36 <main+0x636>
            palClearPad(LED_GREEN_PORT, LED_GREEN_PIN);
 8004d50:	4653      	mov	r3, sl
            for (int i = 0; i < 2 * static_cast<int>(fault); i++)
 8004d52:	2700      	movs	r7, #0
            palClearPad(LED_GREEN_PORT, LED_GREEN_PIN);
 8004d54:	4c57      	ldr	r4, [pc, #348]	; (8004eb4 <main+0x7b4>)
            for (int i = 0; i < 2 * static_cast<int>(fault); i++)
 8004d56:	0076      	lsls	r6, r6, #1
            palClearPad(LED_GREEN_PORT, LED_GREEN_PIN);
 8004d58:	8363      	strh	r3, [r4, #26]
                palTogglePad(LED_BLUE_PORT, LED_BLUE_PIN);
 8004d5a:	464a      	mov	r2, r9
 8004d5c:	6963      	ldr	r3, [r4, #20]
 8004d5e:	4053      	eors	r3, r2
 8004d60:	6163      	str	r3, [r4, #20]
 8004d62:	b672      	cpsid	i
    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8004d64:	4956      	ldr	r1, [pc, #344]	; (8004ec0 <main+0x7c0>)
 8004d66:	68ea      	ldr	r2, [r5, #12]
 8004d68:	a807      	add	r0, sp, #28
 8004d6a:	f7fd fe91 	bl	8002a90 <chVTDoSetI.constprop.0>
    chSchGoSleepS(newstate);
 8004d6e:	2008      	movs	r0, #8
 8004d70:	f7fd ff9e 	bl	8002cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8004d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <main+0x680>
      chVTDoResetI(&vt);
 8004d7a:	a807      	add	r0, sp, #28
 8004d7c:	f7fc ff38 	bl	8001bf0 <chVTDoResetI>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	42ab      	cmp	r3, r5
 8004d84:	d004      	beq.n	8004d90 <main+0x690>
 8004d86:	68ea      	ldr	r2, [r5, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	6892      	ldr	r2, [r2, #8]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d31c      	bcc.n	8004dca <main+0x6ca>
  __ASM volatile ("cpsie i" : : : "memory");
 8004d90:	b662      	cpsie	i
            for (int i = 0; i < 2 * static_cast<int>(fault); i++)
 8004d92:	3701      	adds	r7, #1
 8004d94:	42be      	cmp	r6, r7
 8004d96:	dce0      	bgt.n	8004d5a <main+0x65a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004d98:	b672      	cpsid	i
    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8004d9a:	494a      	ldr	r1, [pc, #296]	; (8004ec4 <main+0x7c4>)
 8004d9c:	68ea      	ldr	r2, [r5, #12]
 8004d9e:	a807      	add	r0, sp, #28
 8004da0:	f7fd fe76 	bl	8002a90 <chVTDoSetI.constprop.0>
    chSchGoSleepS(newstate);
 8004da4:	2008      	movs	r0, #8
 8004da6:	f7fd ff83 	bl	8002cb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8004daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <main+0x6b6>
      chVTDoResetI(&vt);
 8004db0:	a807      	add	r0, sp, #28
 8004db2:	f7fc ff1d 	bl	8001bf0 <chVTDoResetI>
 8004db6:	682b      	ldr	r3, [r5, #0]
 8004db8:	42ab      	cmp	r3, r5
 8004dba:	d004      	beq.n	8004dc6 <main+0x6c6>
 8004dbc:	68ea      	ldr	r2, [r5, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	6892      	ldr	r2, [r2, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d305      	bcc.n	8004dd2 <main+0x6d2>
  __ASM volatile ("cpsie i" : : : "memory");
 8004dc6:	b662      	cpsie	i
}
 8004dc8:	e79e      	b.n	8004d08 <main+0x608>
  __ASM volatile ("cpsid i" : : : "memory");
 8004dca:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004dcc:	4b3e      	ldr	r3, [pc, #248]	; (8004ec8 <main+0x7c8>)
 8004dce:	646b      	str	r3, [r5, #68]	; 0x44
  while (true) {
 8004dd0:	e7fe      	b.n	8004dd0 <main+0x6d0>
 8004dd2:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004dd4:	4b3c      	ldr	r3, [pc, #240]	; (8004ec8 <main+0x7c8>)
 8004dd6:	646b      	str	r3, [r5, #68]	; 0x44
  while (true) {
 8004dd8:	e7fe      	b.n	8004dd8 <main+0x6d8>
 8004dda:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004ddc:	4b3b      	ldr	r3, [pc, #236]	; (8004ecc <main+0x7cc>)
 8004dde:	646b      	str	r3, [r5, #68]	; 0x44
  while (true) {
 8004de0:	e7fe      	b.n	8004de0 <main+0x6e0>
 8004de2:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004de4:	4b39      	ldr	r3, [pc, #228]	; (8004ecc <main+0x7cc>)
 8004de6:	646b      	str	r3, [r5, #68]	; 0x44
  while (true) {
 8004de8:	e7fe      	b.n	8004de8 <main+0x6e8>
    if ((dma.allocated_mask & mask) == 0U) {
 8004dea:	9a03      	ldr	r2, [sp, #12]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	421a      	tst	r2, r3
 8004df0:	d006      	beq.n	8004e00 <main+0x700>
      adcp->dmastp = dmaStreamAllocI(STM32_ADC_ADC1_DMA_STREAM,
 8004df2:	464b      	mov	r3, r9
 8004df4:	9a01      	ldr	r2, [sp, #4]
 8004df6:	61da      	str	r2, [r3, #28]
 8004df8:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004dfa:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <main+0x7d0>)
 8004dfc:	646b      	str	r3, [r5, #68]	; 0x44
  while (true) {
 8004dfe:	e7fe      	b.n	8004dfe <main+0x6fe>
      dma.streams[i].func  = func;
 8004e00:	9803      	ldr	r0, [sp, #12]
 8004e02:	4934      	ldr	r1, [pc, #208]	; (8004ed4 <main+0x7d4>)
      dma.allocated_mask  |= mask;
 8004e04:	431a      	orrs	r2, r3
      dma.streams[i].func  = func;
 8004e06:	6081      	str	r1, [r0, #8]
      dma.streams[i].param = param;
 8004e08:	0001      	movs	r1, r0
 8004e0a:	4648      	mov	r0, r9
      dma.allocated_mask  |= mask;
 8004e0c:	600a      	str	r2, [r1, #0]
        rccEnableDMA1(true);
 8004e0e:	4642      	mov	r2, r8
      dma.streams[i].param = param;
 8004e10:	60c8      	str	r0, [r1, #12]
        rccEnableDMA1(true);
 8004e12:	4640      	mov	r0, r8
 8004e14:	6952      	ldr	r2, [r2, #20]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	6142      	str	r2, [r0, #20]
 8004e1a:	4642      	mov	r2, r8
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8004e1c:	684c      	ldr	r4, [r1, #4]
        rccEnableDMA1(true);
 8004e1e:	6952      	ldr	r2, [r2, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8004e20:	421c      	tst	r4, r3
 8004e22:	d029      	beq.n	8004e78 <main+0x778>
        dma.isr_mask |= mask;
 8004e24:	2701      	movs	r7, #1
      dmaStreamDisable(dmastp);
 8004e26:	210f      	movs	r1, #15
        dma.isr_mask |= mask;
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	433c      	orrs	r4, r7
 8004e2c:	605c      	str	r4, [r3, #4]
      dmaStreamDisable(dmastp);
 8004e2e:	4b2a      	ldr	r3, [pc, #168]	; (8004ed8 <main+0x7d8>)
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8004e30:	2000      	movs	r0, #0
      dmaStreamDisable(dmastp);
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	438a      	bics	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	4a28      	ldr	r2, [pc, #160]	; (8004edc <main+0x7dc>)
 8004e3a:	3901      	subs	r1, #1
 8004e3c:	6051      	str	r1, [r2, #4]
 8004e3e:	464a      	mov	r2, r9
 8004e40:	9904      	ldr	r1, [sp, #16]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8004e42:	6018      	str	r0, [r3, #0]
 8004e44:	61d1      	str	r1, [r2, #28]
      rccEnableADC1(true);
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	4a12      	ldr	r2, [pc, #72]	; (8004e94 <main+0x794>)
 8004e4a:	0089      	lsls	r1, r1, #2
 8004e4c:	6994      	ldr	r4, [r2, #24]
 8004e4e:	4321      	orrs	r1, r4
 8004e50:	6191      	str	r1, [r2, #24]
 8004e52:	6992      	ldr	r2, [r2, #24]
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8004e54:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <main+0x7e0>)
 8004e56:	609a      	str	r2, [r3, #8]
      adcp->adc->CFGR2 = STM32_ADC_ADC1_CKMODE;
 8004e58:	464b      	mov	r3, r9
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	6118      	str	r0, [r3, #16]
    adc_lld_vreg_on(ADC1);
 8004e5e:	f7fd fe97 	bl	8002b90 <adc_lld_vreg_on.constprop.0>
    adcp->adc->CR = ADC_CR_ADEN;
 8004e62:	464b      	mov	r3, r9
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	609f      	str	r7, [r3, #8]
    while (!(adcp->adc->ISR & ADC_ISR_ADRDY))
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	423a      	tst	r2, r7
 8004e6c:	d0fc      	beq.n	8004e68 <main+0x768>
 8004e6e:	e5e4      	b.n	8004a3a <main+0x33a>
 8004e70:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004e72:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <main+0x7e4>)
 8004e74:	646b      	str	r3, [r5, #68]	; 0x44
  while (true) {
 8004e76:	e7fe      	b.n	8004e76 <main+0x776>
          nvicEnableVector(dmastp->vector, priority);
 8004e78:	2102      	movs	r1, #2
 8004e7a:	2009      	movs	r0, #9
 8004e7c:	f7fc ff60 	bl	8001d40 <nvicEnableVector>
 8004e80:	e7d0      	b.n	8004e24 <main+0x724>
 8004e82:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004e84:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <main+0x7e8>)
 8004e86:	646b      	str	r3, [r5, #68]	; 0x44
  while (true) {
 8004e88:	e7fe      	b.n	8004e88 <main+0x788>
 8004e8a:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 8004e8c:	4b17      	ldr	r3, [pc, #92]	; (8004eec <main+0x7ec>)
 8004e8e:	646b      	str	r3, [r5, #68]	; 0x44
  while (true) {
 8004e90:	e7fe      	b.n	8004e90 <main+0x790>
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	40021000 	.word	0x40021000
 8004e98:	0001875b 	.word	0x0001875b
 8004e9c:	08003ae1 	.word	0x08003ae1
 8004ea0:	20000f60 	.word	0x20000f60
 8004ea4:	080031b1 	.word	0x080031b1
 8004ea8:	20000cc0 	.word	0x20000cc0
 8004eac:	20000b14 	.word	0x20000b14
 8004eb0:	08002411 	.word	0x08002411
 8004eb4:	48000400 	.word	0x48000400
 8004eb8:	080062f0 	.word	0x080062f0
 8004ebc:	00001b58 	.word	0x00001b58
 8004ec0:	00000bb8 	.word	0x00000bb8
 8004ec4:	00004e20 	.word	0x00004e20
 8004ec8:	08006244 	.word	0x08006244
 8004ecc:	08006320 	.word	0x08006320
 8004ed0:	080061c4 	.word	0x080061c4
 8004ed4:	08002bf1 	.word	0x08002bf1
 8004ed8:	40020008 	.word	0x40020008
 8004edc:	40020000 	.word	0x40020000
 8004ee0:	40012440 	.word	0x40012440
 8004ee4:	080062e4 	.word	0x080062e4
 8004ee8:	080062b4 	.word	0x080062b4
 8004eec:	08006308 	.word	0x08006308

08004ef0 <HardFault_Handler_C>:
	UsageFault = 6,
} FaultType;

#define bkpt() __asm volatile("BKPT #0\n")

extern "C" void HardFault_Handler_C(void* sp) {
 8004ef0:	b500      	push	{lr}
 8004ef2:	b089      	sub	sp, #36	; 0x24
 8004ef4:	0001      	movs	r1, r0
	//Copy to local variables (not pointers) to allow GDB "i loc" to directly show the info
	//Get thread context. Contains main registers including PC and LR
	struct port_extctx ctx;
	memcpy(&ctx, sp, sizeof(struct port_extctx));
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	4668      	mov	r0, sp
 8004efa:	f000 f8f1 	bl	80050e0 <memcpy>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004efe:	f3ef 8305 	mrs	r3, IPSR
	(void)isFaultOnStacking;
	(void)isFaultAddressValid;
#endif

	//Cause debugger to stop. Ignored if no debugger is attached
	bkpt();
 8004f02:	be00      	bkpt	0x0000
  __ASM volatile ("dsb 0xF":::"memory");
 8004f04:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f08:	4b03      	ldr	r3, [pc, #12]	; (8004f18 <HardFault_Handler_C+0x28>)
 8004f0a:	4a04      	ldr	r2, [pc, #16]	; (8004f1c <HardFault_Handler_C+0x2c>)
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004f12:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8004f14:	e7fd      	b.n	8004f12 <HardFault_Handler_C+0x22>
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	e000ed00 	.word	0xe000ed00
 8004f1c:	05fa0004 	.word	0x05fa0004

08004f20 <UsageFault_Handler_C>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	f7ff ffe5 	bl	8004ef0 <HardFault_Handler_C>
 8004f26:	46c0      	nop			; (mov r8, r8)
	...

08004f30 <MemManage_Handler_C>:
 8004f30:	b510      	push	{r4, lr}
 8004f32:	f7ff ffdd 	bl	8004ef0 <HardFault_Handler_C>
 8004f36:	46c0      	nop			; (mov r8, r8)
	...

08004f40 <_sub_I_65535_0.0>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	2400      	movs	r4, #0
 8004f44:	2500      	movs	r5, #0
 8004f46:	2134      	movs	r1, #52	; 0x34
 8004f48:	4b26      	ldr	r3, [pc, #152]	; (8004fe4 <_sub_I_65535_0.0+0xa4>)
 8004f4a:	4a27      	ldr	r2, [pc, #156]	; (8004fe8 <_sub_I_65535_0.0+0xa8>)
 8004f4c:	605c      	str	r4, [r3, #4]
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	811c      	strh	r4, [r3, #8]
 8004f52:	4a26      	ldr	r2, [pc, #152]	; (8004fec <_sub_I_65535_0.0+0xac>)
 8004f54:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <_sub_I_65535_0.0+0xb0>)
 8004f56:	4e27      	ldr	r6, [pc, #156]	; (8004ff4 <_sub_I_65535_0.0+0xb4>)
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	4a27      	ldr	r2, [pc, #156]	; (8004ff8 <_sub_I_65535_0.0+0xb8>)
 8004f5c:	545d      	strb	r5, [r3, r1]
 8004f5e:	609a      	str	r2, [r3, #8]
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	4a26      	ldr	r2, [pc, #152]	; (8004ffc <_sub_I_65535_0.0+0xbc>)
 8004f64:	392f      	subs	r1, #47	; 0x2f
 8004f66:	611a      	str	r2, [r3, #16]
 8004f68:	6399      	str	r1, [r3, #56]	; 0x38
 8004f6a:	4a25      	ldr	r2, [pc, #148]	; (8005000 <_sub_I_65535_0.0+0xc0>)
 8004f6c:	3137      	adds	r1, #55	; 0x37
 8004f6e:	3608      	adds	r6, #8
 8004f70:	601e      	str	r6, [r3, #0]
 8004f72:	63d9      	str	r1, [r3, #60]	; 0x3c
 8004f74:	2658      	movs	r6, #88	; 0x58
 8004f76:	21f0      	movs	r1, #240	; 0xf0
 8004f78:	2000      	movs	r0, #0
 8004f7a:	615a      	str	r2, [r3, #20]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	0609      	lsls	r1, r1, #24
 8004f80:	559d      	strb	r5, [r3, r6]
 8004f82:	4e20      	ldr	r6, [pc, #128]	; (8005004 <_sub_I_65535_0.0+0xc4>)
 8004f84:	6418      	str	r0, [r3, #64]	; 0x40
 8004f86:	6459      	str	r1, [r3, #68]	; 0x44
 8004f88:	6498      	str	r0, [r3, #72]	; 0x48
 8004f8a:	64d9      	str	r1, [r3, #76]	; 0x4c
 8004f8c:	6518      	str	r0, [r3, #80]	; 0x50
 8004f8e:	6559      	str	r1, [r3, #84]	; 0x54
 8004f90:	619a      	str	r2, [r3, #24]
 8004f92:	61da      	str	r2, [r3, #28]
 8004f94:	621a      	str	r2, [r3, #32]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24
 8004f98:	629c      	str	r4, [r3, #40]	; 0x28
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f9e:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <_sub_I_65535_0.0+0xc8>)
 8004fa0:	3608      	adds	r6, #8
 8004fa2:	601e      	str	r6, [r3, #0]
 8004fa4:	605a      	str	r2, [r3, #4]
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	6198      	str	r0, [r3, #24]
 8004faa:	61d9      	str	r1, [r3, #28]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	611a      	str	r2, [r3, #16]
 8004fb0:	615a      	str	r2, [r3, #20]
 8004fb2:	4916      	ldr	r1, [pc, #88]	; (800500c <_sub_I_65535_0.0+0xcc>)
 8004fb4:	4b16      	ldr	r3, [pc, #88]	; (8005010 <_sub_I_65535_0.0+0xd0>)
 8004fb6:	6019      	str	r1, [r3, #0]
 8004fb8:	4b16      	ldr	r3, [pc, #88]	; (8005014 <_sub_I_65535_0.0+0xd4>)
 8004fba:	4917      	ldr	r1, [pc, #92]	; (8005018 <_sub_I_65535_0.0+0xd8>)
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	6019      	str	r1, [r3, #0]
 8004fc0:	4916      	ldr	r1, [pc, #88]	; (800501c <_sub_I_65535_0.0+0xdc>)
 8004fc2:	615a      	str	r2, [r3, #20]
 8004fc4:	6059      	str	r1, [r3, #4]
 8004fc6:	4916      	ldr	r1, [pc, #88]	; (8005020 <_sub_I_65535_0.0+0xe0>)
 8004fc8:	619a      	str	r2, [r3, #24]
 8004fca:	6099      	str	r1, [r3, #8]
 8004fcc:	4915      	ldr	r1, [pc, #84]	; (8005024 <_sub_I_65535_0.0+0xe4>)
 8004fce:	4a16      	ldr	r2, [pc, #88]	; (8005028 <_sub_I_65535_0.0+0xe8>)
 8004fd0:	6119      	str	r1, [r3, #16]
 8004fd2:	4b16      	ldr	r3, [pc, #88]	; (800502c <_sub_I_65535_0.0+0xec>)
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	605c      	str	r4, [r3, #4]
 8004fd8:	4a15      	ldr	r2, [pc, #84]	; (8005030 <_sub_I_65535_0.0+0xf0>)
 8004fda:	811c      	strh	r4, [r3, #8]
 8004fdc:	4b15      	ldr	r3, [pc, #84]	; (8005034 <_sub_I_65535_0.0+0xf4>)
 8004fde:	711d      	strb	r5, [r3, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
 8004fe4:	200017d8 	.word	0x200017d8
 8004fe8:	20000ab4 	.word	0x20000ab4
 8004fec:	3d4ccccd 	.word	0x3d4ccccd
 8004ff0:	20001930 	.word	0x20001930
 8004ff4:	0800612c 	.word	0x0800612c
 8004ff8:	3e99999a 	.word	0x3e99999a
 8004ffc:	3c23d70a 	.word	0x3c23d70a
 8005000:	40400000 	.word	0x40400000
 8005004:	08006148 	.word	0x08006148
 8005008:	20001728 	.word	0x20001728
 800500c:	20000a6c 	.word	0x20000a6c
 8005010:	20001600 	.word	0x20001600
 8005014:	200015e4 	.word	0x200015e4
 8005018:	3b03126f 	.word	0x3b03126f
 800501c:	42480000 	.word	0x42480000
 8005020:	461c4000 	.word	0x461c4000
 8005024:	41200000 	.word	0x41200000
 8005028:	20000ad0 	.word	0x20000ad0
 800502c:	2000170c 	.word	0x2000170c
 8005030:	deadbe01 	.word	0xdeadbe01
 8005034:	2000160c 	.word	0x2000160c

08005038 <memset>:
 8005038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503a:	0005      	movs	r5, r0
 800503c:	0783      	lsls	r3, r0, #30
 800503e:	d049      	beq.n	80050d4 <memset+0x9c>
 8005040:	1e54      	subs	r4, r2, #1
 8005042:	2a00      	cmp	r2, #0
 8005044:	d045      	beq.n	80050d2 <memset+0x9a>
 8005046:	0003      	movs	r3, r0
 8005048:	2603      	movs	r6, #3
 800504a:	b2ca      	uxtb	r2, r1
 800504c:	e002      	b.n	8005054 <memset+0x1c>
 800504e:	3501      	adds	r5, #1
 8005050:	3c01      	subs	r4, #1
 8005052:	d33e      	bcc.n	80050d2 <memset+0x9a>
 8005054:	3301      	adds	r3, #1
 8005056:	702a      	strb	r2, [r5, #0]
 8005058:	4233      	tst	r3, r6
 800505a:	d1f8      	bne.n	800504e <memset+0x16>
 800505c:	2c03      	cmp	r4, #3
 800505e:	d930      	bls.n	80050c2 <memset+0x8a>
 8005060:	25ff      	movs	r5, #255	; 0xff
 8005062:	400d      	ands	r5, r1
 8005064:	022a      	lsls	r2, r5, #8
 8005066:	432a      	orrs	r2, r5
 8005068:	0415      	lsls	r5, r2, #16
 800506a:	4315      	orrs	r5, r2
 800506c:	2c0f      	cmp	r4, #15
 800506e:	d934      	bls.n	80050da <memset+0xa2>
 8005070:	0027      	movs	r7, r4
 8005072:	3f10      	subs	r7, #16
 8005074:	093f      	lsrs	r7, r7, #4
 8005076:	013e      	lsls	r6, r7, #4
 8005078:	46b4      	mov	ip, r6
 800507a:	001e      	movs	r6, r3
 800507c:	001a      	movs	r2, r3
 800507e:	3610      	adds	r6, #16
 8005080:	4466      	add	r6, ip
 8005082:	6015      	str	r5, [r2, #0]
 8005084:	6055      	str	r5, [r2, #4]
 8005086:	6095      	str	r5, [r2, #8]
 8005088:	60d5      	str	r5, [r2, #12]
 800508a:	3210      	adds	r2, #16
 800508c:	42b2      	cmp	r2, r6
 800508e:	d1f8      	bne.n	8005082 <memset+0x4a>
 8005090:	3701      	adds	r7, #1
 8005092:	013f      	lsls	r7, r7, #4
 8005094:	19db      	adds	r3, r3, r7
 8005096:	270f      	movs	r7, #15
 8005098:	220c      	movs	r2, #12
 800509a:	4027      	ands	r7, r4
 800509c:	4022      	ands	r2, r4
 800509e:	003c      	movs	r4, r7
 80050a0:	2a00      	cmp	r2, #0
 80050a2:	d00e      	beq.n	80050c2 <memset+0x8a>
 80050a4:	1f3e      	subs	r6, r7, #4
 80050a6:	08b6      	lsrs	r6, r6, #2
 80050a8:	00b4      	lsls	r4, r6, #2
 80050aa:	46a4      	mov	ip, r4
 80050ac:	001a      	movs	r2, r3
 80050ae:	1d1c      	adds	r4, r3, #4
 80050b0:	4464      	add	r4, ip
 80050b2:	c220      	stmia	r2!, {r5}
 80050b4:	42a2      	cmp	r2, r4
 80050b6:	d1fc      	bne.n	80050b2 <memset+0x7a>
 80050b8:	2403      	movs	r4, #3
 80050ba:	3601      	adds	r6, #1
 80050bc:	00b6      	lsls	r6, r6, #2
 80050be:	199b      	adds	r3, r3, r6
 80050c0:	403c      	ands	r4, r7
 80050c2:	2c00      	cmp	r4, #0
 80050c4:	d005      	beq.n	80050d2 <memset+0x9a>
 80050c6:	b2c9      	uxtb	r1, r1
 80050c8:	191c      	adds	r4, r3, r4
 80050ca:	7019      	strb	r1, [r3, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	429c      	cmp	r4, r3
 80050d0:	d1fb      	bne.n	80050ca <memset+0x92>
 80050d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d4:	0003      	movs	r3, r0
 80050d6:	0014      	movs	r4, r2
 80050d8:	e7c0      	b.n	800505c <memset+0x24>
 80050da:	0027      	movs	r7, r4
 80050dc:	e7e2      	b.n	80050a4 <memset+0x6c>
 80050de:	46c0      	nop			; (mov r8, r8)

080050e0 <memcpy>:
 80050e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e2:	46c6      	mov	lr, r8
 80050e4:	b500      	push	{lr}
 80050e6:	2a0f      	cmp	r2, #15
 80050e8:	d941      	bls.n	800516e <memcpy+0x8e>
 80050ea:	2403      	movs	r4, #3
 80050ec:	0003      	movs	r3, r0
 80050ee:	0026      	movs	r6, r4
 80050f0:	430b      	orrs	r3, r1
 80050f2:	401e      	ands	r6, r3
 80050f4:	421c      	tst	r4, r3
 80050f6:	d13f      	bne.n	8005178 <memcpy+0x98>
 80050f8:	0015      	movs	r5, r2
 80050fa:	3d10      	subs	r5, #16
 80050fc:	092d      	lsrs	r5, r5, #4
 80050fe:	46a8      	mov	r8, r5
 8005100:	012d      	lsls	r5, r5, #4
 8005102:	46ac      	mov	ip, r5
 8005104:	0003      	movs	r3, r0
 8005106:	000c      	movs	r4, r1
 8005108:	4484      	add	ip, r0
 800510a:	6827      	ldr	r7, [r4, #0]
 800510c:	001d      	movs	r5, r3
 800510e:	601f      	str	r7, [r3, #0]
 8005110:	6867      	ldr	r7, [r4, #4]
 8005112:	605f      	str	r7, [r3, #4]
 8005114:	68a7      	ldr	r7, [r4, #8]
 8005116:	609f      	str	r7, [r3, #8]
 8005118:	68e7      	ldr	r7, [r4, #12]
 800511a:	3410      	adds	r4, #16
 800511c:	60df      	str	r7, [r3, #12]
 800511e:	3310      	adds	r3, #16
 8005120:	4565      	cmp	r5, ip
 8005122:	d1f2      	bne.n	800510a <memcpy+0x2a>
 8005124:	4645      	mov	r5, r8
 8005126:	230f      	movs	r3, #15
 8005128:	240c      	movs	r4, #12
 800512a:	3501      	adds	r5, #1
 800512c:	012d      	lsls	r5, r5, #4
 800512e:	1949      	adds	r1, r1, r5
 8005130:	4013      	ands	r3, r2
 8005132:	1945      	adds	r5, r0, r5
 8005134:	4214      	tst	r4, r2
 8005136:	d022      	beq.n	800517e <memcpy+0x9e>
 8005138:	598c      	ldr	r4, [r1, r6]
 800513a:	51ac      	str	r4, [r5, r6]
 800513c:	3604      	adds	r6, #4
 800513e:	1b9c      	subs	r4, r3, r6
 8005140:	2c03      	cmp	r4, #3
 8005142:	d8f9      	bhi.n	8005138 <memcpy+0x58>
 8005144:	3b04      	subs	r3, #4
 8005146:	089b      	lsrs	r3, r3, #2
 8005148:	3301      	adds	r3, #1
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	18ed      	adds	r5, r5, r3
 800514e:	18c9      	adds	r1, r1, r3
 8005150:	2303      	movs	r3, #3
 8005152:	401a      	ands	r2, r3
 8005154:	1e56      	subs	r6, r2, #1
 8005156:	2a00      	cmp	r2, #0
 8005158:	d006      	beq.n	8005168 <memcpy+0x88>
 800515a:	2300      	movs	r3, #0
 800515c:	5ccc      	ldrb	r4, [r1, r3]
 800515e:	001a      	movs	r2, r3
 8005160:	54ec      	strb	r4, [r5, r3]
 8005162:	3301      	adds	r3, #1
 8005164:	4296      	cmp	r6, r2
 8005166:	d1f9      	bne.n	800515c <memcpy+0x7c>
 8005168:	bc80      	pop	{r7}
 800516a:	46b8      	mov	r8, r7
 800516c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800516e:	0005      	movs	r5, r0
 8005170:	1e56      	subs	r6, r2, #1
 8005172:	2a00      	cmp	r2, #0
 8005174:	d1f1      	bne.n	800515a <memcpy+0x7a>
 8005176:	e7f7      	b.n	8005168 <memcpy+0x88>
 8005178:	0005      	movs	r5, r0
 800517a:	1e56      	subs	r6, r2, #1
 800517c:	e7ed      	b.n	800515a <memcpy+0x7a>
 800517e:	001a      	movs	r2, r3
 8005180:	e7f6      	b.n	8005170 <memcpy+0x90>
 8005182:	46c0      	nop			; (mov r8, r8)

08005184 <__aeabi_f2uiz>:
 8005184:	219e      	movs	r1, #158	; 0x9e
 8005186:	b510      	push	{r4, lr}
 8005188:	05c9      	lsls	r1, r1, #23
 800518a:	1c04      	adds	r4, r0, #0
 800518c:	f7fc fd06 	bl	8001b9c <__aeabi_fcmpge>
 8005190:	2800      	cmp	r0, #0
 8005192:	d103      	bne.n	800519c <__aeabi_f2uiz+0x18>
 8005194:	1c20      	adds	r0, r4, #0
 8005196:	f000 fe65 	bl	8005e64 <__aeabi_f2iz>
 800519a:	bd10      	pop	{r4, pc}
 800519c:	219e      	movs	r1, #158	; 0x9e
 800519e:	1c20      	adds	r0, r4, #0
 80051a0:	05c9      	lsls	r1, r1, #23
 80051a2:	f000 fcbf 	bl	8005b24 <__aeabi_fsub>
 80051a6:	f000 fe5d 	bl	8005e64 <__aeabi_f2iz>
 80051aa:	2380      	movs	r3, #128	; 0x80
 80051ac:	061b      	lsls	r3, r3, #24
 80051ae:	469c      	mov	ip, r3
 80051b0:	4460      	add	r0, ip
 80051b2:	e7f2      	b.n	800519a <__aeabi_f2uiz+0x16>

080051b4 <__aeabi_fadd>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	4647      	mov	r7, r8
 80051b8:	46ce      	mov	lr, r9
 80051ba:	024a      	lsls	r2, r1, #9
 80051bc:	0243      	lsls	r3, r0, #9
 80051be:	0045      	lsls	r5, r0, #1
 80051c0:	0fc4      	lsrs	r4, r0, #31
 80051c2:	0a50      	lsrs	r0, r2, #9
 80051c4:	4680      	mov	r8, r0
 80051c6:	0048      	lsls	r0, r1, #1
 80051c8:	0a5b      	lsrs	r3, r3, #9
 80051ca:	0e00      	lsrs	r0, r0, #24
 80051cc:	0992      	lsrs	r2, r2, #6
 80051ce:	4694      	mov	ip, r2
 80051d0:	b580      	push	{r7, lr}
 80051d2:	001e      	movs	r6, r3
 80051d4:	4681      	mov	r9, r0
 80051d6:	0002      	movs	r2, r0
 80051d8:	0e2d      	lsrs	r5, r5, #24
 80051da:	00df      	lsls	r7, r3, #3
 80051dc:	0fc9      	lsrs	r1, r1, #31
 80051de:	428c      	cmp	r4, r1
 80051e0:	d024      	beq.n	800522c <__aeabi_fadd+0x78>
 80051e2:	1a28      	subs	r0, r5, r0
 80051e4:	2800      	cmp	r0, #0
 80051e6:	dd0e      	ble.n	8005206 <__aeabi_fadd+0x52>
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	d13e      	bne.n	800526a <__aeabi_fadd+0xb6>
 80051ec:	4662      	mov	r2, ip
 80051ee:	2a00      	cmp	r2, #0
 80051f0:	d100      	bne.n	80051f4 <__aeabi_fadd+0x40>
 80051f2:	e0fd      	b.n	80053f0 <__aeabi_fadd+0x23c>
 80051f4:	1e42      	subs	r2, r0, #1
 80051f6:	2801      	cmp	r0, #1
 80051f8:	d100      	bne.n	80051fc <__aeabi_fadd+0x48>
 80051fa:	e137      	b.n	800546c <__aeabi_fadd+0x2b8>
 80051fc:	28ff      	cmp	r0, #255	; 0xff
 80051fe:	d100      	bne.n	8005202 <__aeabi_fadd+0x4e>
 8005200:	e0a9      	b.n	8005356 <__aeabi_fadd+0x1a2>
 8005202:	0010      	movs	r0, r2
 8005204:	e039      	b.n	800527a <__aeabi_fadd+0xc6>
 8005206:	2800      	cmp	r0, #0
 8005208:	d063      	beq.n	80052d2 <__aeabi_fadd+0x11e>
 800520a:	464b      	mov	r3, r9
 800520c:	1b52      	subs	r2, r2, r5
 800520e:	2d00      	cmp	r5, #0
 8005210:	d000      	beq.n	8005214 <__aeabi_fadd+0x60>
 8005212:	e0e0      	b.n	80053d6 <__aeabi_fadd+0x222>
 8005214:	2f00      	cmp	r7, #0
 8005216:	d100      	bne.n	800521a <__aeabi_fadd+0x66>
 8005218:	e0ce      	b.n	80053b8 <__aeabi_fadd+0x204>
 800521a:	1e53      	subs	r3, r2, #1
 800521c:	2a01      	cmp	r2, #1
 800521e:	d100      	bne.n	8005222 <__aeabi_fadd+0x6e>
 8005220:	e155      	b.n	80054ce <__aeabi_fadd+0x31a>
 8005222:	2aff      	cmp	r2, #255	; 0xff
 8005224:	d100      	bne.n	8005228 <__aeabi_fadd+0x74>
 8005226:	e094      	b.n	8005352 <__aeabi_fadd+0x19e>
 8005228:	001a      	movs	r2, r3
 800522a:	e0d9      	b.n	80053e0 <__aeabi_fadd+0x22c>
 800522c:	1a2a      	subs	r2, r5, r0
 800522e:	2a00      	cmp	r2, #0
 8005230:	dc00      	bgt.n	8005234 <__aeabi_fadd+0x80>
 8005232:	e099      	b.n	8005368 <__aeabi_fadd+0x1b4>
 8005234:	2800      	cmp	r0, #0
 8005236:	d062      	beq.n	80052fe <__aeabi_fadd+0x14a>
 8005238:	2dff      	cmp	r5, #255	; 0xff
 800523a:	d100      	bne.n	800523e <__aeabi_fadd+0x8a>
 800523c:	e08b      	b.n	8005356 <__aeabi_fadd+0x1a2>
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	4661      	mov	r1, ip
 8005242:	04db      	lsls	r3, r3, #19
 8005244:	4319      	orrs	r1, r3
 8005246:	468c      	mov	ip, r1
 8005248:	2a1b      	cmp	r2, #27
 800524a:	dc00      	bgt.n	800524e <__aeabi_fadd+0x9a>
 800524c:	e0d2      	b.n	80053f4 <__aeabi_fadd+0x240>
 800524e:	2301      	movs	r3, #1
 8005250:	19db      	adds	r3, r3, r7
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	d56a      	bpl.n	800532c <__aeabi_fadd+0x178>
 8005256:	3501      	adds	r5, #1
 8005258:	2dff      	cmp	r5, #255	; 0xff
 800525a:	d05b      	beq.n	8005314 <__aeabi_fadd+0x160>
 800525c:	2201      	movs	r2, #1
 800525e:	49a3      	ldr	r1, [pc, #652]	; (80054ec <__aeabi_fadd+0x338>)
 8005260:	401a      	ands	r2, r3
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	400b      	ands	r3, r1
 8005266:	4313      	orrs	r3, r2
 8005268:	e01c      	b.n	80052a4 <__aeabi_fadd+0xf0>
 800526a:	2dff      	cmp	r5, #255	; 0xff
 800526c:	d100      	bne.n	8005270 <__aeabi_fadd+0xbc>
 800526e:	e072      	b.n	8005356 <__aeabi_fadd+0x1a2>
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	4662      	mov	r2, ip
 8005274:	04db      	lsls	r3, r3, #19
 8005276:	431a      	orrs	r2, r3
 8005278:	4694      	mov	ip, r2
 800527a:	281b      	cmp	r0, #27
 800527c:	dc00      	bgt.n	8005280 <__aeabi_fadd+0xcc>
 800527e:	e090      	b.n	80053a2 <__aeabi_fadd+0x1ee>
 8005280:	2301      	movs	r3, #1
 8005282:	1afb      	subs	r3, r7, r3
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	d551      	bpl.n	800532c <__aeabi_fadd+0x178>
 8005288:	019b      	lsls	r3, r3, #6
 800528a:	099e      	lsrs	r6, r3, #6
 800528c:	0030      	movs	r0, r6
 800528e:	f7fc fc8f 	bl	8001bb0 <__clzsi2>
 8005292:	0033      	movs	r3, r6
 8005294:	3805      	subs	r0, #5
 8005296:	4083      	lsls	r3, r0
 8005298:	4285      	cmp	r5, r0
 800529a:	dc00      	bgt.n	800529e <__aeabi_fadd+0xea>
 800529c:	e075      	b.n	800538a <__aeabi_fadd+0x1d6>
 800529e:	4a94      	ldr	r2, [pc, #592]	; (80054f0 <__aeabi_fadd+0x33c>)
 80052a0:	1a2d      	subs	r5, r5, r0
 80052a2:	4013      	ands	r3, r2
 80052a4:	075a      	lsls	r2, r3, #29
 80052a6:	d004      	beq.n	80052b2 <__aeabi_fadd+0xfe>
 80052a8:	220f      	movs	r2, #15
 80052aa:	401a      	ands	r2, r3
 80052ac:	2a04      	cmp	r2, #4
 80052ae:	d000      	beq.n	80052b2 <__aeabi_fadd+0xfe>
 80052b0:	3304      	adds	r3, #4
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	d53c      	bpl.n	8005330 <__aeabi_fadd+0x17c>
 80052b6:	1c68      	adds	r0, r5, #1
 80052b8:	2dfe      	cmp	r5, #254	; 0xfe
 80052ba:	d02b      	beq.n	8005314 <__aeabi_fadd+0x160>
 80052bc:	019b      	lsls	r3, r3, #6
 80052be:	0a5e      	lsrs	r6, r3, #9
 80052c0:	b2c0      	uxtb	r0, r0
 80052c2:	05c0      	lsls	r0, r0, #23
 80052c4:	4330      	orrs	r0, r6
 80052c6:	07e4      	lsls	r4, r4, #31
 80052c8:	4320      	orrs	r0, r4
 80052ca:	bcc0      	pop	{r6, r7}
 80052cc:	46b9      	mov	r9, r7
 80052ce:	46b0      	mov	r8, r6
 80052d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d2:	20fe      	movs	r0, #254	; 0xfe
 80052d4:	1c6a      	adds	r2, r5, #1
 80052d6:	4210      	tst	r0, r2
 80052d8:	d172      	bne.n	80053c0 <__aeabi_fadd+0x20c>
 80052da:	2d00      	cmp	r5, #0
 80052dc:	d000      	beq.n	80052e0 <__aeabi_fadd+0x12c>
 80052de:	e0ae      	b.n	800543e <__aeabi_fadd+0x28a>
 80052e0:	2f00      	cmp	r7, #0
 80052e2:	d100      	bne.n	80052e6 <__aeabi_fadd+0x132>
 80052e4:	e0ec      	b.n	80054c0 <__aeabi_fadd+0x30c>
 80052e6:	4663      	mov	r3, ip
 80052e8:	2000      	movs	r0, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0e9      	beq.n	80052c2 <__aeabi_fadd+0x10e>
 80052ee:	1afb      	subs	r3, r7, r3
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	d400      	bmi.n	80052f6 <__aeabi_fadd+0x142>
 80052f4:	e0f3      	b.n	80054de <__aeabi_fadd+0x32a>
 80052f6:	4663      	mov	r3, ip
 80052f8:	000c      	movs	r4, r1
 80052fa:	1bdb      	subs	r3, r3, r7
 80052fc:	e7d2      	b.n	80052a4 <__aeabi_fadd+0xf0>
 80052fe:	4661      	mov	r1, ip
 8005300:	2900      	cmp	r1, #0
 8005302:	d05b      	beq.n	80053bc <__aeabi_fadd+0x208>
 8005304:	1e51      	subs	r1, r2, #1
 8005306:	2a01      	cmp	r2, #1
 8005308:	d100      	bne.n	800530c <__aeabi_fadd+0x158>
 800530a:	e0a7      	b.n	800545c <__aeabi_fadd+0x2a8>
 800530c:	2aff      	cmp	r2, #255	; 0xff
 800530e:	d022      	beq.n	8005356 <__aeabi_fadd+0x1a2>
 8005310:	000a      	movs	r2, r1
 8005312:	e799      	b.n	8005248 <__aeabi_fadd+0x94>
 8005314:	20ff      	movs	r0, #255	; 0xff
 8005316:	2600      	movs	r6, #0
 8005318:	e7d3      	b.n	80052c2 <__aeabi_fadd+0x10e>
 800531a:	21fe      	movs	r1, #254	; 0xfe
 800531c:	1c6a      	adds	r2, r5, #1
 800531e:	4211      	tst	r1, r2
 8005320:	d073      	beq.n	800540a <__aeabi_fadd+0x256>
 8005322:	2aff      	cmp	r2, #255	; 0xff
 8005324:	d0f6      	beq.n	8005314 <__aeabi_fadd+0x160>
 8005326:	0015      	movs	r5, r2
 8005328:	4467      	add	r7, ip
 800532a:	087b      	lsrs	r3, r7, #1
 800532c:	075a      	lsls	r2, r3, #29
 800532e:	d1bb      	bne.n	80052a8 <__aeabi_fadd+0xf4>
 8005330:	08db      	lsrs	r3, r3, #3
 8005332:	2dff      	cmp	r5, #255	; 0xff
 8005334:	d00f      	beq.n	8005356 <__aeabi_fadd+0x1a2>
 8005336:	025b      	lsls	r3, r3, #9
 8005338:	0a5e      	lsrs	r6, r3, #9
 800533a:	b2e8      	uxtb	r0, r5
 800533c:	e7c1      	b.n	80052c2 <__aeabi_fadd+0x10e>
 800533e:	4662      	mov	r2, ip
 8005340:	2a00      	cmp	r2, #0
 8005342:	d008      	beq.n	8005356 <__aeabi_fadd+0x1a2>
 8005344:	2280      	movs	r2, #128	; 0x80
 8005346:	03d2      	lsls	r2, r2, #15
 8005348:	4213      	tst	r3, r2
 800534a:	d004      	beq.n	8005356 <__aeabi_fadd+0x1a2>
 800534c:	4640      	mov	r0, r8
 800534e:	4210      	tst	r0, r2
 8005350:	d101      	bne.n	8005356 <__aeabi_fadd+0x1a2>
 8005352:	000c      	movs	r4, r1
 8005354:	4643      	mov	r3, r8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0dc      	beq.n	8005314 <__aeabi_fadd+0x160>
 800535a:	2680      	movs	r6, #128	; 0x80
 800535c:	03f6      	lsls	r6, r6, #15
 800535e:	431e      	orrs	r6, r3
 8005360:	0276      	lsls	r6, r6, #9
 8005362:	20ff      	movs	r0, #255	; 0xff
 8005364:	0a76      	lsrs	r6, r6, #9
 8005366:	e7ac      	b.n	80052c2 <__aeabi_fadd+0x10e>
 8005368:	2a00      	cmp	r2, #0
 800536a:	d0d6      	beq.n	800531a <__aeabi_fadd+0x166>
 800536c:	1b42      	subs	r2, r0, r5
 800536e:	2d00      	cmp	r5, #0
 8005370:	d05c      	beq.n	800542c <__aeabi_fadd+0x278>
 8005372:	28ff      	cmp	r0, #255	; 0xff
 8005374:	d0ee      	beq.n	8005354 <__aeabi_fadd+0x1a0>
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	04db      	lsls	r3, r3, #19
 800537a:	431f      	orrs	r7, r3
 800537c:	2a1b      	cmp	r2, #27
 800537e:	dc00      	bgt.n	8005382 <__aeabi_fadd+0x1ce>
 8005380:	e082      	b.n	8005488 <__aeabi_fadd+0x2d4>
 8005382:	2301      	movs	r3, #1
 8005384:	464d      	mov	r5, r9
 8005386:	4463      	add	r3, ip
 8005388:	e763      	b.n	8005252 <__aeabi_fadd+0x9e>
 800538a:	2220      	movs	r2, #32
 800538c:	1b40      	subs	r0, r0, r5
 800538e:	3001      	adds	r0, #1
 8005390:	1a12      	subs	r2, r2, r0
 8005392:	0019      	movs	r1, r3
 8005394:	4093      	lsls	r3, r2
 8005396:	40c1      	lsrs	r1, r0
 8005398:	1e5a      	subs	r2, r3, #1
 800539a:	4193      	sbcs	r3, r2
 800539c:	2500      	movs	r5, #0
 800539e:	430b      	orrs	r3, r1
 80053a0:	e780      	b.n	80052a4 <__aeabi_fadd+0xf0>
 80053a2:	2320      	movs	r3, #32
 80053a4:	4661      	mov	r1, ip
 80053a6:	1a1b      	subs	r3, r3, r0
 80053a8:	4099      	lsls	r1, r3
 80053aa:	4662      	mov	r2, ip
 80053ac:	000b      	movs	r3, r1
 80053ae:	40c2      	lsrs	r2, r0
 80053b0:	1e59      	subs	r1, r3, #1
 80053b2:	418b      	sbcs	r3, r1
 80053b4:	4313      	orrs	r3, r2
 80053b6:	e764      	b.n	8005282 <__aeabi_fadd+0xce>
 80053b8:	000c      	movs	r4, r1
 80053ba:	4643      	mov	r3, r8
 80053bc:	0015      	movs	r5, r2
 80053be:	e7b8      	b.n	8005332 <__aeabi_fadd+0x17e>
 80053c0:	4663      	mov	r3, ip
 80053c2:	1afe      	subs	r6, r7, r3
 80053c4:	0173      	lsls	r3, r6, #5
 80053c6:	d445      	bmi.n	8005454 <__aeabi_fadd+0x2a0>
 80053c8:	2e00      	cmp	r6, #0
 80053ca:	d000      	beq.n	80053ce <__aeabi_fadd+0x21a>
 80053cc:	e75e      	b.n	800528c <__aeabi_fadd+0xd8>
 80053ce:	2400      	movs	r4, #0
 80053d0:	2000      	movs	r0, #0
 80053d2:	2600      	movs	r6, #0
 80053d4:	e775      	b.n	80052c2 <__aeabi_fadd+0x10e>
 80053d6:	2bff      	cmp	r3, #255	; 0xff
 80053d8:	d0bb      	beq.n	8005352 <__aeabi_fadd+0x19e>
 80053da:	2380      	movs	r3, #128	; 0x80
 80053dc:	04db      	lsls	r3, r3, #19
 80053de:	431f      	orrs	r7, r3
 80053e0:	2a1b      	cmp	r2, #27
 80053e2:	dd47      	ble.n	8005474 <__aeabi_fadd+0x2c0>
 80053e4:	2301      	movs	r3, #1
 80053e6:	4662      	mov	r2, ip
 80053e8:	000c      	movs	r4, r1
 80053ea:	464d      	mov	r5, r9
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	e749      	b.n	8005284 <__aeabi_fadd+0xd0>
 80053f0:	0005      	movs	r5, r0
 80053f2:	e79e      	b.n	8005332 <__aeabi_fadd+0x17e>
 80053f4:	4661      	mov	r1, ip
 80053f6:	2320      	movs	r3, #32
 80053f8:	40d1      	lsrs	r1, r2
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	4662      	mov	r2, ip
 80053fe:	409a      	lsls	r2, r3
 8005400:	0013      	movs	r3, r2
 8005402:	1e5a      	subs	r2, r3, #1
 8005404:	4193      	sbcs	r3, r2
 8005406:	430b      	orrs	r3, r1
 8005408:	e722      	b.n	8005250 <__aeabi_fadd+0x9c>
 800540a:	2d00      	cmp	r5, #0
 800540c:	d146      	bne.n	800549c <__aeabi_fadd+0x2e8>
 800540e:	2f00      	cmp	r7, #0
 8005410:	d062      	beq.n	80054d8 <__aeabi_fadd+0x324>
 8005412:	4663      	mov	r3, ip
 8005414:	2000      	movs	r0, #0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d100      	bne.n	800541c <__aeabi_fadd+0x268>
 800541a:	e752      	b.n	80052c2 <__aeabi_fadd+0x10e>
 800541c:	003b      	movs	r3, r7
 800541e:	4463      	add	r3, ip
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	d583      	bpl.n	800532c <__aeabi_fadd+0x178>
 8005424:	4a32      	ldr	r2, [pc, #200]	; (80054f0 <__aeabi_fadd+0x33c>)
 8005426:	3501      	adds	r5, #1
 8005428:	4013      	ands	r3, r2
 800542a:	e77f      	b.n	800532c <__aeabi_fadd+0x178>
 800542c:	2f00      	cmp	r7, #0
 800542e:	d0c4      	beq.n	80053ba <__aeabi_fadd+0x206>
 8005430:	1e53      	subs	r3, r2, #1
 8005432:	2a01      	cmp	r2, #1
 8005434:	d012      	beq.n	800545c <__aeabi_fadd+0x2a8>
 8005436:	2aff      	cmp	r2, #255	; 0xff
 8005438:	d08c      	beq.n	8005354 <__aeabi_fadd+0x1a0>
 800543a:	001a      	movs	r2, r3
 800543c:	e79e      	b.n	800537c <__aeabi_fadd+0x1c8>
 800543e:	2f00      	cmp	r7, #0
 8005440:	d000      	beq.n	8005444 <__aeabi_fadd+0x290>
 8005442:	e77c      	b.n	800533e <__aeabi_fadd+0x18a>
 8005444:	4663      	mov	r3, ip
 8005446:	2b00      	cmp	r3, #0
 8005448:	d183      	bne.n	8005352 <__aeabi_fadd+0x19e>
 800544a:	2680      	movs	r6, #128	; 0x80
 800544c:	2400      	movs	r4, #0
 800544e:	20ff      	movs	r0, #255	; 0xff
 8005450:	03f6      	lsls	r6, r6, #15
 8005452:	e736      	b.n	80052c2 <__aeabi_fadd+0x10e>
 8005454:	4663      	mov	r3, ip
 8005456:	000c      	movs	r4, r1
 8005458:	1bde      	subs	r6, r3, r7
 800545a:	e717      	b.n	800528c <__aeabi_fadd+0xd8>
 800545c:	003b      	movs	r3, r7
 800545e:	4463      	add	r3, ip
 8005460:	2501      	movs	r5, #1
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	d400      	bmi.n	8005468 <__aeabi_fadd+0x2b4>
 8005466:	e761      	b.n	800532c <__aeabi_fadd+0x178>
 8005468:	2502      	movs	r5, #2
 800546a:	e6f7      	b.n	800525c <__aeabi_fadd+0xa8>
 800546c:	4663      	mov	r3, ip
 800546e:	2501      	movs	r5, #1
 8005470:	1afb      	subs	r3, r7, r3
 8005472:	e707      	b.n	8005284 <__aeabi_fadd+0xd0>
 8005474:	2320      	movs	r3, #32
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	0038      	movs	r0, r7
 800547a:	409f      	lsls	r7, r3
 800547c:	003b      	movs	r3, r7
 800547e:	40d0      	lsrs	r0, r2
 8005480:	1e5a      	subs	r2, r3, #1
 8005482:	4193      	sbcs	r3, r2
 8005484:	4303      	orrs	r3, r0
 8005486:	e7ae      	b.n	80053e6 <__aeabi_fadd+0x232>
 8005488:	2320      	movs	r3, #32
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	0039      	movs	r1, r7
 800548e:	409f      	lsls	r7, r3
 8005490:	003b      	movs	r3, r7
 8005492:	40d1      	lsrs	r1, r2
 8005494:	1e5a      	subs	r2, r3, #1
 8005496:	4193      	sbcs	r3, r2
 8005498:	430b      	orrs	r3, r1
 800549a:	e773      	b.n	8005384 <__aeabi_fadd+0x1d0>
 800549c:	2f00      	cmp	r7, #0
 800549e:	d100      	bne.n	80054a2 <__aeabi_fadd+0x2ee>
 80054a0:	e758      	b.n	8005354 <__aeabi_fadd+0x1a0>
 80054a2:	4662      	mov	r2, ip
 80054a4:	2a00      	cmp	r2, #0
 80054a6:	d100      	bne.n	80054aa <__aeabi_fadd+0x2f6>
 80054a8:	e755      	b.n	8005356 <__aeabi_fadd+0x1a2>
 80054aa:	2280      	movs	r2, #128	; 0x80
 80054ac:	03d2      	lsls	r2, r2, #15
 80054ae:	4213      	tst	r3, r2
 80054b0:	d100      	bne.n	80054b4 <__aeabi_fadd+0x300>
 80054b2:	e750      	b.n	8005356 <__aeabi_fadd+0x1a2>
 80054b4:	4641      	mov	r1, r8
 80054b6:	4211      	tst	r1, r2
 80054b8:	d000      	beq.n	80054bc <__aeabi_fadd+0x308>
 80054ba:	e74c      	b.n	8005356 <__aeabi_fadd+0x1a2>
 80054bc:	4643      	mov	r3, r8
 80054be:	e74a      	b.n	8005356 <__aeabi_fadd+0x1a2>
 80054c0:	4663      	mov	r3, ip
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d083      	beq.n	80053ce <__aeabi_fadd+0x21a>
 80054c6:	000c      	movs	r4, r1
 80054c8:	4646      	mov	r6, r8
 80054ca:	2000      	movs	r0, #0
 80054cc:	e6f9      	b.n	80052c2 <__aeabi_fadd+0x10e>
 80054ce:	4663      	mov	r3, ip
 80054d0:	000c      	movs	r4, r1
 80054d2:	1bdb      	subs	r3, r3, r7
 80054d4:	3501      	adds	r5, #1
 80054d6:	e6d5      	b.n	8005284 <__aeabi_fadd+0xd0>
 80054d8:	4646      	mov	r6, r8
 80054da:	2000      	movs	r0, #0
 80054dc:	e6f1      	b.n	80052c2 <__aeabi_fadd+0x10e>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d000      	beq.n	80054e4 <__aeabi_fadd+0x330>
 80054e2:	e723      	b.n	800532c <__aeabi_fadd+0x178>
 80054e4:	2400      	movs	r4, #0
 80054e6:	2600      	movs	r6, #0
 80054e8:	e6eb      	b.n	80052c2 <__aeabi_fadd+0x10e>
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	7dffffff 	.word	0x7dffffff
 80054f0:	fbffffff 	.word	0xfbffffff

080054f4 <__aeabi_fdiv>:
 80054f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f6:	464f      	mov	r7, r9
 80054f8:	4646      	mov	r6, r8
 80054fa:	46d6      	mov	lr, sl
 80054fc:	0245      	lsls	r5, r0, #9
 80054fe:	b5c0      	push	{r6, r7, lr}
 8005500:	0047      	lsls	r7, r0, #1
 8005502:	1c0c      	adds	r4, r1, #0
 8005504:	0a6d      	lsrs	r5, r5, #9
 8005506:	0e3f      	lsrs	r7, r7, #24
 8005508:	0fc6      	lsrs	r6, r0, #31
 800550a:	2f00      	cmp	r7, #0
 800550c:	d100      	bne.n	8005510 <__aeabi_fdiv+0x1c>
 800550e:	e06f      	b.n	80055f0 <__aeabi_fdiv+0xfc>
 8005510:	2fff      	cmp	r7, #255	; 0xff
 8005512:	d100      	bne.n	8005516 <__aeabi_fdiv+0x22>
 8005514:	e074      	b.n	8005600 <__aeabi_fdiv+0x10c>
 8005516:	2300      	movs	r3, #0
 8005518:	2280      	movs	r2, #128	; 0x80
 800551a:	4699      	mov	r9, r3
 800551c:	469a      	mov	sl, r3
 800551e:	00ed      	lsls	r5, r5, #3
 8005520:	04d2      	lsls	r2, r2, #19
 8005522:	4315      	orrs	r5, r2
 8005524:	3f7f      	subs	r7, #127	; 0x7f
 8005526:	0263      	lsls	r3, r4, #9
 8005528:	0a5b      	lsrs	r3, r3, #9
 800552a:	4698      	mov	r8, r3
 800552c:	0063      	lsls	r3, r4, #1
 800552e:	0e1b      	lsrs	r3, r3, #24
 8005530:	0fe4      	lsrs	r4, r4, #31
 8005532:	2b00      	cmp	r3, #0
 8005534:	d04d      	beq.n	80055d2 <__aeabi_fdiv+0xde>
 8005536:	2bff      	cmp	r3, #255	; 0xff
 8005538:	d045      	beq.n	80055c6 <__aeabi_fdiv+0xd2>
 800553a:	4642      	mov	r2, r8
 800553c:	2180      	movs	r1, #128	; 0x80
 800553e:	00d2      	lsls	r2, r2, #3
 8005540:	04c9      	lsls	r1, r1, #19
 8005542:	4311      	orrs	r1, r2
 8005544:	4688      	mov	r8, r1
 8005546:	2200      	movs	r2, #0
 8005548:	3b7f      	subs	r3, #127	; 0x7f
 800554a:	0031      	movs	r1, r6
 800554c:	1aff      	subs	r7, r7, r3
 800554e:	464b      	mov	r3, r9
 8005550:	4061      	eors	r1, r4
 8005552:	b2c9      	uxtb	r1, r1
 8005554:	2b0f      	cmp	r3, #15
 8005556:	d900      	bls.n	800555a <__aeabi_fdiv+0x66>
 8005558:	e0b8      	b.n	80056cc <__aeabi_fdiv+0x1d8>
 800555a:	4870      	ldr	r0, [pc, #448]	; (800571c <__aeabi_fdiv+0x228>)
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	58c3      	ldr	r3, [r0, r3]
 8005560:	469f      	mov	pc, r3
 8005562:	2300      	movs	r3, #0
 8005564:	4698      	mov	r8, r3
 8005566:	0026      	movs	r6, r4
 8005568:	4645      	mov	r5, r8
 800556a:	4692      	mov	sl, r2
 800556c:	4653      	mov	r3, sl
 800556e:	2b02      	cmp	r3, #2
 8005570:	d100      	bne.n	8005574 <__aeabi_fdiv+0x80>
 8005572:	e08d      	b.n	8005690 <__aeabi_fdiv+0x19c>
 8005574:	2b03      	cmp	r3, #3
 8005576:	d100      	bne.n	800557a <__aeabi_fdiv+0x86>
 8005578:	e0a1      	b.n	80056be <__aeabi_fdiv+0x1ca>
 800557a:	2b01      	cmp	r3, #1
 800557c:	d018      	beq.n	80055b0 <__aeabi_fdiv+0xbc>
 800557e:	003b      	movs	r3, r7
 8005580:	337f      	adds	r3, #127	; 0x7f
 8005582:	2b00      	cmp	r3, #0
 8005584:	dd6d      	ble.n	8005662 <__aeabi_fdiv+0x16e>
 8005586:	076a      	lsls	r2, r5, #29
 8005588:	d004      	beq.n	8005594 <__aeabi_fdiv+0xa0>
 800558a:	220f      	movs	r2, #15
 800558c:	402a      	ands	r2, r5
 800558e:	2a04      	cmp	r2, #4
 8005590:	d000      	beq.n	8005594 <__aeabi_fdiv+0xa0>
 8005592:	3504      	adds	r5, #4
 8005594:	012a      	lsls	r2, r5, #4
 8005596:	d503      	bpl.n	80055a0 <__aeabi_fdiv+0xac>
 8005598:	4b61      	ldr	r3, [pc, #388]	; (8005720 <__aeabi_fdiv+0x22c>)
 800559a:	401d      	ands	r5, r3
 800559c:	003b      	movs	r3, r7
 800559e:	3380      	adds	r3, #128	; 0x80
 80055a0:	2bfe      	cmp	r3, #254	; 0xfe
 80055a2:	dd00      	ble.n	80055a6 <__aeabi_fdiv+0xb2>
 80055a4:	e074      	b.n	8005690 <__aeabi_fdiv+0x19c>
 80055a6:	01aa      	lsls	r2, r5, #6
 80055a8:	0a52      	lsrs	r2, r2, #9
 80055aa:	b2d8      	uxtb	r0, r3
 80055ac:	e002      	b.n	80055b4 <__aeabi_fdiv+0xc0>
 80055ae:	000e      	movs	r6, r1
 80055b0:	2000      	movs	r0, #0
 80055b2:	2200      	movs	r2, #0
 80055b4:	05c0      	lsls	r0, r0, #23
 80055b6:	07f6      	lsls	r6, r6, #31
 80055b8:	4310      	orrs	r0, r2
 80055ba:	4330      	orrs	r0, r6
 80055bc:	bce0      	pop	{r5, r6, r7}
 80055be:	46ba      	mov	sl, r7
 80055c0:	46b1      	mov	r9, r6
 80055c2:	46a8      	mov	r8, r5
 80055c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c6:	4643      	mov	r3, r8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d13f      	bne.n	800564c <__aeabi_fdiv+0x158>
 80055cc:	2202      	movs	r2, #2
 80055ce:	3fff      	subs	r7, #255	; 0xff
 80055d0:	e003      	b.n	80055da <__aeabi_fdiv+0xe6>
 80055d2:	4643      	mov	r3, r8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d12d      	bne.n	8005634 <__aeabi_fdiv+0x140>
 80055d8:	2201      	movs	r2, #1
 80055da:	0031      	movs	r1, r6
 80055dc:	464b      	mov	r3, r9
 80055de:	4061      	eors	r1, r4
 80055e0:	b2c9      	uxtb	r1, r1
 80055e2:	4313      	orrs	r3, r2
 80055e4:	2b0f      	cmp	r3, #15
 80055e6:	d838      	bhi.n	800565a <__aeabi_fdiv+0x166>
 80055e8:	484e      	ldr	r0, [pc, #312]	; (8005724 <__aeabi_fdiv+0x230>)
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	58c3      	ldr	r3, [r0, r3]
 80055ee:	469f      	mov	pc, r3
 80055f0:	2d00      	cmp	r5, #0
 80055f2:	d113      	bne.n	800561c <__aeabi_fdiv+0x128>
 80055f4:	2304      	movs	r3, #4
 80055f6:	4699      	mov	r9, r3
 80055f8:	3b03      	subs	r3, #3
 80055fa:	2700      	movs	r7, #0
 80055fc:	469a      	mov	sl, r3
 80055fe:	e792      	b.n	8005526 <__aeabi_fdiv+0x32>
 8005600:	2d00      	cmp	r5, #0
 8005602:	d105      	bne.n	8005610 <__aeabi_fdiv+0x11c>
 8005604:	2308      	movs	r3, #8
 8005606:	4699      	mov	r9, r3
 8005608:	3b06      	subs	r3, #6
 800560a:	27ff      	movs	r7, #255	; 0xff
 800560c:	469a      	mov	sl, r3
 800560e:	e78a      	b.n	8005526 <__aeabi_fdiv+0x32>
 8005610:	230c      	movs	r3, #12
 8005612:	4699      	mov	r9, r3
 8005614:	3b09      	subs	r3, #9
 8005616:	27ff      	movs	r7, #255	; 0xff
 8005618:	469a      	mov	sl, r3
 800561a:	e784      	b.n	8005526 <__aeabi_fdiv+0x32>
 800561c:	0028      	movs	r0, r5
 800561e:	f7fc fac7 	bl	8001bb0 <__clzsi2>
 8005622:	2776      	movs	r7, #118	; 0x76
 8005624:	1f43      	subs	r3, r0, #5
 8005626:	409d      	lsls	r5, r3
 8005628:	2300      	movs	r3, #0
 800562a:	427f      	negs	r7, r7
 800562c:	4699      	mov	r9, r3
 800562e:	469a      	mov	sl, r3
 8005630:	1a3f      	subs	r7, r7, r0
 8005632:	e778      	b.n	8005526 <__aeabi_fdiv+0x32>
 8005634:	4640      	mov	r0, r8
 8005636:	f7fc fabb 	bl	8001bb0 <__clzsi2>
 800563a:	4642      	mov	r2, r8
 800563c:	1f43      	subs	r3, r0, #5
 800563e:	409a      	lsls	r2, r3
 8005640:	2376      	movs	r3, #118	; 0x76
 8005642:	425b      	negs	r3, r3
 8005644:	4690      	mov	r8, r2
 8005646:	1a1b      	subs	r3, r3, r0
 8005648:	2200      	movs	r2, #0
 800564a:	e77e      	b.n	800554a <__aeabi_fdiv+0x56>
 800564c:	2303      	movs	r3, #3
 800564e:	464a      	mov	r2, r9
 8005650:	431a      	orrs	r2, r3
 8005652:	4691      	mov	r9, r2
 8005654:	33fc      	adds	r3, #252	; 0xfc
 8005656:	2203      	movs	r2, #3
 8005658:	e777      	b.n	800554a <__aeabi_fdiv+0x56>
 800565a:	000e      	movs	r6, r1
 800565c:	20ff      	movs	r0, #255	; 0xff
 800565e:	2200      	movs	r2, #0
 8005660:	e7a8      	b.n	80055b4 <__aeabi_fdiv+0xc0>
 8005662:	2201      	movs	r2, #1
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b1b      	cmp	r3, #27
 8005668:	dca2      	bgt.n	80055b0 <__aeabi_fdiv+0xbc>
 800566a:	379e      	adds	r7, #158	; 0x9e
 800566c:	002a      	movs	r2, r5
 800566e:	40bd      	lsls	r5, r7
 8005670:	40da      	lsrs	r2, r3
 8005672:	1e6b      	subs	r3, r5, #1
 8005674:	419d      	sbcs	r5, r3
 8005676:	4315      	orrs	r5, r2
 8005678:	076a      	lsls	r2, r5, #29
 800567a:	d004      	beq.n	8005686 <__aeabi_fdiv+0x192>
 800567c:	220f      	movs	r2, #15
 800567e:	402a      	ands	r2, r5
 8005680:	2a04      	cmp	r2, #4
 8005682:	d000      	beq.n	8005686 <__aeabi_fdiv+0x192>
 8005684:	3504      	adds	r5, #4
 8005686:	016a      	lsls	r2, r5, #5
 8005688:	d544      	bpl.n	8005714 <__aeabi_fdiv+0x220>
 800568a:	2001      	movs	r0, #1
 800568c:	2200      	movs	r2, #0
 800568e:	e791      	b.n	80055b4 <__aeabi_fdiv+0xc0>
 8005690:	20ff      	movs	r0, #255	; 0xff
 8005692:	2200      	movs	r2, #0
 8005694:	e78e      	b.n	80055b4 <__aeabi_fdiv+0xc0>
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	2600      	movs	r6, #0
 800569a:	20ff      	movs	r0, #255	; 0xff
 800569c:	03d2      	lsls	r2, r2, #15
 800569e:	e789      	b.n	80055b4 <__aeabi_fdiv+0xc0>
 80056a0:	2300      	movs	r3, #0
 80056a2:	4698      	mov	r8, r3
 80056a4:	2280      	movs	r2, #128	; 0x80
 80056a6:	03d2      	lsls	r2, r2, #15
 80056a8:	4215      	tst	r5, r2
 80056aa:	d008      	beq.n	80056be <__aeabi_fdiv+0x1ca>
 80056ac:	4643      	mov	r3, r8
 80056ae:	4213      	tst	r3, r2
 80056b0:	d105      	bne.n	80056be <__aeabi_fdiv+0x1ca>
 80056b2:	431a      	orrs	r2, r3
 80056b4:	0252      	lsls	r2, r2, #9
 80056b6:	0026      	movs	r6, r4
 80056b8:	20ff      	movs	r0, #255	; 0xff
 80056ba:	0a52      	lsrs	r2, r2, #9
 80056bc:	e77a      	b.n	80055b4 <__aeabi_fdiv+0xc0>
 80056be:	2280      	movs	r2, #128	; 0x80
 80056c0:	03d2      	lsls	r2, r2, #15
 80056c2:	432a      	orrs	r2, r5
 80056c4:	0252      	lsls	r2, r2, #9
 80056c6:	20ff      	movs	r0, #255	; 0xff
 80056c8:	0a52      	lsrs	r2, r2, #9
 80056ca:	e773      	b.n	80055b4 <__aeabi_fdiv+0xc0>
 80056cc:	4642      	mov	r2, r8
 80056ce:	016b      	lsls	r3, r5, #5
 80056d0:	0155      	lsls	r5, r2, #5
 80056d2:	42ab      	cmp	r3, r5
 80056d4:	d21a      	bcs.n	800570c <__aeabi_fdiv+0x218>
 80056d6:	201b      	movs	r0, #27
 80056d8:	2200      	movs	r2, #0
 80056da:	3f01      	subs	r7, #1
 80056dc:	2601      	movs	r6, #1
 80056de:	001c      	movs	r4, r3
 80056e0:	0052      	lsls	r2, r2, #1
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	2c00      	cmp	r4, #0
 80056e6:	db01      	blt.n	80056ec <__aeabi_fdiv+0x1f8>
 80056e8:	429d      	cmp	r5, r3
 80056ea:	d801      	bhi.n	80056f0 <__aeabi_fdiv+0x1fc>
 80056ec:	1b5b      	subs	r3, r3, r5
 80056ee:	4332      	orrs	r2, r6
 80056f0:	3801      	subs	r0, #1
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d1f3      	bne.n	80056de <__aeabi_fdiv+0x1ea>
 80056f6:	1e58      	subs	r0, r3, #1
 80056f8:	4183      	sbcs	r3, r0
 80056fa:	4313      	orrs	r3, r2
 80056fc:	001d      	movs	r5, r3
 80056fe:	003b      	movs	r3, r7
 8005700:	337f      	adds	r3, #127	; 0x7f
 8005702:	000e      	movs	r6, r1
 8005704:	2b00      	cmp	r3, #0
 8005706:	dd00      	ble.n	800570a <__aeabi_fdiv+0x216>
 8005708:	e73d      	b.n	8005586 <__aeabi_fdiv+0x92>
 800570a:	e7aa      	b.n	8005662 <__aeabi_fdiv+0x16e>
 800570c:	201a      	movs	r0, #26
 800570e:	2201      	movs	r2, #1
 8005710:	1b5b      	subs	r3, r3, r5
 8005712:	e7e3      	b.n	80056dc <__aeabi_fdiv+0x1e8>
 8005714:	01aa      	lsls	r2, r5, #6
 8005716:	2000      	movs	r0, #0
 8005718:	0a52      	lsrs	r2, r2, #9
 800571a:	e74b      	b.n	80055b4 <__aeabi_fdiv+0xc0>
 800571c:	0800646c 	.word	0x0800646c
 8005720:	f7ffffff 	.word	0xf7ffffff
 8005724:	080064ac 	.word	0x080064ac

08005728 <__eqsf2>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	0042      	lsls	r2, r0, #1
 800572c:	0245      	lsls	r5, r0, #9
 800572e:	024e      	lsls	r6, r1, #9
 8005730:	004c      	lsls	r4, r1, #1
 8005732:	0fc3      	lsrs	r3, r0, #31
 8005734:	0a6d      	lsrs	r5, r5, #9
 8005736:	2001      	movs	r0, #1
 8005738:	0e12      	lsrs	r2, r2, #24
 800573a:	0a76      	lsrs	r6, r6, #9
 800573c:	0e24      	lsrs	r4, r4, #24
 800573e:	0fc9      	lsrs	r1, r1, #31
 8005740:	2aff      	cmp	r2, #255	; 0xff
 8005742:	d006      	beq.n	8005752 <__eqsf2+0x2a>
 8005744:	2cff      	cmp	r4, #255	; 0xff
 8005746:	d003      	beq.n	8005750 <__eqsf2+0x28>
 8005748:	42a2      	cmp	r2, r4
 800574a:	d101      	bne.n	8005750 <__eqsf2+0x28>
 800574c:	42b5      	cmp	r5, r6
 800574e:	d006      	beq.n	800575e <__eqsf2+0x36>
 8005750:	bd70      	pop	{r4, r5, r6, pc}
 8005752:	2d00      	cmp	r5, #0
 8005754:	d1fc      	bne.n	8005750 <__eqsf2+0x28>
 8005756:	2cff      	cmp	r4, #255	; 0xff
 8005758:	d1fa      	bne.n	8005750 <__eqsf2+0x28>
 800575a:	2e00      	cmp	r6, #0
 800575c:	d1f8      	bne.n	8005750 <__eqsf2+0x28>
 800575e:	428b      	cmp	r3, r1
 8005760:	d006      	beq.n	8005770 <__eqsf2+0x48>
 8005762:	2001      	movs	r0, #1
 8005764:	2a00      	cmp	r2, #0
 8005766:	d1f3      	bne.n	8005750 <__eqsf2+0x28>
 8005768:	0028      	movs	r0, r5
 800576a:	1e43      	subs	r3, r0, #1
 800576c:	4198      	sbcs	r0, r3
 800576e:	e7ef      	b.n	8005750 <__eqsf2+0x28>
 8005770:	2000      	movs	r0, #0
 8005772:	e7ed      	b.n	8005750 <__eqsf2+0x28>

08005774 <__gesf2>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	0042      	lsls	r2, r0, #1
 8005778:	0245      	lsls	r5, r0, #9
 800577a:	024e      	lsls	r6, r1, #9
 800577c:	004c      	lsls	r4, r1, #1
 800577e:	0fc3      	lsrs	r3, r0, #31
 8005780:	0a6d      	lsrs	r5, r5, #9
 8005782:	0e12      	lsrs	r2, r2, #24
 8005784:	0a76      	lsrs	r6, r6, #9
 8005786:	0e24      	lsrs	r4, r4, #24
 8005788:	0fc8      	lsrs	r0, r1, #31
 800578a:	2aff      	cmp	r2, #255	; 0xff
 800578c:	d01b      	beq.n	80057c6 <__gesf2+0x52>
 800578e:	2cff      	cmp	r4, #255	; 0xff
 8005790:	d00e      	beq.n	80057b0 <__gesf2+0x3c>
 8005792:	2a00      	cmp	r2, #0
 8005794:	d11b      	bne.n	80057ce <__gesf2+0x5a>
 8005796:	2c00      	cmp	r4, #0
 8005798:	d101      	bne.n	800579e <__gesf2+0x2a>
 800579a:	2e00      	cmp	r6, #0
 800579c:	d01c      	beq.n	80057d8 <__gesf2+0x64>
 800579e:	2d00      	cmp	r5, #0
 80057a0:	d00c      	beq.n	80057bc <__gesf2+0x48>
 80057a2:	4283      	cmp	r3, r0
 80057a4:	d01c      	beq.n	80057e0 <__gesf2+0x6c>
 80057a6:	2102      	movs	r1, #2
 80057a8:	1e58      	subs	r0, r3, #1
 80057aa:	4008      	ands	r0, r1
 80057ac:	3801      	subs	r0, #1
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
 80057b0:	2e00      	cmp	r6, #0
 80057b2:	d122      	bne.n	80057fa <__gesf2+0x86>
 80057b4:	2a00      	cmp	r2, #0
 80057b6:	d1f4      	bne.n	80057a2 <__gesf2+0x2e>
 80057b8:	2d00      	cmp	r5, #0
 80057ba:	d1f2      	bne.n	80057a2 <__gesf2+0x2e>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d1f6      	bne.n	80057ae <__gesf2+0x3a>
 80057c0:	2001      	movs	r0, #1
 80057c2:	4240      	negs	r0, r0
 80057c4:	e7f3      	b.n	80057ae <__gesf2+0x3a>
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	d117      	bne.n	80057fa <__gesf2+0x86>
 80057ca:	2cff      	cmp	r4, #255	; 0xff
 80057cc:	d0f0      	beq.n	80057b0 <__gesf2+0x3c>
 80057ce:	2c00      	cmp	r4, #0
 80057d0:	d1e7      	bne.n	80057a2 <__gesf2+0x2e>
 80057d2:	2e00      	cmp	r6, #0
 80057d4:	d1e5      	bne.n	80057a2 <__gesf2+0x2e>
 80057d6:	e7e6      	b.n	80057a6 <__gesf2+0x32>
 80057d8:	2000      	movs	r0, #0
 80057da:	2d00      	cmp	r5, #0
 80057dc:	d0e7      	beq.n	80057ae <__gesf2+0x3a>
 80057de:	e7e2      	b.n	80057a6 <__gesf2+0x32>
 80057e0:	42a2      	cmp	r2, r4
 80057e2:	dc05      	bgt.n	80057f0 <__gesf2+0x7c>
 80057e4:	dbea      	blt.n	80057bc <__gesf2+0x48>
 80057e6:	42b5      	cmp	r5, r6
 80057e8:	d802      	bhi.n	80057f0 <__gesf2+0x7c>
 80057ea:	d3e7      	bcc.n	80057bc <__gesf2+0x48>
 80057ec:	2000      	movs	r0, #0
 80057ee:	e7de      	b.n	80057ae <__gesf2+0x3a>
 80057f0:	4243      	negs	r3, r0
 80057f2:	4158      	adcs	r0, r3
 80057f4:	0040      	lsls	r0, r0, #1
 80057f6:	3801      	subs	r0, #1
 80057f8:	e7d9      	b.n	80057ae <__gesf2+0x3a>
 80057fa:	2002      	movs	r0, #2
 80057fc:	4240      	negs	r0, r0
 80057fe:	e7d6      	b.n	80057ae <__gesf2+0x3a>

08005800 <__lesf2>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	0042      	lsls	r2, r0, #1
 8005804:	0245      	lsls	r5, r0, #9
 8005806:	024e      	lsls	r6, r1, #9
 8005808:	004c      	lsls	r4, r1, #1
 800580a:	0fc3      	lsrs	r3, r0, #31
 800580c:	0a6d      	lsrs	r5, r5, #9
 800580e:	0e12      	lsrs	r2, r2, #24
 8005810:	0a76      	lsrs	r6, r6, #9
 8005812:	0e24      	lsrs	r4, r4, #24
 8005814:	0fc8      	lsrs	r0, r1, #31
 8005816:	2aff      	cmp	r2, #255	; 0xff
 8005818:	d00b      	beq.n	8005832 <__lesf2+0x32>
 800581a:	2cff      	cmp	r4, #255	; 0xff
 800581c:	d00d      	beq.n	800583a <__lesf2+0x3a>
 800581e:	2a00      	cmp	r2, #0
 8005820:	d11f      	bne.n	8005862 <__lesf2+0x62>
 8005822:	2c00      	cmp	r4, #0
 8005824:	d116      	bne.n	8005854 <__lesf2+0x54>
 8005826:	2e00      	cmp	r6, #0
 8005828:	d114      	bne.n	8005854 <__lesf2+0x54>
 800582a:	2000      	movs	r0, #0
 800582c:	2d00      	cmp	r5, #0
 800582e:	d010      	beq.n	8005852 <__lesf2+0x52>
 8005830:	e009      	b.n	8005846 <__lesf2+0x46>
 8005832:	2d00      	cmp	r5, #0
 8005834:	d10c      	bne.n	8005850 <__lesf2+0x50>
 8005836:	2cff      	cmp	r4, #255	; 0xff
 8005838:	d113      	bne.n	8005862 <__lesf2+0x62>
 800583a:	2e00      	cmp	r6, #0
 800583c:	d108      	bne.n	8005850 <__lesf2+0x50>
 800583e:	2a00      	cmp	r2, #0
 8005840:	d008      	beq.n	8005854 <__lesf2+0x54>
 8005842:	4283      	cmp	r3, r0
 8005844:	d012      	beq.n	800586c <__lesf2+0x6c>
 8005846:	2102      	movs	r1, #2
 8005848:	1e58      	subs	r0, r3, #1
 800584a:	4008      	ands	r0, r1
 800584c:	3801      	subs	r0, #1
 800584e:	e000      	b.n	8005852 <__lesf2+0x52>
 8005850:	2002      	movs	r0, #2
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	2d00      	cmp	r5, #0
 8005856:	d1f4      	bne.n	8005842 <__lesf2+0x42>
 8005858:	2800      	cmp	r0, #0
 800585a:	d1fa      	bne.n	8005852 <__lesf2+0x52>
 800585c:	2001      	movs	r0, #1
 800585e:	4240      	negs	r0, r0
 8005860:	e7f7      	b.n	8005852 <__lesf2+0x52>
 8005862:	2c00      	cmp	r4, #0
 8005864:	d1ed      	bne.n	8005842 <__lesf2+0x42>
 8005866:	2e00      	cmp	r6, #0
 8005868:	d1eb      	bne.n	8005842 <__lesf2+0x42>
 800586a:	e7ec      	b.n	8005846 <__lesf2+0x46>
 800586c:	42a2      	cmp	r2, r4
 800586e:	dc05      	bgt.n	800587c <__lesf2+0x7c>
 8005870:	dbf2      	blt.n	8005858 <__lesf2+0x58>
 8005872:	42b5      	cmp	r5, r6
 8005874:	d802      	bhi.n	800587c <__lesf2+0x7c>
 8005876:	d3ef      	bcc.n	8005858 <__lesf2+0x58>
 8005878:	2000      	movs	r0, #0
 800587a:	e7ea      	b.n	8005852 <__lesf2+0x52>
 800587c:	4243      	negs	r3, r0
 800587e:	4158      	adcs	r0, r3
 8005880:	0040      	lsls	r0, r0, #1
 8005882:	3801      	subs	r0, #1
 8005884:	e7e5      	b.n	8005852 <__lesf2+0x52>
 8005886:	46c0      	nop			; (mov r8, r8)

08005888 <__aeabi_fmul>:
 8005888:	0243      	lsls	r3, r0, #9
 800588a:	0a5b      	lsrs	r3, r3, #9
 800588c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588e:	464f      	mov	r7, r9
 8005890:	4646      	mov	r6, r8
 8005892:	4699      	mov	r9, r3
 8005894:	46d6      	mov	lr, sl
 8005896:	0fc3      	lsrs	r3, r0, #31
 8005898:	0045      	lsls	r5, r0, #1
 800589a:	4698      	mov	r8, r3
 800589c:	b5c0      	push	{r6, r7, lr}
 800589e:	464b      	mov	r3, r9
 80058a0:	1c0f      	adds	r7, r1, #0
 80058a2:	0e2d      	lsrs	r5, r5, #24
 80058a4:	d100      	bne.n	80058a8 <__aeabi_fmul+0x20>
 80058a6:	e0cb      	b.n	8005a40 <__aeabi_fmul+0x1b8>
 80058a8:	2dff      	cmp	r5, #255	; 0xff
 80058aa:	d100      	bne.n	80058ae <__aeabi_fmul+0x26>
 80058ac:	e0cf      	b.n	8005a4e <__aeabi_fmul+0x1c6>
 80058ae:	2280      	movs	r2, #128	; 0x80
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	04d2      	lsls	r2, r2, #19
 80058b4:	431a      	orrs	r2, r3
 80058b6:	2300      	movs	r3, #0
 80058b8:	4691      	mov	r9, r2
 80058ba:	2600      	movs	r6, #0
 80058bc:	469a      	mov	sl, r3
 80058be:	3d7f      	subs	r5, #127	; 0x7f
 80058c0:	027c      	lsls	r4, r7, #9
 80058c2:	007b      	lsls	r3, r7, #1
 80058c4:	0a64      	lsrs	r4, r4, #9
 80058c6:	0e1b      	lsrs	r3, r3, #24
 80058c8:	0fff      	lsrs	r7, r7, #31
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d100      	bne.n	80058d0 <__aeabi_fmul+0x48>
 80058ce:	e0a9      	b.n	8005a24 <__aeabi_fmul+0x19c>
 80058d0:	2bff      	cmp	r3, #255	; 0xff
 80058d2:	d011      	beq.n	80058f8 <__aeabi_fmul+0x70>
 80058d4:	2280      	movs	r2, #128	; 0x80
 80058d6:	00e4      	lsls	r4, r4, #3
 80058d8:	04d2      	lsls	r2, r2, #19
 80058da:	4314      	orrs	r4, r2
 80058dc:	4642      	mov	r2, r8
 80058de:	3b7f      	subs	r3, #127	; 0x7f
 80058e0:	195b      	adds	r3, r3, r5
 80058e2:	407a      	eors	r2, r7
 80058e4:	2000      	movs	r0, #0
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	1c5d      	adds	r5, r3, #1
 80058ea:	2e0a      	cmp	r6, #10
 80058ec:	dd13      	ble.n	8005916 <__aeabi_fmul+0x8e>
 80058ee:	003a      	movs	r2, r7
 80058f0:	2e0b      	cmp	r6, #11
 80058f2:	d047      	beq.n	8005984 <__aeabi_fmul+0xfc>
 80058f4:	4647      	mov	r7, r8
 80058f6:	e03f      	b.n	8005978 <__aeabi_fmul+0xf0>
 80058f8:	002b      	movs	r3, r5
 80058fa:	33ff      	adds	r3, #255	; 0xff
 80058fc:	2c00      	cmp	r4, #0
 80058fe:	d11e      	bne.n	800593e <__aeabi_fmul+0xb6>
 8005900:	2202      	movs	r2, #2
 8005902:	4316      	orrs	r6, r2
 8005904:	4642      	mov	r2, r8
 8005906:	3501      	adds	r5, #1
 8005908:	407a      	eors	r2, r7
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	35ff      	adds	r5, #255	; 0xff
 800590e:	2e0a      	cmp	r6, #10
 8005910:	dd00      	ble.n	8005914 <__aeabi_fmul+0x8c>
 8005912:	e0e4      	b.n	8005ade <__aeabi_fmul+0x256>
 8005914:	2002      	movs	r0, #2
 8005916:	2e02      	cmp	r6, #2
 8005918:	dc1c      	bgt.n	8005954 <__aeabi_fmul+0xcc>
 800591a:	3e01      	subs	r6, #1
 800591c:	2e01      	cmp	r6, #1
 800591e:	d842      	bhi.n	80059a6 <__aeabi_fmul+0x11e>
 8005920:	2802      	cmp	r0, #2
 8005922:	d03d      	beq.n	80059a0 <__aeabi_fmul+0x118>
 8005924:	2801      	cmp	r0, #1
 8005926:	d166      	bne.n	80059f6 <__aeabi_fmul+0x16e>
 8005928:	2000      	movs	r0, #0
 800592a:	2100      	movs	r1, #0
 800592c:	05c0      	lsls	r0, r0, #23
 800592e:	4308      	orrs	r0, r1
 8005930:	07d2      	lsls	r2, r2, #31
 8005932:	4310      	orrs	r0, r2
 8005934:	bce0      	pop	{r5, r6, r7}
 8005936:	46ba      	mov	sl, r7
 8005938:	46b1      	mov	r9, r6
 800593a:	46a8      	mov	r8, r5
 800593c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800593e:	2203      	movs	r2, #3
 8005940:	4316      	orrs	r6, r2
 8005942:	4642      	mov	r2, r8
 8005944:	3501      	adds	r5, #1
 8005946:	407a      	eors	r2, r7
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	35ff      	adds	r5, #255	; 0xff
 800594c:	2e0a      	cmp	r6, #10
 800594e:	dd00      	ble.n	8005952 <__aeabi_fmul+0xca>
 8005950:	e0e4      	b.n	8005b1c <__aeabi_fmul+0x294>
 8005952:	2003      	movs	r0, #3
 8005954:	2101      	movs	r1, #1
 8005956:	40b1      	lsls	r1, r6
 8005958:	26a6      	movs	r6, #166	; 0xa6
 800595a:	00f6      	lsls	r6, r6, #3
 800595c:	4231      	tst	r1, r6
 800595e:	d10a      	bne.n	8005976 <__aeabi_fmul+0xee>
 8005960:	2690      	movs	r6, #144	; 0x90
 8005962:	00b6      	lsls	r6, r6, #2
 8005964:	4231      	tst	r1, r6
 8005966:	d116      	bne.n	8005996 <__aeabi_fmul+0x10e>
 8005968:	3eb9      	subs	r6, #185	; 0xb9
 800596a:	3eff      	subs	r6, #255	; 0xff
 800596c:	420e      	tst	r6, r1
 800596e:	d01a      	beq.n	80059a6 <__aeabi_fmul+0x11e>
 8005970:	46a1      	mov	r9, r4
 8005972:	4682      	mov	sl, r0
 8005974:	e000      	b.n	8005978 <__aeabi_fmul+0xf0>
 8005976:	0017      	movs	r7, r2
 8005978:	4653      	mov	r3, sl
 800597a:	003a      	movs	r2, r7
 800597c:	2b02      	cmp	r3, #2
 800597e:	d00f      	beq.n	80059a0 <__aeabi_fmul+0x118>
 8005980:	464c      	mov	r4, r9
 8005982:	4650      	mov	r0, sl
 8005984:	2803      	cmp	r0, #3
 8005986:	d1cd      	bne.n	8005924 <__aeabi_fmul+0x9c>
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	03c9      	lsls	r1, r1, #15
 800598c:	4321      	orrs	r1, r4
 800598e:	0249      	lsls	r1, r1, #9
 8005990:	20ff      	movs	r0, #255	; 0xff
 8005992:	0a49      	lsrs	r1, r1, #9
 8005994:	e7ca      	b.n	800592c <__aeabi_fmul+0xa4>
 8005996:	2180      	movs	r1, #128	; 0x80
 8005998:	2200      	movs	r2, #0
 800599a:	20ff      	movs	r0, #255	; 0xff
 800599c:	03c9      	lsls	r1, r1, #15
 800599e:	e7c5      	b.n	800592c <__aeabi_fmul+0xa4>
 80059a0:	20ff      	movs	r0, #255	; 0xff
 80059a2:	2100      	movs	r1, #0
 80059a4:	e7c2      	b.n	800592c <__aeabi_fmul+0xa4>
 80059a6:	0c20      	lsrs	r0, r4, #16
 80059a8:	4649      	mov	r1, r9
 80059aa:	0424      	lsls	r4, r4, #16
 80059ac:	0c24      	lsrs	r4, r4, #16
 80059ae:	0027      	movs	r7, r4
 80059b0:	0c0e      	lsrs	r6, r1, #16
 80059b2:	0409      	lsls	r1, r1, #16
 80059b4:	0c09      	lsrs	r1, r1, #16
 80059b6:	4374      	muls	r4, r6
 80059b8:	434f      	muls	r7, r1
 80059ba:	4346      	muls	r6, r0
 80059bc:	4348      	muls	r0, r1
 80059be:	0c39      	lsrs	r1, r7, #16
 80059c0:	1900      	adds	r0, r0, r4
 80059c2:	1809      	adds	r1, r1, r0
 80059c4:	428c      	cmp	r4, r1
 80059c6:	d903      	bls.n	80059d0 <__aeabi_fmul+0x148>
 80059c8:	2080      	movs	r0, #128	; 0x80
 80059ca:	0240      	lsls	r0, r0, #9
 80059cc:	4684      	mov	ip, r0
 80059ce:	4466      	add	r6, ip
 80059d0:	043f      	lsls	r7, r7, #16
 80059d2:	0408      	lsls	r0, r1, #16
 80059d4:	0c3f      	lsrs	r7, r7, #16
 80059d6:	19c0      	adds	r0, r0, r7
 80059d8:	0184      	lsls	r4, r0, #6
 80059da:	1e67      	subs	r7, r4, #1
 80059dc:	41bc      	sbcs	r4, r7
 80059de:	0c09      	lsrs	r1, r1, #16
 80059e0:	0e80      	lsrs	r0, r0, #26
 80059e2:	1989      	adds	r1, r1, r6
 80059e4:	4304      	orrs	r4, r0
 80059e6:	0189      	lsls	r1, r1, #6
 80059e8:	430c      	orrs	r4, r1
 80059ea:	0109      	lsls	r1, r1, #4
 80059ec:	d571      	bpl.n	8005ad2 <__aeabi_fmul+0x24a>
 80059ee:	2301      	movs	r3, #1
 80059f0:	0861      	lsrs	r1, r4, #1
 80059f2:	401c      	ands	r4, r3
 80059f4:	430c      	orrs	r4, r1
 80059f6:	002b      	movs	r3, r5
 80059f8:	337f      	adds	r3, #127	; 0x7f
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	dd51      	ble.n	8005aa2 <__aeabi_fmul+0x21a>
 80059fe:	0761      	lsls	r1, r4, #29
 8005a00:	d004      	beq.n	8005a0c <__aeabi_fmul+0x184>
 8005a02:	210f      	movs	r1, #15
 8005a04:	4021      	ands	r1, r4
 8005a06:	2904      	cmp	r1, #4
 8005a08:	d000      	beq.n	8005a0c <__aeabi_fmul+0x184>
 8005a0a:	3404      	adds	r4, #4
 8005a0c:	0121      	lsls	r1, r4, #4
 8005a0e:	d503      	bpl.n	8005a18 <__aeabi_fmul+0x190>
 8005a10:	4b43      	ldr	r3, [pc, #268]	; (8005b20 <__aeabi_fmul+0x298>)
 8005a12:	401c      	ands	r4, r3
 8005a14:	002b      	movs	r3, r5
 8005a16:	3380      	adds	r3, #128	; 0x80
 8005a18:	2bfe      	cmp	r3, #254	; 0xfe
 8005a1a:	dcc1      	bgt.n	80059a0 <__aeabi_fmul+0x118>
 8005a1c:	01a1      	lsls	r1, r4, #6
 8005a1e:	0a49      	lsrs	r1, r1, #9
 8005a20:	b2d8      	uxtb	r0, r3
 8005a22:	e783      	b.n	800592c <__aeabi_fmul+0xa4>
 8005a24:	2c00      	cmp	r4, #0
 8005a26:	d12c      	bne.n	8005a82 <__aeabi_fmul+0x1fa>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	4642      	mov	r2, r8
 8005a2c:	431e      	orrs	r6, r3
 8005a2e:	002b      	movs	r3, r5
 8005a30:	407a      	eors	r2, r7
 8005a32:	2001      	movs	r0, #1
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	1c5d      	adds	r5, r3, #1
 8005a38:	2e0a      	cmp	r6, #10
 8005a3a:	dd00      	ble.n	8005a3e <__aeabi_fmul+0x1b6>
 8005a3c:	e757      	b.n	80058ee <__aeabi_fmul+0x66>
 8005a3e:	e76a      	b.n	8005916 <__aeabi_fmul+0x8e>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d110      	bne.n	8005a66 <__aeabi_fmul+0x1de>
 8005a44:	2301      	movs	r3, #1
 8005a46:	2604      	movs	r6, #4
 8005a48:	2500      	movs	r5, #0
 8005a4a:	469a      	mov	sl, r3
 8005a4c:	e738      	b.n	80058c0 <__aeabi_fmul+0x38>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d104      	bne.n	8005a5c <__aeabi_fmul+0x1d4>
 8005a52:	2302      	movs	r3, #2
 8005a54:	2608      	movs	r6, #8
 8005a56:	25ff      	movs	r5, #255	; 0xff
 8005a58:	469a      	mov	sl, r3
 8005a5a:	e731      	b.n	80058c0 <__aeabi_fmul+0x38>
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	260c      	movs	r6, #12
 8005a60:	25ff      	movs	r5, #255	; 0xff
 8005a62:	469a      	mov	sl, r3
 8005a64:	e72c      	b.n	80058c0 <__aeabi_fmul+0x38>
 8005a66:	4648      	mov	r0, r9
 8005a68:	f7fc f8a2 	bl	8001bb0 <__clzsi2>
 8005a6c:	464a      	mov	r2, r9
 8005a6e:	1f43      	subs	r3, r0, #5
 8005a70:	2576      	movs	r5, #118	; 0x76
 8005a72:	409a      	lsls	r2, r3
 8005a74:	2300      	movs	r3, #0
 8005a76:	426d      	negs	r5, r5
 8005a78:	4691      	mov	r9, r2
 8005a7a:	2600      	movs	r6, #0
 8005a7c:	469a      	mov	sl, r3
 8005a7e:	1a2d      	subs	r5, r5, r0
 8005a80:	e71e      	b.n	80058c0 <__aeabi_fmul+0x38>
 8005a82:	0020      	movs	r0, r4
 8005a84:	f7fc f894 	bl	8001bb0 <__clzsi2>
 8005a88:	4642      	mov	r2, r8
 8005a8a:	1f43      	subs	r3, r0, #5
 8005a8c:	409c      	lsls	r4, r3
 8005a8e:	1a2b      	subs	r3, r5, r0
 8005a90:	3b76      	subs	r3, #118	; 0x76
 8005a92:	407a      	eors	r2, r7
 8005a94:	2000      	movs	r0, #0
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	1c5d      	adds	r5, r3, #1
 8005a9a:	2e0a      	cmp	r6, #10
 8005a9c:	dd00      	ble.n	8005aa0 <__aeabi_fmul+0x218>
 8005a9e:	e726      	b.n	80058ee <__aeabi_fmul+0x66>
 8005aa0:	e739      	b.n	8005916 <__aeabi_fmul+0x8e>
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	1acb      	subs	r3, r1, r3
 8005aa6:	2b1b      	cmp	r3, #27
 8005aa8:	dd00      	ble.n	8005aac <__aeabi_fmul+0x224>
 8005aaa:	e73d      	b.n	8005928 <__aeabi_fmul+0xa0>
 8005aac:	359e      	adds	r5, #158	; 0x9e
 8005aae:	0021      	movs	r1, r4
 8005ab0:	40ac      	lsls	r4, r5
 8005ab2:	40d9      	lsrs	r1, r3
 8005ab4:	1e63      	subs	r3, r4, #1
 8005ab6:	419c      	sbcs	r4, r3
 8005ab8:	4321      	orrs	r1, r4
 8005aba:	074b      	lsls	r3, r1, #29
 8005abc:	d004      	beq.n	8005ac8 <__aeabi_fmul+0x240>
 8005abe:	230f      	movs	r3, #15
 8005ac0:	400b      	ands	r3, r1
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d000      	beq.n	8005ac8 <__aeabi_fmul+0x240>
 8005ac6:	3104      	adds	r1, #4
 8005ac8:	014b      	lsls	r3, r1, #5
 8005aca:	d504      	bpl.n	8005ad6 <__aeabi_fmul+0x24e>
 8005acc:	2001      	movs	r0, #1
 8005ace:	2100      	movs	r1, #0
 8005ad0:	e72c      	b.n	800592c <__aeabi_fmul+0xa4>
 8005ad2:	001d      	movs	r5, r3
 8005ad4:	e78f      	b.n	80059f6 <__aeabi_fmul+0x16e>
 8005ad6:	0189      	lsls	r1, r1, #6
 8005ad8:	2000      	movs	r0, #0
 8005ada:	0a49      	lsrs	r1, r1, #9
 8005adc:	e726      	b.n	800592c <__aeabi_fmul+0xa4>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	2e0f      	cmp	r6, #15
 8005ae2:	d10c      	bne.n	8005afe <__aeabi_fmul+0x276>
 8005ae4:	2180      	movs	r1, #128	; 0x80
 8005ae6:	464b      	mov	r3, r9
 8005ae8:	03c9      	lsls	r1, r1, #15
 8005aea:	420b      	tst	r3, r1
 8005aec:	d00d      	beq.n	8005b0a <__aeabi_fmul+0x282>
 8005aee:	420c      	tst	r4, r1
 8005af0:	d10b      	bne.n	8005b0a <__aeabi_fmul+0x282>
 8005af2:	4321      	orrs	r1, r4
 8005af4:	0249      	lsls	r1, r1, #9
 8005af6:	003a      	movs	r2, r7
 8005af8:	20ff      	movs	r0, #255	; 0xff
 8005afa:	0a49      	lsrs	r1, r1, #9
 8005afc:	e716      	b.n	800592c <__aeabi_fmul+0xa4>
 8005afe:	2e0b      	cmp	r6, #11
 8005b00:	d000      	beq.n	8005b04 <__aeabi_fmul+0x27c>
 8005b02:	e6f7      	b.n	80058f4 <__aeabi_fmul+0x6c>
 8005b04:	46a1      	mov	r9, r4
 8005b06:	469a      	mov	sl, r3
 8005b08:	e736      	b.n	8005978 <__aeabi_fmul+0xf0>
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	03c9      	lsls	r1, r1, #15
 8005b10:	4319      	orrs	r1, r3
 8005b12:	0249      	lsls	r1, r1, #9
 8005b14:	4642      	mov	r2, r8
 8005b16:	20ff      	movs	r0, #255	; 0xff
 8005b18:	0a49      	lsrs	r1, r1, #9
 8005b1a:	e707      	b.n	800592c <__aeabi_fmul+0xa4>
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e7df      	b.n	8005ae0 <__aeabi_fmul+0x258>
 8005b20:	f7ffffff 	.word	0xf7ffffff

08005b24 <__aeabi_fsub>:
 8005b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b26:	46c6      	mov	lr, r8
 8005b28:	0243      	lsls	r3, r0, #9
 8005b2a:	0a5b      	lsrs	r3, r3, #9
 8005b2c:	0045      	lsls	r5, r0, #1
 8005b2e:	00da      	lsls	r2, r3, #3
 8005b30:	0fc4      	lsrs	r4, r0, #31
 8005b32:	0248      	lsls	r0, r1, #9
 8005b34:	004f      	lsls	r7, r1, #1
 8005b36:	4694      	mov	ip, r2
 8005b38:	0a42      	lsrs	r2, r0, #9
 8005b3a:	001e      	movs	r6, r3
 8005b3c:	4690      	mov	r8, r2
 8005b3e:	b500      	push	{lr}
 8005b40:	0e2d      	lsrs	r5, r5, #24
 8005b42:	0e3f      	lsrs	r7, r7, #24
 8005b44:	0fc9      	lsrs	r1, r1, #31
 8005b46:	0980      	lsrs	r0, r0, #6
 8005b48:	2fff      	cmp	r7, #255	; 0xff
 8005b4a:	d059      	beq.n	8005c00 <__aeabi_fsub+0xdc>
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	4051      	eors	r1, r2
 8005b50:	428c      	cmp	r4, r1
 8005b52:	d039      	beq.n	8005bc8 <__aeabi_fsub+0xa4>
 8005b54:	1bea      	subs	r2, r5, r7
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	dd58      	ble.n	8005c0c <__aeabi_fsub+0xe8>
 8005b5a:	2f00      	cmp	r7, #0
 8005b5c:	d068      	beq.n	8005c30 <__aeabi_fsub+0x10c>
 8005b5e:	2dff      	cmp	r5, #255	; 0xff
 8005b60:	d100      	bne.n	8005b64 <__aeabi_fsub+0x40>
 8005b62:	e0d1      	b.n	8005d08 <__aeabi_fsub+0x1e4>
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	04db      	lsls	r3, r3, #19
 8005b68:	4318      	orrs	r0, r3
 8005b6a:	2a1b      	cmp	r2, #27
 8005b6c:	dc00      	bgt.n	8005b70 <__aeabi_fsub+0x4c>
 8005b6e:	e0e3      	b.n	8005d38 <__aeabi_fsub+0x214>
 8005b70:	2301      	movs	r3, #1
 8005b72:	4662      	mov	r2, ip
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	d400      	bmi.n	8005b7c <__aeabi_fsub+0x58>
 8005b7a:	e0ac      	b.n	8005cd6 <__aeabi_fsub+0x1b2>
 8005b7c:	019b      	lsls	r3, r3, #6
 8005b7e:	099e      	lsrs	r6, r3, #6
 8005b80:	0030      	movs	r0, r6
 8005b82:	f7fc f815 	bl	8001bb0 <__clzsi2>
 8005b86:	0033      	movs	r3, r6
 8005b88:	3805      	subs	r0, #5
 8005b8a:	4083      	lsls	r3, r0
 8005b8c:	4285      	cmp	r5, r0
 8005b8e:	dc00      	bgt.n	8005b92 <__aeabi_fsub+0x6e>
 8005b90:	e0c6      	b.n	8005d20 <__aeabi_fsub+0x1fc>
 8005b92:	4ab2      	ldr	r2, [pc, #712]	; (8005e5c <__aeabi_fsub+0x338>)
 8005b94:	1a2d      	subs	r5, r5, r0
 8005b96:	4013      	ands	r3, r2
 8005b98:	075a      	lsls	r2, r3, #29
 8005b9a:	d004      	beq.n	8005ba6 <__aeabi_fsub+0x82>
 8005b9c:	220f      	movs	r2, #15
 8005b9e:	401a      	ands	r2, r3
 8005ba0:	2a04      	cmp	r2, #4
 8005ba2:	d000      	beq.n	8005ba6 <__aeabi_fsub+0x82>
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	d400      	bmi.n	8005bac <__aeabi_fsub+0x88>
 8005baa:	e097      	b.n	8005cdc <__aeabi_fsub+0x1b8>
 8005bac:	1c6a      	adds	r2, r5, #1
 8005bae:	2dfe      	cmp	r5, #254	; 0xfe
 8005bb0:	d100      	bne.n	8005bb4 <__aeabi_fsub+0x90>
 8005bb2:	e084      	b.n	8005cbe <__aeabi_fsub+0x19a>
 8005bb4:	019b      	lsls	r3, r3, #6
 8005bb6:	0a5e      	lsrs	r6, r3, #9
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	05d0      	lsls	r0, r2, #23
 8005bbc:	4330      	orrs	r0, r6
 8005bbe:	07e4      	lsls	r4, r4, #31
 8005bc0:	4320      	orrs	r0, r4
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	46b8      	mov	r8, r7
 8005bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bc8:	1bea      	subs	r2, r5, r7
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	dd41      	ble.n	8005c52 <__aeabi_fsub+0x12e>
 8005bce:	2f00      	cmp	r7, #0
 8005bd0:	d06b      	beq.n	8005caa <__aeabi_fsub+0x186>
 8005bd2:	2dff      	cmp	r5, #255	; 0xff
 8005bd4:	d100      	bne.n	8005bd8 <__aeabi_fsub+0xb4>
 8005bd6:	e097      	b.n	8005d08 <__aeabi_fsub+0x1e4>
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	04db      	lsls	r3, r3, #19
 8005bdc:	4318      	orrs	r0, r3
 8005bde:	2a1b      	cmp	r2, #27
 8005be0:	dc00      	bgt.n	8005be4 <__aeabi_fsub+0xc0>
 8005be2:	e0cc      	b.n	8005d7e <__aeabi_fsub+0x25a>
 8005be4:	2301      	movs	r3, #1
 8005be6:	4463      	add	r3, ip
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	d574      	bpl.n	8005cd6 <__aeabi_fsub+0x1b2>
 8005bec:	3501      	adds	r5, #1
 8005bee:	2dff      	cmp	r5, #255	; 0xff
 8005bf0:	d065      	beq.n	8005cbe <__aeabi_fsub+0x19a>
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	499a      	ldr	r1, [pc, #616]	; (8005e60 <__aeabi_fsub+0x33c>)
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	400b      	ands	r3, r1
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	e7cb      	b.n	8005b98 <__aeabi_fsub+0x74>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d01f      	beq.n	8005c44 <__aeabi_fsub+0x120>
 8005c04:	428c      	cmp	r4, r1
 8005c06:	d022      	beq.n	8005c4e <__aeabi_fsub+0x12a>
 8005c08:	002a      	movs	r2, r5
 8005c0a:	3aff      	subs	r2, #255	; 0xff
 8005c0c:	2a00      	cmp	r2, #0
 8005c0e:	d035      	beq.n	8005c7c <__aeabi_fsub+0x158>
 8005c10:	1b7a      	subs	r2, r7, r5
 8005c12:	2d00      	cmp	r5, #0
 8005c14:	d000      	beq.n	8005c18 <__aeabi_fsub+0xf4>
 8005c16:	e099      	b.n	8005d4c <__aeabi_fsub+0x228>
 8005c18:	4663      	mov	r3, ip
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d100      	bne.n	8005c20 <__aeabi_fsub+0xfc>
 8005c1e:	e0dd      	b.n	8005ddc <__aeabi_fsub+0x2b8>
 8005c20:	1e53      	subs	r3, r2, #1
 8005c22:	2a01      	cmp	r2, #1
 8005c24:	d100      	bne.n	8005c28 <__aeabi_fsub+0x104>
 8005c26:	e105      	b.n	8005e34 <__aeabi_fsub+0x310>
 8005c28:	2aff      	cmp	r2, #255	; 0xff
 8005c2a:	d06b      	beq.n	8005d04 <__aeabi_fsub+0x1e0>
 8005c2c:	001a      	movs	r2, r3
 8005c2e:	e094      	b.n	8005d5a <__aeabi_fsub+0x236>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d073      	beq.n	8005d1c <__aeabi_fsub+0x1f8>
 8005c34:	1e51      	subs	r1, r2, #1
 8005c36:	2a01      	cmp	r2, #1
 8005c38:	d100      	bne.n	8005c3c <__aeabi_fsub+0x118>
 8005c3a:	e0df      	b.n	8005dfc <__aeabi_fsub+0x2d8>
 8005c3c:	2aff      	cmp	r2, #255	; 0xff
 8005c3e:	d063      	beq.n	8005d08 <__aeabi_fsub+0x1e4>
 8005c40:	000a      	movs	r2, r1
 8005c42:	e792      	b.n	8005b6a <__aeabi_fsub+0x46>
 8005c44:	2201      	movs	r2, #1
 8005c46:	4051      	eors	r1, r2
 8005c48:	42a1      	cmp	r1, r4
 8005c4a:	d000      	beq.n	8005c4e <__aeabi_fsub+0x12a>
 8005c4c:	e782      	b.n	8005b54 <__aeabi_fsub+0x30>
 8005c4e:	002a      	movs	r2, r5
 8005c50:	3aff      	subs	r2, #255	; 0xff
 8005c52:	2a00      	cmp	r2, #0
 8005c54:	d036      	beq.n	8005cc4 <__aeabi_fsub+0x1a0>
 8005c56:	1b7a      	subs	r2, r7, r5
 8005c58:	2d00      	cmp	r5, #0
 8005c5a:	d100      	bne.n	8005c5e <__aeabi_fsub+0x13a>
 8005c5c:	e0aa      	b.n	8005db4 <__aeabi_fsub+0x290>
 8005c5e:	2fff      	cmp	r7, #255	; 0xff
 8005c60:	d100      	bne.n	8005c64 <__aeabi_fsub+0x140>
 8005c62:	e0da      	b.n	8005e1a <__aeabi_fsub+0x2f6>
 8005c64:	2380      	movs	r3, #128	; 0x80
 8005c66:	4661      	mov	r1, ip
 8005c68:	04db      	lsls	r3, r3, #19
 8005c6a:	4319      	orrs	r1, r3
 8005c6c:	468c      	mov	ip, r1
 8005c6e:	2a1b      	cmp	r2, #27
 8005c70:	dc00      	bgt.n	8005c74 <__aeabi_fsub+0x150>
 8005c72:	e0d4      	b.n	8005e1e <__aeabi_fsub+0x2fa>
 8005c74:	2301      	movs	r3, #1
 8005c76:	003d      	movs	r5, r7
 8005c78:	181b      	adds	r3, r3, r0
 8005c7a:	e7b5      	b.n	8005be8 <__aeabi_fsub+0xc4>
 8005c7c:	27fe      	movs	r7, #254	; 0xfe
 8005c7e:	1c6a      	adds	r2, r5, #1
 8005c80:	4217      	tst	r7, r2
 8005c82:	d171      	bne.n	8005d68 <__aeabi_fsub+0x244>
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	d000      	beq.n	8005c8a <__aeabi_fsub+0x166>
 8005c88:	e09e      	b.n	8005dc8 <__aeabi_fsub+0x2a4>
 8005c8a:	4663      	mov	r3, ip
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d100      	bne.n	8005c92 <__aeabi_fsub+0x16e>
 8005c90:	e0d5      	b.n	8005e3e <__aeabi_fsub+0x31a>
 8005c92:	2200      	movs	r2, #0
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d100      	bne.n	8005c9a <__aeabi_fsub+0x176>
 8005c98:	e78f      	b.n	8005bba <__aeabi_fsub+0x96>
 8005c9a:	1a1b      	subs	r3, r3, r0
 8005c9c:	015e      	lsls	r6, r3, #5
 8005c9e:	d400      	bmi.n	8005ca2 <__aeabi_fsub+0x17e>
 8005ca0:	e0d6      	b.n	8005e50 <__aeabi_fsub+0x32c>
 8005ca2:	4663      	mov	r3, ip
 8005ca4:	000c      	movs	r4, r1
 8005ca6:	1ac3      	subs	r3, r0, r3
 8005ca8:	e776      	b.n	8005b98 <__aeabi_fsub+0x74>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d036      	beq.n	8005d1c <__aeabi_fsub+0x1f8>
 8005cae:	1e51      	subs	r1, r2, #1
 8005cb0:	2a01      	cmp	r2, #1
 8005cb2:	d100      	bne.n	8005cb6 <__aeabi_fsub+0x192>
 8005cb4:	e09a      	b.n	8005dec <__aeabi_fsub+0x2c8>
 8005cb6:	2aff      	cmp	r2, #255	; 0xff
 8005cb8:	d026      	beq.n	8005d08 <__aeabi_fsub+0x1e4>
 8005cba:	000a      	movs	r2, r1
 8005cbc:	e78f      	b.n	8005bde <__aeabi_fsub+0xba>
 8005cbe:	22ff      	movs	r2, #255	; 0xff
 8005cc0:	2600      	movs	r6, #0
 8005cc2:	e77a      	b.n	8005bba <__aeabi_fsub+0x96>
 8005cc4:	27fe      	movs	r7, #254	; 0xfe
 8005cc6:	1c6a      	adds	r2, r5, #1
 8005cc8:	4217      	tst	r7, r2
 8005cca:	d062      	beq.n	8005d92 <__aeabi_fsub+0x26e>
 8005ccc:	2aff      	cmp	r2, #255	; 0xff
 8005cce:	d0f6      	beq.n	8005cbe <__aeabi_fsub+0x19a>
 8005cd0:	0015      	movs	r5, r2
 8005cd2:	4460      	add	r0, ip
 8005cd4:	0843      	lsrs	r3, r0, #1
 8005cd6:	075a      	lsls	r2, r3, #29
 8005cd8:	d000      	beq.n	8005cdc <__aeabi_fsub+0x1b8>
 8005cda:	e75f      	b.n	8005b9c <__aeabi_fsub+0x78>
 8005cdc:	08db      	lsrs	r3, r3, #3
 8005cde:	2dff      	cmp	r5, #255	; 0xff
 8005ce0:	d012      	beq.n	8005d08 <__aeabi_fsub+0x1e4>
 8005ce2:	025b      	lsls	r3, r3, #9
 8005ce4:	0a5e      	lsrs	r6, r3, #9
 8005ce6:	b2ea      	uxtb	r2, r5
 8005ce8:	e767      	b.n	8005bba <__aeabi_fsub+0x96>
 8005cea:	4662      	mov	r2, ip
 8005cec:	2a00      	cmp	r2, #0
 8005cee:	d100      	bne.n	8005cf2 <__aeabi_fsub+0x1ce>
 8005cf0:	e093      	b.n	8005e1a <__aeabi_fsub+0x2f6>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d008      	beq.n	8005d08 <__aeabi_fsub+0x1e4>
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	03d2      	lsls	r2, r2, #15
 8005cfa:	4213      	tst	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <__aeabi_fsub+0x1e4>
 8005cfe:	4640      	mov	r0, r8
 8005d00:	4210      	tst	r0, r2
 8005d02:	d101      	bne.n	8005d08 <__aeabi_fsub+0x1e4>
 8005d04:	000c      	movs	r4, r1
 8005d06:	4643      	mov	r3, r8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0d8      	beq.n	8005cbe <__aeabi_fsub+0x19a>
 8005d0c:	2680      	movs	r6, #128	; 0x80
 8005d0e:	03f6      	lsls	r6, r6, #15
 8005d10:	431e      	orrs	r6, r3
 8005d12:	0276      	lsls	r6, r6, #9
 8005d14:	22ff      	movs	r2, #255	; 0xff
 8005d16:	0a76      	lsrs	r6, r6, #9
 8005d18:	e74f      	b.n	8005bba <__aeabi_fsub+0x96>
 8005d1a:	4643      	mov	r3, r8
 8005d1c:	0015      	movs	r5, r2
 8005d1e:	e7de      	b.n	8005cde <__aeabi_fsub+0x1ba>
 8005d20:	2220      	movs	r2, #32
 8005d22:	1b40      	subs	r0, r0, r5
 8005d24:	3001      	adds	r0, #1
 8005d26:	1a12      	subs	r2, r2, r0
 8005d28:	0019      	movs	r1, r3
 8005d2a:	4093      	lsls	r3, r2
 8005d2c:	40c1      	lsrs	r1, r0
 8005d2e:	1e5a      	subs	r2, r3, #1
 8005d30:	4193      	sbcs	r3, r2
 8005d32:	2500      	movs	r5, #0
 8005d34:	430b      	orrs	r3, r1
 8005d36:	e72f      	b.n	8005b98 <__aeabi_fsub+0x74>
 8005d38:	2320      	movs	r3, #32
 8005d3a:	1a9b      	subs	r3, r3, r2
 8005d3c:	0001      	movs	r1, r0
 8005d3e:	4098      	lsls	r0, r3
 8005d40:	0003      	movs	r3, r0
 8005d42:	40d1      	lsrs	r1, r2
 8005d44:	1e5a      	subs	r2, r3, #1
 8005d46:	4193      	sbcs	r3, r2
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	e712      	b.n	8005b72 <__aeabi_fsub+0x4e>
 8005d4c:	2fff      	cmp	r7, #255	; 0xff
 8005d4e:	d0d9      	beq.n	8005d04 <__aeabi_fsub+0x1e0>
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	4664      	mov	r4, ip
 8005d54:	04db      	lsls	r3, r3, #19
 8005d56:	431c      	orrs	r4, r3
 8005d58:	46a4      	mov	ip, r4
 8005d5a:	2a1b      	cmp	r2, #27
 8005d5c:	dd52      	ble.n	8005e04 <__aeabi_fsub+0x2e0>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	000c      	movs	r4, r1
 8005d62:	003d      	movs	r5, r7
 8005d64:	1ac3      	subs	r3, r0, r3
 8005d66:	e706      	b.n	8005b76 <__aeabi_fsub+0x52>
 8005d68:	4663      	mov	r3, ip
 8005d6a:	1a1e      	subs	r6, r3, r0
 8005d6c:	0173      	lsls	r3, r6, #5
 8005d6e:	d439      	bmi.n	8005de4 <__aeabi_fsub+0x2c0>
 8005d70:	2e00      	cmp	r6, #0
 8005d72:	d000      	beq.n	8005d76 <__aeabi_fsub+0x252>
 8005d74:	e704      	b.n	8005b80 <__aeabi_fsub+0x5c>
 8005d76:	2400      	movs	r4, #0
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2600      	movs	r6, #0
 8005d7c:	e71d      	b.n	8005bba <__aeabi_fsub+0x96>
 8005d7e:	2320      	movs	r3, #32
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	0001      	movs	r1, r0
 8005d84:	4098      	lsls	r0, r3
 8005d86:	0003      	movs	r3, r0
 8005d88:	40d1      	lsrs	r1, r2
 8005d8a:	1e5a      	subs	r2, r3, #1
 8005d8c:	4193      	sbcs	r3, r2
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	e729      	b.n	8005be6 <__aeabi_fsub+0xc2>
 8005d92:	2d00      	cmp	r5, #0
 8005d94:	d1a9      	bne.n	8005cea <__aeabi_fsub+0x1c6>
 8005d96:	4663      	mov	r3, ip
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d056      	beq.n	8005e4a <__aeabi_fsub+0x326>
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d100      	bne.n	8005da4 <__aeabi_fsub+0x280>
 8005da2:	e70a      	b.n	8005bba <__aeabi_fsub+0x96>
 8005da4:	0003      	movs	r3, r0
 8005da6:	4463      	add	r3, ip
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	d594      	bpl.n	8005cd6 <__aeabi_fsub+0x1b2>
 8005dac:	4a2b      	ldr	r2, [pc, #172]	; (8005e5c <__aeabi_fsub+0x338>)
 8005dae:	3501      	adds	r5, #1
 8005db0:	4013      	ands	r3, r2
 8005db2:	e790      	b.n	8005cd6 <__aeabi_fsub+0x1b2>
 8005db4:	4663      	mov	r3, ip
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0af      	beq.n	8005d1a <__aeabi_fsub+0x1f6>
 8005dba:	1e53      	subs	r3, r2, #1
 8005dbc:	2a01      	cmp	r2, #1
 8005dbe:	d015      	beq.n	8005dec <__aeabi_fsub+0x2c8>
 8005dc0:	2aff      	cmp	r2, #255	; 0xff
 8005dc2:	d02a      	beq.n	8005e1a <__aeabi_fsub+0x2f6>
 8005dc4:	001a      	movs	r2, r3
 8005dc6:	e752      	b.n	8005c6e <__aeabi_fsub+0x14a>
 8005dc8:	4662      	mov	r2, ip
 8005dca:	2a00      	cmp	r2, #0
 8005dcc:	d191      	bne.n	8005cf2 <__aeabi_fsub+0x1ce>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d198      	bne.n	8005d04 <__aeabi_fsub+0x1e0>
 8005dd2:	2680      	movs	r6, #128	; 0x80
 8005dd4:	2400      	movs	r4, #0
 8005dd6:	22ff      	movs	r2, #255	; 0xff
 8005dd8:	03f6      	lsls	r6, r6, #15
 8005dda:	e6ee      	b.n	8005bba <__aeabi_fsub+0x96>
 8005ddc:	000c      	movs	r4, r1
 8005dde:	4643      	mov	r3, r8
 8005de0:	0015      	movs	r5, r2
 8005de2:	e77c      	b.n	8005cde <__aeabi_fsub+0x1ba>
 8005de4:	4663      	mov	r3, ip
 8005de6:	000c      	movs	r4, r1
 8005de8:	1ac6      	subs	r6, r0, r3
 8005dea:	e6c9      	b.n	8005b80 <__aeabi_fsub+0x5c>
 8005dec:	0003      	movs	r3, r0
 8005dee:	4463      	add	r3, ip
 8005df0:	2501      	movs	r5, #1
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	d400      	bmi.n	8005df8 <__aeabi_fsub+0x2d4>
 8005df6:	e76e      	b.n	8005cd6 <__aeabi_fsub+0x1b2>
 8005df8:	2502      	movs	r5, #2
 8005dfa:	e6fa      	b.n	8005bf2 <__aeabi_fsub+0xce>
 8005dfc:	4663      	mov	r3, ip
 8005dfe:	2501      	movs	r5, #1
 8005e00:	1a1b      	subs	r3, r3, r0
 8005e02:	e6b8      	b.n	8005b76 <__aeabi_fsub+0x52>
 8005e04:	4664      	mov	r4, ip
 8005e06:	2320      	movs	r3, #32
 8005e08:	40d4      	lsrs	r4, r2
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	4662      	mov	r2, ip
 8005e0e:	409a      	lsls	r2, r3
 8005e10:	0013      	movs	r3, r2
 8005e12:	1e5a      	subs	r2, r3, #1
 8005e14:	4193      	sbcs	r3, r2
 8005e16:	4323      	orrs	r3, r4
 8005e18:	e7a2      	b.n	8005d60 <__aeabi_fsub+0x23c>
 8005e1a:	4643      	mov	r3, r8
 8005e1c:	e774      	b.n	8005d08 <__aeabi_fsub+0x1e4>
 8005e1e:	4661      	mov	r1, ip
 8005e20:	2320      	movs	r3, #32
 8005e22:	40d1      	lsrs	r1, r2
 8005e24:	1a9b      	subs	r3, r3, r2
 8005e26:	4662      	mov	r2, ip
 8005e28:	409a      	lsls	r2, r3
 8005e2a:	0013      	movs	r3, r2
 8005e2c:	1e5a      	subs	r2, r3, #1
 8005e2e:	4193      	sbcs	r3, r2
 8005e30:	430b      	orrs	r3, r1
 8005e32:	e720      	b.n	8005c76 <__aeabi_fsub+0x152>
 8005e34:	4663      	mov	r3, ip
 8005e36:	000c      	movs	r4, r1
 8005e38:	2501      	movs	r5, #1
 8005e3a:	1ac3      	subs	r3, r0, r3
 8005e3c:	e69b      	b.n	8005b76 <__aeabi_fsub+0x52>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d099      	beq.n	8005d76 <__aeabi_fsub+0x252>
 8005e42:	000c      	movs	r4, r1
 8005e44:	4646      	mov	r6, r8
 8005e46:	2200      	movs	r2, #0
 8005e48:	e6b7      	b.n	8005bba <__aeabi_fsub+0x96>
 8005e4a:	4646      	mov	r6, r8
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	e6b4      	b.n	8005bba <__aeabi_fsub+0x96>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d000      	beq.n	8005e56 <__aeabi_fsub+0x332>
 8005e54:	e73f      	b.n	8005cd6 <__aeabi_fsub+0x1b2>
 8005e56:	2400      	movs	r4, #0
 8005e58:	2600      	movs	r6, #0
 8005e5a:	e6ae      	b.n	8005bba <__aeabi_fsub+0x96>
 8005e5c:	fbffffff 	.word	0xfbffffff
 8005e60:	7dffffff 	.word	0x7dffffff

08005e64 <__aeabi_f2iz>:
 8005e64:	0241      	lsls	r1, r0, #9
 8005e66:	0042      	lsls	r2, r0, #1
 8005e68:	0fc3      	lsrs	r3, r0, #31
 8005e6a:	0a49      	lsrs	r1, r1, #9
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	0e12      	lsrs	r2, r2, #24
 8005e70:	2a7e      	cmp	r2, #126	; 0x7e
 8005e72:	dd03      	ble.n	8005e7c <__aeabi_f2iz+0x18>
 8005e74:	2a9d      	cmp	r2, #157	; 0x9d
 8005e76:	dd02      	ble.n	8005e7e <__aeabi_f2iz+0x1a>
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <__aeabi_f2iz+0x3c>)
 8005e7a:	1898      	adds	r0, r3, r2
 8005e7c:	4770      	bx	lr
 8005e7e:	2080      	movs	r0, #128	; 0x80
 8005e80:	0400      	lsls	r0, r0, #16
 8005e82:	4301      	orrs	r1, r0
 8005e84:	2a95      	cmp	r2, #149	; 0x95
 8005e86:	dc07      	bgt.n	8005e98 <__aeabi_f2iz+0x34>
 8005e88:	2096      	movs	r0, #150	; 0x96
 8005e8a:	1a82      	subs	r2, r0, r2
 8005e8c:	40d1      	lsrs	r1, r2
 8005e8e:	4248      	negs	r0, r1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f3      	bne.n	8005e7c <__aeabi_f2iz+0x18>
 8005e94:	0008      	movs	r0, r1
 8005e96:	e7f1      	b.n	8005e7c <__aeabi_f2iz+0x18>
 8005e98:	3a96      	subs	r2, #150	; 0x96
 8005e9a:	4091      	lsls	r1, r2
 8005e9c:	e7f7      	b.n	8005e8e <__aeabi_f2iz+0x2a>
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	7fffffff 	.word	0x7fffffff

08005ea4 <__aeabi_i2f>:
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d013      	beq.n	8005ed2 <__aeabi_i2f+0x2e>
 8005eaa:	17c3      	asrs	r3, r0, #31
 8005eac:	18c5      	adds	r5, r0, r3
 8005eae:	405d      	eors	r5, r3
 8005eb0:	0fc4      	lsrs	r4, r0, #31
 8005eb2:	0028      	movs	r0, r5
 8005eb4:	f7fb fe7c 	bl	8001bb0 <__clzsi2>
 8005eb8:	239e      	movs	r3, #158	; 0x9e
 8005eba:	0001      	movs	r1, r0
 8005ebc:	1a1b      	subs	r3, r3, r0
 8005ebe:	2b96      	cmp	r3, #150	; 0x96
 8005ec0:	dc0f      	bgt.n	8005ee2 <__aeabi_i2f+0x3e>
 8005ec2:	2808      	cmp	r0, #8
 8005ec4:	d031      	beq.n	8005f2a <__aeabi_i2f+0x86>
 8005ec6:	3908      	subs	r1, #8
 8005ec8:	408d      	lsls	r5, r1
 8005eca:	026d      	lsls	r5, r5, #9
 8005ecc:	0a6d      	lsrs	r5, r5, #9
 8005ece:	b2d8      	uxtb	r0, r3
 8005ed0:	e002      	b.n	8005ed8 <__aeabi_i2f+0x34>
 8005ed2:	2400      	movs	r4, #0
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	2500      	movs	r5, #0
 8005ed8:	05c0      	lsls	r0, r0, #23
 8005eda:	4328      	orrs	r0, r5
 8005edc:	07e4      	lsls	r4, r4, #31
 8005ede:	4320      	orrs	r0, r4
 8005ee0:	bd70      	pop	{r4, r5, r6, pc}
 8005ee2:	2b99      	cmp	r3, #153	; 0x99
 8005ee4:	dd0c      	ble.n	8005f00 <__aeabi_i2f+0x5c>
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	1a12      	subs	r2, r2, r0
 8005eea:	0028      	movs	r0, r5
 8005eec:	40d0      	lsrs	r0, r2
 8005eee:	0002      	movs	r2, r0
 8005ef0:	0008      	movs	r0, r1
 8005ef2:	301b      	adds	r0, #27
 8005ef4:	4085      	lsls	r5, r0
 8005ef6:	0028      	movs	r0, r5
 8005ef8:	1e45      	subs	r5, r0, #1
 8005efa:	41a8      	sbcs	r0, r5
 8005efc:	4302      	orrs	r2, r0
 8005efe:	0015      	movs	r5, r2
 8005f00:	2905      	cmp	r1, #5
 8005f02:	dc16      	bgt.n	8005f32 <__aeabi_i2f+0x8e>
 8005f04:	002a      	movs	r2, r5
 8005f06:	480f      	ldr	r0, [pc, #60]	; (8005f44 <__aeabi_i2f+0xa0>)
 8005f08:	4002      	ands	r2, r0
 8005f0a:	076e      	lsls	r6, r5, #29
 8005f0c:	d009      	beq.n	8005f22 <__aeabi_i2f+0x7e>
 8005f0e:	260f      	movs	r6, #15
 8005f10:	4035      	ands	r5, r6
 8005f12:	2d04      	cmp	r5, #4
 8005f14:	d005      	beq.n	8005f22 <__aeabi_i2f+0x7e>
 8005f16:	3204      	adds	r2, #4
 8005f18:	0155      	lsls	r5, r2, #5
 8005f1a:	d502      	bpl.n	8005f22 <__aeabi_i2f+0x7e>
 8005f1c:	239f      	movs	r3, #159	; 0x9f
 8005f1e:	4002      	ands	r2, r0
 8005f20:	1a5b      	subs	r3, r3, r1
 8005f22:	0192      	lsls	r2, r2, #6
 8005f24:	0a55      	lsrs	r5, r2, #9
 8005f26:	b2d8      	uxtb	r0, r3
 8005f28:	e7d6      	b.n	8005ed8 <__aeabi_i2f+0x34>
 8005f2a:	026d      	lsls	r5, r5, #9
 8005f2c:	2096      	movs	r0, #150	; 0x96
 8005f2e:	0a6d      	lsrs	r5, r5, #9
 8005f30:	e7d2      	b.n	8005ed8 <__aeabi_i2f+0x34>
 8005f32:	1f4a      	subs	r2, r1, #5
 8005f34:	4095      	lsls	r5, r2
 8005f36:	002a      	movs	r2, r5
 8005f38:	4802      	ldr	r0, [pc, #8]	; (8005f44 <__aeabi_i2f+0xa0>)
 8005f3a:	4002      	ands	r2, r0
 8005f3c:	076e      	lsls	r6, r5, #29
 8005f3e:	d0f0      	beq.n	8005f22 <__aeabi_i2f+0x7e>
 8005f40:	e7e5      	b.n	8005f0e <__aeabi_i2f+0x6a>
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	fbffffff 	.word	0xfbffffff

08005f48 <__aeabi_ui2f>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	1e04      	subs	r4, r0, #0
 8005f4c:	d00e      	beq.n	8005f6c <__aeabi_ui2f+0x24>
 8005f4e:	f7fb fe2f 	bl	8001bb0 <__clzsi2>
 8005f52:	239e      	movs	r3, #158	; 0x9e
 8005f54:	0001      	movs	r1, r0
 8005f56:	1a1b      	subs	r3, r3, r0
 8005f58:	2b96      	cmp	r3, #150	; 0x96
 8005f5a:	dc0c      	bgt.n	8005f76 <__aeabi_ui2f+0x2e>
 8005f5c:	2808      	cmp	r0, #8
 8005f5e:	d02c      	beq.n	8005fba <__aeabi_ui2f+0x72>
 8005f60:	3908      	subs	r1, #8
 8005f62:	408c      	lsls	r4, r1
 8005f64:	0264      	lsls	r4, r4, #9
 8005f66:	0a64      	lsrs	r4, r4, #9
 8005f68:	b2d8      	uxtb	r0, r3
 8005f6a:	e001      	b.n	8005f70 <__aeabi_ui2f+0x28>
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	2400      	movs	r4, #0
 8005f70:	05c0      	lsls	r0, r0, #23
 8005f72:	4320      	orrs	r0, r4
 8005f74:	bd70      	pop	{r4, r5, r6, pc}
 8005f76:	2b99      	cmp	r3, #153	; 0x99
 8005f78:	dd0a      	ble.n	8005f90 <__aeabi_ui2f+0x48>
 8005f7a:	0002      	movs	r2, r0
 8005f7c:	0020      	movs	r0, r4
 8005f7e:	321b      	adds	r2, #27
 8005f80:	4090      	lsls	r0, r2
 8005f82:	0002      	movs	r2, r0
 8005f84:	1e50      	subs	r0, r2, #1
 8005f86:	4182      	sbcs	r2, r0
 8005f88:	2005      	movs	r0, #5
 8005f8a:	1a40      	subs	r0, r0, r1
 8005f8c:	40c4      	lsrs	r4, r0
 8005f8e:	4314      	orrs	r4, r2
 8005f90:	2905      	cmp	r1, #5
 8005f92:	dc16      	bgt.n	8005fc2 <__aeabi_ui2f+0x7a>
 8005f94:	0022      	movs	r2, r4
 8005f96:	480f      	ldr	r0, [pc, #60]	; (8005fd4 <__aeabi_ui2f+0x8c>)
 8005f98:	4002      	ands	r2, r0
 8005f9a:	0765      	lsls	r5, r4, #29
 8005f9c:	d009      	beq.n	8005fb2 <__aeabi_ui2f+0x6a>
 8005f9e:	250f      	movs	r5, #15
 8005fa0:	402c      	ands	r4, r5
 8005fa2:	2c04      	cmp	r4, #4
 8005fa4:	d005      	beq.n	8005fb2 <__aeabi_ui2f+0x6a>
 8005fa6:	3204      	adds	r2, #4
 8005fa8:	0154      	lsls	r4, r2, #5
 8005faa:	d502      	bpl.n	8005fb2 <__aeabi_ui2f+0x6a>
 8005fac:	239f      	movs	r3, #159	; 0x9f
 8005fae:	4002      	ands	r2, r0
 8005fb0:	1a5b      	subs	r3, r3, r1
 8005fb2:	0192      	lsls	r2, r2, #6
 8005fb4:	0a54      	lsrs	r4, r2, #9
 8005fb6:	b2d8      	uxtb	r0, r3
 8005fb8:	e7da      	b.n	8005f70 <__aeabi_ui2f+0x28>
 8005fba:	0264      	lsls	r4, r4, #9
 8005fbc:	2096      	movs	r0, #150	; 0x96
 8005fbe:	0a64      	lsrs	r4, r4, #9
 8005fc0:	e7d6      	b.n	8005f70 <__aeabi_ui2f+0x28>
 8005fc2:	1f4a      	subs	r2, r1, #5
 8005fc4:	4094      	lsls	r4, r2
 8005fc6:	0022      	movs	r2, r4
 8005fc8:	4802      	ldr	r0, [pc, #8]	; (8005fd4 <__aeabi_ui2f+0x8c>)
 8005fca:	4002      	ands	r2, r0
 8005fcc:	0765      	lsls	r5, r4, #29
 8005fce:	d0f0      	beq.n	8005fb2 <__aeabi_ui2f+0x6a>
 8005fd0:	e7e5      	b.n	8005f9e <__aeabi_ui2f+0x56>
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	fbffffff 	.word	0xfbffffff
